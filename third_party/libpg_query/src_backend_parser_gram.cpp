/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 157,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 158,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 159,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 160,                   /* FAMILY  */
  YYSYMBOL_FETCH = 161,                    /* FETCH  */
  YYSYMBOL_FILTER = 162,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 163,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 164,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 165,                /* FOLLOWING  */
  YYSYMBOL_FOR = 166,                      /* FOR  */
  YYSYMBOL_FORCE = 167,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 168,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 169,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 170,                   /* FREEZE  */
  YYSYMBOL_FROM = 171,                     /* FROM  */
  YYSYMBOL_FULL = 172,                     /* FULL  */
  YYSYMBOL_FUNCTION = 173,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 174,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 175,                /* GENERATED  */
  YYSYMBOL_GLOB = 176,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 177,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 178,                    /* GRANT  */
  YYSYMBOL_GRANTED = 179,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 180,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 181,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 182,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 183,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 184,                  /* HANDLER  */
  YYSYMBOL_HAVING = 185,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 186,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 187,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 188,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 189,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 190,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 191,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 192,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 193,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 194,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 195,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 196,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 197,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 198,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 199,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 200,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 201,                /* INCREMENT  */
  YYSYMBOL_INDEX = 202,                    /* INDEX  */
  YYSYMBOL_INDEXES = 203,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 204,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 205,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 206,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 207,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 208,                  /* INNER_P  */
  YYSYMBOL_INOUT = 209,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 210,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 211,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 212,                   /* INSERT  */
  YYSYMBOL_INSTALL = 213,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 214,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 215,                    /* INT_P  */
  YYSYMBOL_INTEGER = 216,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 217,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 218,                 /* INTERVAL  */
  YYSYMBOL_INTO = 219,                     /* INTO  */
  YYSYMBOL_INVOKER = 220,                  /* INVOKER  */
  YYSYMBOL_IS = 221,                       /* IS  */
  YYSYMBOL_ISNULL = 222,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 223,                /* ISOLATION  */
  YYSYMBOL_JOIN = 224,                     /* JOIN  */
  YYSYMBOL_JSON = 225,                     /* JSON  */
  YYSYMBOL_KEY = 226,                      /* KEY  */
  YYSYMBOL_LABEL = 227,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 228,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 229,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 230,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 231,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 232,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 233,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 234,                     /* LEFT  */
  YYSYMBOL_LEVEL = 235,                    /* LEVEL  */
  YYSYMBOL_LIKE = 236,                     /* LIKE  */
  YYSYMBOL_LIMIT = 237,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 238,                   /* LISTEN  */
  YYSYMBOL_LOAD = 239,                     /* LOAD  */
  YYSYMBOL_LOCAL = 240,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 241,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 242,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 243,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 244,                   /* LOGGED  */
  YYSYMBOL_MACRO = 245,                    /* MACRO  */
  YYSYMBOL_MAP = 246,                      /* MAP  */
  YYSYMBOL_MAPPING = 247,                  /* MAPPING  */
  YYSYMBOL_MATCH = 248,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 249,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 250,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 251,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 252,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 253,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 254,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 255,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 256,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 257,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 258,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 259,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 260,                 /* MINVALUE  */
  YYSYMBOL_MODE = 261,                     /* MODE  */
  YYSYMBOL_MONTH_P = 262,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 263,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 264,                     /* MOVE  */
  YYSYMBOL_NAME_P = 265,                   /* NAME_P  */
  YYSYMBOL_NAMES = 266,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 267,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 268,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 269,                    /* NCHAR  */
  YYSYMBOL_NEW = 270,                      /* NEW  */
  YYSYMBOL_NEXT = 271,                     /* NEXT  */
  YYSYMBOL_NO = 272,                       /* NO  */
  YYSYMBOL_NONE = 273,                     /* NONE  */
  YYSYMBOL_NOT = 274,                      /* NOT  */
  YYSYMBOL_NOTHING = 275,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 276,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 277,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 278,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 279,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 280,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 281,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 282,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 283,                 /* OBJECT_P  */
  YYSYMBOL_OF = 284,                       /* OF  */
  YYSYMBOL_OFF = 285,                      /* OFF  */
  YYSYMBOL_OFFSET = 286,                   /* OFFSET  */
  YYSYMBOL_OIDS = 287,                     /* OIDS  */
  YYSYMBOL_OLD = 288,                      /* OLD  */
  YYSYMBOL_ON = 289,                       /* ON  */
  YYSYMBOL_ONLY = 290,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 291,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 292,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 293,                  /* OPTIONS  */
  YYSYMBOL_OR = 294,                       /* OR  */
  YYSYMBOL_ORDER = 295,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 296,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 297,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 298,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 299,                  /* OUTER_P  */
  YYSYMBOL_OVER = 300,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 301,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 302,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 303,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 304,                    /* OWNED  */
  YYSYMBOL_OWNER = 305,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 306,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 307,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 308,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 309,                /* PARTITION  */
  YYSYMBOL_PASSING = 310,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 311,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 312,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 313,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 314,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 315,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 316,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 317,                  /* PLACING  */
  YYSYMBOL_PLANS = 318,                    /* PLANS  */
  YYSYMBOL_POLICY = 319,                   /* POLICY  */
  YYSYMBOL_POSITION = 320,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 321,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 322,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 323,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 324,                /* PRECISION  */
  YYSYMBOL_PREPARE = 325,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 326,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 327,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 328,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 329,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 330,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 331,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 332,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 333,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 334,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 335,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 336,                    /* QUOTE  */
  YYSYMBOL_RANGE = 337,                    /* RANGE  */
  YYSYMBOL_READ_P = 338,                   /* READ_P  */
  YYSYMBOL_REAL = 339,                     /* REAL  */
  YYSYMBOL_REASSIGN = 340,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 341,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 342,                /* RECURSIVE  */
  YYSYMBOL_REF = 343,                      /* REF  */
  YYSYMBOL_REFERENCES = 344,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 345,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 346,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 347,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 348,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 349,                  /* RELEASE  */
  YYSYMBOL_RENAME = 350,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 351,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 352,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 353,                  /* REPLICA  */
  YYSYMBOL_RESET = 354,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 355,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 356,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 357,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 358,                /* RETURNING  */
  YYSYMBOL_RETURNS = 359,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 360,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 361,                    /* RIGHT  */
  YYSYMBOL_ROLE = 362,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 363,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 364,                   /* ROLLUP  */
  YYSYMBOL_ROW = 365,                      /* ROW  */
  YYSYMBOL_ROWS = 366,                     /* ROWS  */
  YYSYMBOL_RULE = 367,                     /* RULE  */
  YYSYMBOL_SAMPLE = 368,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 369,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 370,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 371,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 372,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 373,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 374,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 375,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 376,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 377,                   /* SECRET  */
  YYSYMBOL_SECURITY = 378,                 /* SECURITY  */
  YYSYMBOL_SELECT = 379,                   /* SELECT  */
  YYSYMBOL_SEMI = 380,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 381,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 382,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 383,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 384,                   /* SERVER  */
  YYSYMBOL_SESSION = 385,                  /* SESSION  */
  YYSYMBOL_SET = 386,                      /* SET  */
  YYSYMBOL_SETOF = 387,                    /* SETOF  */
  YYSYMBOL_SETS = 388,                     /* SETS  */
  YYSYMBOL_SHARE = 389,                    /* SHARE  */
  YYSYMBOL_SHOW = 390,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 391,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 392,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 393,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 394,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 395,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 396,                     /* SOME  */
  YYSYMBOL_SQL_P = 397,                    /* SQL_P  */
  YYSYMBOL_STABLE = 398,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 399,             /* STANDALONE_P  */
  YYSYMBOL_START = 400,                    /* START  */
  YYSYMBOL_STATEMENT = 401,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 402,               /* STATISTICS  */
  YYSYMBOL_STDIN = 403,                    /* STDIN  */
  YYSYMBOL_STDOUT = 404,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 405,                  /* STORAGE  */
  YYSYMBOL_STORED = 406,                   /* STORED  */
  YYSYMBOL_STRICT_P = 407,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 408,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 409,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 410,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 411,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 412,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 413,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 414,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 415,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 416,                    /* TABLE  */
  YYSYMBOL_TABLES = 417,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 418,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 419,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 420,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 421,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 422,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 423,                   /* TEXT_P  */
  YYSYMBOL_THEN = 424,                     /* THEN  */
  YYSYMBOL_TIES = 425,                     /* TIES  */
  YYSYMBOL_TIME = 426,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 427,                /* TIMESTAMP  */
  YYSYMBOL_TO = 428,                       /* TO  */
  YYSYMBOL_TRAILING = 429,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 430,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 431,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 432,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 433,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 434,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 435,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 436,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 437,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 438,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 439,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 440,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 441,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 442,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 443,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 444,                    /* UNION  */
  YYSYMBOL_UNIQUE = 445,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 446,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 447,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 448,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 449,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 450,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 451,                   /* UPDATE  */
  YYSYMBOL_USE_P = 452,                    /* USE_P  */
  YYSYMBOL_USER = 453,                     /* USER  */
  YYSYMBOL_USING = 454,                    /* USING  */
  YYSYMBOL_VACUUM = 455,                   /* VACUUM  */
  YYSYMBOL_VALID = 456,                    /* VALID  */
  YYSYMBOL_VALIDATE = 457,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 458,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 459,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 460,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 461,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 462,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 463,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 464,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 465,                /* VERSION_P  */
  YYSYMBOL_VIEW = 466,                     /* VIEW  */
  YYSYMBOL_VIEWS = 467,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 468,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 469,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 470,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 471,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 472,                     /* WHEN  */
  YYSYMBOL_WHERE = 473,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 474,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 475,                   /* WINDOW  */
  YYSYMBOL_WITH = 476,                     /* WITH  */
  YYSYMBOL_WITHIN = 477,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 478,                  /* WITHOUT  */
  YYSYMBOL_WORK = 479,                     /* WORK  */
  YYSYMBOL_WRAPPER = 480,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 481,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 482,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 483,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 484,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 485,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 486,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 487,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 488,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 489,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 490,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 491,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 492,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 493,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 494,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 495,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 496,                    /* YES_P  */
  YYSYMBOL_ZONE = 497,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 498,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 499,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 500,                  /* WITH_LA  */
  YYSYMBOL_501_ = 501,                     /* '<'  */
  YYSYMBOL_502_ = 502,                     /* '>'  */
  YYSYMBOL_503_ = 503,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 504,                /* POSTFIXOP  */
  YYSYMBOL_505_ = 505,                     /* '+'  */
  YYSYMBOL_506_ = 506,                     /* '-'  */
  YYSYMBOL_507_ = 507,                     /* '*'  */
  YYSYMBOL_508_ = 508,                     /* '/'  */
  YYSYMBOL_509_ = 509,                     /* '%'  */
  YYSYMBOL_510_ = 510,                     /* '^'  */
  YYSYMBOL_UMINUS = 511,                   /* UMINUS  */
  YYSYMBOL_512_ = 512,                     /* '['  */
  YYSYMBOL_513_ = 513,                     /* ']'  */
  YYSYMBOL_514_ = 514,                     /* '('  */
  YYSYMBOL_515_ = 515,                     /* ')'  */
  YYSYMBOL_516_ = 516,                     /* '.'  */
  YYSYMBOL_517_ = 517,                     /* ';'  */
  YYSYMBOL_518_ = 518,                     /* ','  */
  YYSYMBOL_519_ = 519,                     /* '#'  */
  YYSYMBOL_520_ = 520,                     /* '$'  */
  YYSYMBOL_521_ = 521,                     /* '?'  */
  YYSYMBOL_522_ = 522,                     /* '{'  */
  YYSYMBOL_523_ = 523,                     /* '}'  */
  YYSYMBOL_524_ = 524,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 525,                 /* $accept  */
  YYSYMBOL_stmtblock = 526,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 527,                /* stmtmulti  */
  YYSYMBOL_stmt = 528,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 529,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 530,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 531,               /* SeqOptList  */
  YYSYMBOL_opt_with = 532,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 533,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 534,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 535,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 536,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 537,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 538, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 539,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 540, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 541, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 542,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 543,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 544, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 545,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 546,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 547,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 548,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 549,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 550,               /* DetachStmt  */
  YYSYMBOL_opt_database = 551,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 552,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 553,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 554,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 555,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 556,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 557,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 558, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 559,           /* qualified_name  */
  YYSYMBOL_ColId = 560,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 561,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 562,                   /* Sconst  */
  YYSYMBOL_indirection = 563,              /* indirection  */
  YYSYMBOL_indirection_el = 564,           /* indirection_el  */
  YYSYMBOL_attr_name = 565,                /* attr_name  */
  YYSYMBOL_ColLabel = 566,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 567,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 568,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 569,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 570,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 571, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 572,                /* opt_using  */
  YYSYMBOL_opt_as = 573,                   /* opt_as  */
  YYSYMBOL_opt_program = 574,              /* opt_program  */
  YYSYMBOL_copy_options = 575,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 576,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 577,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 578,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 579,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 580,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 581,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 582, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 583,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 584,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 585,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 586,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 587,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 588, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 589,       /* generic_option_arg  */
  YYSYMBOL_key_action = 590,               /* key_action  */
  YYSYMBOL_ColConstraint = 591,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 592,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 593,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 594,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 595,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 596,      /* generic_option_elem  */
  YYSYMBOL_key_update = 597,               /* key_update  */
  YYSYMBOL_key_actions = 598,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 599,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 600,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 601,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 602,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 603,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 604,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 605,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 606,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 607,                  /* OptWith  */
  YYSYMBOL_definition = 608,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 609,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 610,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 611,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 612,                /* columnDef  */
  YYSYMBOL_def_list = 613,                 /* def_list  */
  YYSYMBOL_index_name = 614,               /* index_name  */
  YYSYMBOL_TableElement = 615,             /* TableElement  */
  YYSYMBOL_def_elem = 616,                 /* def_elem  */
  YYSYMBOL_opt_definition = 617,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 618,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 619,               /* columnElem  */
  YYSYMBOL_opt_column_list = 620,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 621,              /* ColQualList  */
  YYSYMBOL_key_delete = 622,               /* key_delete  */
  YYSYMBOL_reloption_elem = 623,           /* reloption_elem  */
  YYSYMBOL_columnList = 624,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 625,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 626,                /* func_type  */
  YYSYMBOL_ConstraintElem = 627,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 628,         /* TableElementList  */
  YYSYMBOL_key_match = 629,                /* key_match  */
  YYSYMBOL_TableLikeClause = 630,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 631,                  /* OptTemp  */
  YYSYMBOL_generated_when = 632,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 633,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 634,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 635,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 636,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 637,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 638,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 639,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 640,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 641,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 642,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 643,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 644,              /* macro_alias  */
  YYSYMBOL_param_list = 645,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 646,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 647,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 648,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 649,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 650,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 651,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 652,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 653,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 654,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 655,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 656,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 657,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 658,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 659,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 660,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 661,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 662,             /* using_clause  */
  YYSYMBOL_DropStmt = 663,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 664,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 665,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 666,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 667,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 668, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 669,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 670, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 671,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 672,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 673,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 674,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 675,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 676,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 677,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 678,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 679,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 680, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 681,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 682,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 683,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 684,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 685,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 686,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 687,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 688,                /* IndexStmt  */
  YYSYMBOL_access_method = 689,            /* access_method  */
  YYSYMBOL_access_method_clause = 690,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 691,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 692,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 693,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 694,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 695,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 696,              /* insert_rest  */
  YYSYMBOL_insert_target = 697,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 698,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 699,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 700,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 701,       /* insert_column_item  */
  YYSYMBOL_set_clause = 702,               /* set_clause  */
  YYSYMBOL_opt_or_action = 703,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 704,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 705,               /* index_elem  */
  YYSYMBOL_returning_clause = 706,         /* returning_clause  */
  YYSYMBOL_override_kind = 707,            /* override_kind  */
  YYSYMBOL_set_target_list = 708,          /* set_target_list  */
  YYSYMBOL_opt_collate = 709,              /* opt_collate  */
  YYSYMBOL_opt_class = 710,                /* opt_class  */
  YYSYMBOL_insert_column_list = 711,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 712,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 713, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 714,             /* index_params  */
  YYSYMBOL_set_target = 715,               /* set_target  */
  YYSYMBOL_LoadStmt = 716,                 /* LoadStmt  */
  YYSYMBOL_file_name = 717,                /* file_name  */
  YYSYMBOL_repo_path = 718,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 719,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 720,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 721,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 722,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 723,               /* RenameStmt  */
  YYSYMBOL_opt_column = 724,               /* opt_column  */
  YYSYMBOL_SelectStmt = 725,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 726,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 727,         /* select_no_parens  */
  YYSYMBOL_select_clause = 728,            /* select_clause  */
  YYSYMBOL_opt_select = 729,               /* opt_select  */
  YYSYMBOL_simple_select = 730,            /* simple_select  */
  YYSYMBOL_value_or_values = 731,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 732,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 733,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 734,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 735, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 736,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 737,              /* with_clause  */
  YYSYMBOL_cte_list = 738,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 739,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 740,         /* opt_materialized  */
  YYSYMBOL_into_clause = 741,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 742,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 743,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 744,          /* all_or_distinct  */
  YYSYMBOL_by_name = 745,                  /* by_name  */
  YYSYMBOL_distinct_clause = 746,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 747,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 748,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 749,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 750,              /* sort_clause  */
  YYSYMBOL_sortby_list = 751,              /* sortby_list  */
  YYSYMBOL_sortby = 752,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 753,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 754,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 755,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 756,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 757,             /* limit_clause  */
  YYSYMBOL_offset_clause = 758,            /* offset_clause  */
  YYSYMBOL_sample_count = 759,             /* sample_count  */
  YYSYMBOL_sample_clause = 760,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 761,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 762,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 763,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 764,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 765,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 766,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 767,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 768, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 769,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 770,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 771,            /* first_or_next  */
  YYSYMBOL_group_clause = 772,             /* group_clause  */
  YYSYMBOL_group_by_list = 773,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 774,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 775,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 776,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 777,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 778,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 779,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 780,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 781,            /* having_clause  */
  YYSYMBOL_qualify_clause = 782,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 783,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 784,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 785,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 786,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 787,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 788,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 789,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 790,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 791,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 792,              /* from_clause  */
  YYSYMBOL_from_list = 793,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 794,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 795,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 796,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 797,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 798,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 799,             /* pivot_header  */
  YYSYMBOL_pivot_value = 800,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 801,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 802,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 803,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 804,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 805,             /* joined_table  */
  YYSYMBOL_alias_clause = 806,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 807,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 808,        /* func_alias_clause  */
  YYSYMBOL_join_type = 809,                /* join_type  */
  YYSYMBOL_join_outer = 810,               /* join_outer  */
  YYSYMBOL_join_qual = 811,                /* join_qual  */
  YYSYMBOL_relation_expr = 812,            /* relation_expr  */
  YYSYMBOL_func_table = 813,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 814,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 815,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 816,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 817,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 818,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 819,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 820,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 821,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 822,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 823,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 824,             /* opt_Typename  */
  YYSYMBOL_Typename = 825,                 /* Typename  */
  YYSYMBOL_qualified_typename = 826,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 827,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 828,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 829,            /* ConstTypename  */
  YYSYMBOL_GenericType = 830,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 831,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 832,                  /* Numeric  */
  YYSYMBOL_opt_float = 833,                /* opt_float  */
  YYSYMBOL_Bit = 834,                      /* Bit  */
  YYSYMBOL_ConstBit = 835,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 836,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 837,         /* BitWithoutLength  */
  YYSYMBOL_Character = 838,                /* Character  */
  YYSYMBOL_ConstCharacter = 839,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 840,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 841,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 842,                /* character  */
  YYSYMBOL_opt_varying = 843,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 844,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 845,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 846,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 847,             /* year_keyword  */
  YYSYMBOL_month_keyword = 848,            /* month_keyword  */
  YYSYMBOL_day_keyword = 849,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 850,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 851,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 852,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 853,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 854,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 855,             /* week_keyword  */
  YYSYMBOL_decade_keyword = 856,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 857,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 858,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 859,             /* opt_interval  */
  YYSYMBOL_a_expr = 860,                   /* a_expr  */
  YYSYMBOL_b_expr = 861,                   /* b_expr  */
  YYSYMBOL_c_expr = 862,                   /* c_expr  */
  YYSYMBOL_d_expr = 863,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 864,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 865,              /* struct_expr  */
  YYSYMBOL_func_application = 866,         /* func_application  */
  YYSYMBOL_func_expr = 867,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 868,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 869, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 870,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 871,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 872,            /* filter_clause  */
  YYSYMBOL_export_clause = 873,            /* export_clause  */
  YYSYMBOL_window_clause = 874,            /* window_clause  */
  YYSYMBOL_window_definition_list = 875,   /* window_definition_list  */
  YYSYMBOL_window_definition = 876,        /* window_definition  */
  YYSYMBOL_over_clause = 877,              /* over_clause  */
  YYSYMBOL_window_specification = 878,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 879, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 880,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 881,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 882,             /* frame_extent  */
  YYSYMBOL_frame_bound = 883,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 884, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 885,            /* qualified_row  */
  YYSYMBOL_row = 886,                      /* row  */
  YYSYMBOL_dict_arg = 887,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 888,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 889, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 890,                  /* map_arg  */
  YYSYMBOL_map_arguments = 891,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 892,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 893, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 894,                 /* sub_type  */
  YYSYMBOL_all_Op = 895,                   /* all_Op  */
  YYSYMBOL_MathOp = 896,                   /* MathOp  */
  YYSYMBOL_qual_Op = 897,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 898,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 899,              /* subquery_Op  */
  YYSYMBOL_any_operator = 900,             /* any_operator  */
  YYSYMBOL_c_expr_list = 901,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 902,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 903,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 904,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 905,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 906,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 907,            /* func_arg_expr  */
  YYSYMBOL_type_list = 908,                /* type_list  */
  YYSYMBOL_extract_list = 909,             /* extract_list  */
  YYSYMBOL_extract_arg = 910,              /* extract_arg  */
  YYSYMBOL_overlay_list = 911,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 912,          /* overlay_placing  */
  YYSYMBOL_position_list = 913,            /* position_list  */
  YYSYMBOL_substr_list = 914,              /* substr_list  */
  YYSYMBOL_substr_from = 915,              /* substr_from  */
  YYSYMBOL_substr_for = 916,               /* substr_for  */
  YYSYMBOL_trim_list = 917,                /* trim_list  */
  YYSYMBOL_in_expr = 918,                  /* in_expr  */
  YYSYMBOL_case_expr = 919,                /* case_expr  */
  YYSYMBOL_when_clause_list = 920,         /* when_clause_list  */
  YYSYMBOL_when_clause = 921,              /* when_clause  */
  YYSYMBOL_case_default = 922,             /* case_default  */
  YYSYMBOL_case_arg = 923,                 /* case_arg  */
  YYSYMBOL_columnref = 924,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 925,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 926,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 927,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 928,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 929, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 930,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 931, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 932,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 933,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 934,                /* target_el  */
  YYSYMBOL_except_list = 935,              /* except_list  */
  YYSYMBOL_opt_except_list = 936,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 937,          /* replace_list_el  */
  YYSYMBOL_replace_list = 938,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 939,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 940,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 941,      /* qualified_name_list  */
  YYSYMBOL_name_list = 942,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 943,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 944, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 945,                     /* name  */
  YYSYMBOL_func_name = 946,                /* func_name  */
  YYSYMBOL_AexprConst = 947,               /* AexprConst  */
  YYSYMBOL_Iconst = 948,                   /* Iconst  */
  YYSYMBOL_type_function_name = 949,       /* type_function_name  */
  YYSYMBOL_function_name_token = 950,      /* function_name_token  */
  YYSYMBOL_type_name_token = 951,          /* type_name_token  */
  YYSYMBOL_any_name = 952,                 /* any_name  */
  YYSYMBOL_attrs = 953,                    /* attrs  */
  YYSYMBOL_opt_name_list = 954,            /* opt_name_list  */
  YYSYMBOL_param_name = 955,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 956,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 957,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 958,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 959,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 960,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 961,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 962,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 963,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 964,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 965,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 966,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 967,            /* generic_reset  */
  YYSYMBOL_reset_rest = 968,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 969,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 970,                 /* set_rest  */
  YYSYMBOL_generic_set = 971,              /* generic_set  */
  YYSYMBOL_var_value = 972,                /* var_value  */
  YYSYMBOL_zone_value = 973,               /* zone_value  */
  YYSYMBOL_var_list = 974,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 975,         /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 976,         /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 977,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 978,               /* opt_tables  */
  YYSYMBOL_var_name = 979,                 /* var_name  */
  YYSYMBOL_table_id = 980,                 /* table_id  */
  YYSYMBOL_ViewStmt = 981,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 982          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  867
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   72372

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  525
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  458
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2122
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3534

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   757


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   519,   520,   509,     2,     2,
     514,   515,   507,   505,   518,   506,   516,   508,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   524,   517,
     501,   503,   502,   521,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   512,     2,   513,   510,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   522,     2,   523,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   504,   511
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   500,   500,   516,   528,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   578,     9,    18,    27,    36,
      45,    54,    63,    72,    85,    87,    93,    94,    99,   103,
     107,   118,   126,   130,   139,   148,   157,   166,   175,   184,
     192,   200,   209,   218,   227,   236,   253,   262,   271,   280,
     290,   303,   318,   327,   335,   350,   358,   368,   378,   385,
     392,   400,   407,   418,   419,   424,   428,   433,   438,   446,
     447,   452,   456,   457,   458,     7,    13,    19,    25,     9,
      13,    44,    45,    46,    50,    51,    55,    59,    60,    64,
      70,    75,    76,    77,    78,     6,    15,    25,    35,    45,
      55,    65,    75,    85,    95,   106,   117,   127,   140,   141,
       9,    23,    29,    36,    42,    49,    59,    63,    71,    72,
      73,    77,    86,    95,   102,   103,   108,   120,   125,   150,
     155,   160,   166,   176,   186,   192,   203,   214,   229,   230,
     236,   237,   242,   243,   249,   250,   254,   255,   260,   262,
     268,   269,   273,   274,   277,   278,   283,     7,    16,    25,
      46,    47,    50,    54,     7,    14,    22,     9,    19,    29,
      42,    43,     7,    17,    27,    40,    41,    45,    46,    47,
      51,    52,     7,    14,    31,    51,    55,    65,    69,    75,
      76,     9,    17,    29,    30,    34,    35,    36,    41,    42,
      43,    48,    52,    56,    60,    64,    68,    72,    76,    80,
      84,    88,    92,    97,   101,   105,   112,   113,   117,   118,
     119,     7,    16,    28,    29,     2,     9,    15,    21,    28,
      35,    45,    46,    47,     2,     7,    21,    36,    56,    57,
      84,    85,    86,    87,    88,    89,    93,    94,    99,   104,
     105,   106,   107,   108,   113,   120,   121,   122,   139,   146,
     153,   163,   173,   185,   193,   202,   220,   221,   225,   226,
     230,   239,   262,   276,   283,   288,   290,   292,   294,   297,
     300,   301,   302,   303,   308,   312,   313,   318,   325,   330,
     331,   332,   333,   334,   335,   336,   337,   343,   344,   348,
     353,   360,   367,   374,   386,   387,   388,   389,   393,   398,
     399,   400,   405,   410,   411,   412,   413,   414,   415,   420,
     440,   469,   470,   474,   478,   479,   480,   484,   488,   496,
     497,   502,   503,   504,   508,   516,   517,   522,   523,   527,
     532,   536,   540,   545,   553,   554,   558,   559,   563,   564,
     570,   581,   594,   608,   622,   636,   650,   673,   677,   684,
     688,   696,   701,   708,   718,   719,   720,   721,   722,   729,
     736,   737,   742,   743,     9,    19,    29,    39,    49,    59,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    95,    96,
      97,    98,    99,   100,   105,   106,   111,   112,   113,   118,
     119,   120,     8,    20,    33,    46,    58,    70,    86,    87,
      91,    95,     7,     1,    30,    49,    61,    62,    63,    67,
      68,    73,    77,    82,    86,    94,    95,    99,   100,   105,
     106,   110,   111,   116,   117,   118,   119,   120,   121,   126,
     134,   138,   143,   144,   149,   153,   158,   162,   166,   170,
     174,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   226,   231,   232,   233,   234,   235,   241,   245,
      47,    48,    52,    53,    54,    72,    73,    80,    88,    96,
     104,   112,   120,   131,   132,   159,   164,   172,   188,   205,
     222,   239,   240,   259,   263,   267,   271,   275,   284,   294,
     303,   312,   322,   332,   343,   357,   374,   374,   378,   378,
     382,   382,   386,   392,   399,   403,   404,   408,   409,   423,
     430,   437,   447,   448,   451,   464,   465,   466,   470,   481,
     489,   494,   499,   504,   509,   517,   525,   530,   535,   542,
     543,   547,   548,   549,   553,   560,   561,   565,   566,   570,
     571,   572,   576,   577,   581,   582,   598,   599,   602,   611,
     622,   623,   624,   627,   628,   629,   633,   634,   635,   636,
     640,   641,   645,   647,   663,   665,   670,   673,   681,   685,
     689,   693,   697,   701,   708,   713,   720,   721,   725,   730,
     734,   738,   746,   753,   754,   759,   760,   764,   765,   770,
     772,   774,   779,   799,   800,   802,   807,   808,   812,   813,
     816,   817,   842,   843,   848,   852,   853,   857,   858,   862,
     863,   864,   865,   866,   870,   883,   890,   897,   904,   905,
     909,   910,   914,   915,   919,   920,   924,   925,   929,   930,
     934,   945,   946,   947,   948,   952,   953,   958,   959,   960,
     969,   975,   984,   985,   998,   999,  1003,  1004,  1008,  1009,
    1015,  1021,  1029,  1038,  1046,  1055,  1064,  1068,  1073,  1083,
    1096,  1097,  1100,  1101,  1102,  1105,  1113,  1123,  1124,  1127,
    1135,  1144,  1148,  1155,  1156,  1160,  1169,  1173,  1198,  1202,
    1215,  1229,  1244,  1256,  1269,  1283,  1297,  1310,  1325,  1344,
    1350,  1355,  1361,  1368,  1369,  1377,  1381,  1385,  1391,  1398,
    1403,  1404,  1405,  1406,  1407,  1408,  1412,  1413,  1425,  1426,
    1431,  1438,  1445,  1452,  1484,  1495,  1508,  1513,  1514,  1517,
    1518,  1521,  1522,  1527,  1528,  1533,  1537,  1543,  1564,  1572,
    1585,  1588,  1592,  1592,  1595,  1596,  1598,  1603,  1610,  1615,
    1621,  1626,  1632,  1636,  1643,  1650,  1660,  1661,  1665,  1667,
    1670,  1674,  1675,  1676,  1677,  1678,  1679,  1684,  1704,  1705,
    1706,  1707,  1718,  1732,  1733,  1739,  1744,  1749,  1754,  1759,
    1764,  1769,  1774,  1780,  1786,  1792,  1799,  1821,  1830,  1834,
    1842,  1846,  1854,  1866,  1887,  1891,  1897,  1901,  1914,  1922,
    1932,  1934,  1936,  1938,  1940,  1942,  1947,  1948,  1955,  1964,
    1972,  1981,  1992,  2000,  2001,  2002,  2006,  2006,  2009,  2009,
    2012,  2012,  2015,  2015,  2018,  2018,  2021,  2021,  2024,  2024,
    2027,  2027,  2030,  2030,  2033,  2033,  2036,  2036,  2039,  2039,
    2042,  2044,  2046,  2048,  2050,  2052,  2054,  2056,  2058,  2060,
    2062,  2064,  2066,  2071,  2076,  2082,  2089,  2094,  2100,  2106,
    2137,  2139,  2141,  2149,  2164,  2166,  2168,  2170,  2172,  2174,
    2176,  2178,  2180,  2182,  2184,  2186,  2188,  2190,  2192,  2194,
    2197,  2199,  2201,  2204,  2206,  2208,  2210,  2212,  2217,  2222,
    2229,  2234,  2241,  2246,  2253,  2258,  2266,  2274,  2282,  2290,
    2308,  2316,  2324,  2332,  2340,  2348,  2356,  2360,  2376,  2384,
    2392,  2400,  2408,  2416,  2424,  2428,  2432,  2436,  2440,  2448,
    2456,  2464,  2472,  2492,  2514,  2525,  2532,  2546,  2554,  2562,
    2582,  2584,  2586,  2588,  2590,  2592,  2594,  2596,  2598,  2600,
    2602,  2604,  2606,  2608,  2610,  2612,  2614,  2616,  2618,  2620,
    2622,  2624,  2628,  2632,  2636,  2650,  2651,  2655,  2669,  2670,
    2671,  2678,  2682,  2686,  2689,  2700,  2705,  2707,  2718,  2742,
    2753,  2764,  2768,  2775,  2779,  2783,  2800,  2808,  2817,  2821,
    2828,  2836,  2844,  2855,  2875,  2911,  2922,  2923,  2930,  2936,
    2938,  2940,  2944,  2953,  2958,  2965,  2980,  2987,  2991,  2995,
    2999,  3003,  3013,  3022,  3044,  3045,  3049,  3050,  3051,  3055,
    3056,  3063,  3064,  3068,  3069,  3074,  3082,  3084,  3098,  3101,
    3128,  3129,  3132,  3133,  3141,  3149,  3157,  3166,  3176,  3194,
    3240,  3249,  3258,  3267,  3276,  3288,  3289,  3290,  3291,  3292,
    3306,  3307,  3310,  3311,  3315,  3325,  3326,  3330,  3331,  3335,
    3342,  3343,  3348,  3349,  3354,  3355,  3358,  3359,  3360,  3363,
    3364,  3367,  3368,  3369,  3370,  3371,  3372,  3373,  3374,  3375,
    3376,  3377,  3378,  3379,  3380,  3383,  3385,  3390,  3392,  3397,
    3399,  3401,  3403,  3405,  3407,  3409,  3411,  3425,  3427,  3432,
    3436,  3443,  3448,  3454,  3458,  3465,  3470,  3477,  3482,  3490,
    3494,  3500,  3504,  3513,  3524,  3525,  3529,  3533,  3540,  3541,
    3542,  3543,  3544,  3545,  3546,  3547,  3548,  3549,  3550,  3551,
    3552,  3553,  3563,  3567,  3574,  3581,  3582,  3598,  3602,  3607,
    3611,  3626,  3631,  3635,  3638,  3641,  3642,  3643,  3646,  3653,
    3663,  3677,  3678,  3682,  3693,  3694,  3697,  3698,  3701,  3705,
    3712,  3720,  3728,  3736,  3746,  3747,  3752,  3753,  3757,  3758,
    3759,  3763,  3772,  3780,  3788,  3797,  3812,  3813,  3818,  3819,
    3829,  3830,  3834,  3835,  3839,  3840,  3843,  3859,  3867,  3877,
    3878,  3881,  3882,  3885,  3889,  3890,  3894,  3895,  3898,  3899,
    3900,  3910,  3911,  3915,  3917,  3923,  3924,  3928,  3929,  3932,
    3943,  3946,  3957,  3961,  3965,  3977,  3981,  3990,  3997,  4035,
    4039,  4043,  4047,  4051,  4055,  4059,  4065,  4082,  4083,  4084,
    4087,  4088,  4089,  4092,  4093,  4094,  4097,  4098,  4101,  4103,
    4108,  4109,  4112,  4116,  4117,     7,    18,    19,    23,    24,
      25,    26,    27,     7,    26,    50,    73,    80,    85,    86,
      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,
      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
      52,     5,    12,    22,    23,     7,    15,    26,    27,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,     7,    19,    33,
       9,    16,    26,    33,    44,    45,    50,    51,    52,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    90,
      91,    92,    97,    98,   103,   107,   115,   116,   121,   122,
     123,   129,   134,   142,   143,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    89,    95,    99,   103,   118,
     125,   126,   127,   131,   132,     7,    15,    22,    29,    36,
      45,    46,    48,    49,     8,    22,    36,    48,    56,    70,
      71,    72,    73,    74,    87,    88,    93,    94,    98,    99,
       7,    18,    31,    35,    42,    53,    54,    60,    61,     9,
      19,     7,    16,    28,    35,    42,    51,    52,    56,    57,
       2,     7,    12,    17,    26,    33,    43,    44,    51,     3,
      10,    17,    24,    31,    38,    45,    52,    61,    61,    63,
      63,    65,    65,    67,    68,    72,    73,     6,     8,    21,
      34,    47,    65,    87,    88,    89,    90,    11,    24,    37,
      54,    55,    56,    61,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P",
  "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
  "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
  "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER",
  "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PERSISTENT",
  "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY",
  "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'",
  "'}'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "DropSecretStmt", "opt_storage_drop_specifier", "ExecuteStmt",
  "execute_param_expr", "execute_param_list", "execute_param_clause",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "decade_keyword", "century_keyword", "millennium_keyword",
  "opt_interval", "a_expr", "b_expr", "c_expr", "d_expr",
  "indirection_expr", "struct_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "describe_or_desc", "show_or_describe",
  "opt_tables", "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3077)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2048)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
     143,   -37,   890, -3077, -3077,   321,   -37, 49669, 64504,   302,
     -37,   170,  2983, 51649, -3077, -3077, 46204,  3851,   -37, 54619,
   71840,   317,   270, 31982,   520, 55114, 55114, -3077, -3077, -3077,
   64504, 54619, 55609,   -37,   387, 64999, -3077,   -37, 34457, 52144,
     -28, -3077, 54619,    80,   173, 56104, 54619,  4055,   817,   262,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077,   371, -3077, -3077, -3077, -3077,   120,
   -3077, -3077, -3077, -3077, -3077,   146, -3077,   307,   150, 31982,
   31982,  1031,   326, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, 33962, -3077, -3077, -3077, -3077, 56599, 54619, 57094,
   52639, 57589, -3077,   579,   866, -3077,   169, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,   180, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,   181,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077,   196, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077,   633,   205, -3077, -3077,
   -3077,   364, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
    3613, -3077, -3077,   808,  3749, 54619,   885,   998,   631, -3077,
   58084, -3077,   578, 54619, -3077, -3077,  1557,   667,   858, -3077,
   -3077, 53134, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, 46699, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077,   823, -3077, -3077,
     666, -3077,   177, -3077, -3077,   675,   687, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077,   748, -3077, -3077, -3077,
     809, 65494, 58579, 59074, -3077,   628,  3025,  2543, 71858, 30990,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077,   371, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, 55114, 64504, 55114,   681,   702,  1062,   727, 32477,
     735, 34953,   747,   751,  1099,   769,   778,   829,   836,   173,
   31486,   812,   633, -3077, 59569, 59569,   -29,  3737, -3077, 59569,
   60064, -3077,   831, -3077,   866, -3077, -3077, -3077,  1183, -3077,
     -83,   856, -3077, 60559, 60559, 60559,   861,  1157, -3077, -3077,
   -3077,   870, -3077, -3077,  1101, 20729, 20729, 65989, 65989,   866,
   65989,   909, -3077, -3077,    74, -3077, -3077, -3077,  1031,   897,
     633, -3077, -3077, 52144, -3077, -3077,   214,  1270, 20729, 54619,
     946, -3077,   965,   946,   973,   984,  1012, -3077,   143, -3077,
   54619,  1333,  1229, 52144,   695,   695,  1494,   695,   904,   941,
    4584,  3006, -3077,  1970, -3077,  1053,  1168,  1149,  1336, -3077,
     897,  1498,   805,  1320,  1529,  5604,  1532,  1366,  1536,  1369,
    1546,  1668, 20729, 47194,   633, -3077, 11908, -3077, 20729, -3077,
   -3077, -3077, -3077,  1289,  1249, -3077, -3077, -3077, -3077,  1343,
   -3077, -3077, 54619, 64504,  1214,  1234, -3077, -3077, -3077, -3077,
    1061,  1476, -3077,  1716, -3077, -3077,  1295, 61054, 61549, 62044,
   62539, 66484,  1676, -3077, -3077,  1617, -3077, -3077, -3077,  1294,
   -3077, -3077, -3077,   175, 66979,  1633,  1272,    95, -3077,  1638,
     133, -3077,  1640,  1530, 15529, -3077,  1466, -3077, -3077, -3077,
     173, -3077, -3077, -3077,   407, -3077, -3077, 43148, 71858,  1392,
    1314, -3077,  1658, 20729, 20729,  1318,  3232, 59569, 60064, 20729,
   54619, -3077, 20729, 25409,  1319, 20729, 20729, 12929, 20729, 30000,
   59569,  3737,  1316, -3077,   682, 54619,  1321, -3077,  1416,  1416,
     387, 31982,  1622, -3077,  1338,  1623,  1540, -3077, 31982,  1540,
    1341,  1330,  1624,  1540, -3077,   246,  1628,  1416, 35448,  1339,
   -3077,  1416,  1562, -3077, -3077, 55114, 20729, 15529, 69454,  1819,
   -3077, -3077, -3077, -3077,  1625, 64504,  1347, -3077, -3077, -3077,
   -3077, -3077, -3077,   921,  1857,   184,  1858, 20729,   184,   184,
    1352,   223,   223, -3077,  1543,  1357, -3077,   225,  1360,  1361,
    1874,  1878,   178,   136,  1057,   184, 20729, -3077,   223,  1368,
    1879,  1372,  1882,   186,   203, -3077,   226, 20729, 20729, 20729,
    1740, 20729, 10868,  1884, 47194, -3077, 54619,   669, -3077,   633,
    1382,   866, -3077, -3077, -3077, -3077, -3077, -3077, -3077,  1386,
   -3077,   194,  6712, -3077, -3077, -3077, -3077,  1432, -3077, -3077,
   -3077, -3077,  1609, 20729, -3077, -3077,  1404,  1622, -3077,   229,
   -3077, -3077,  1622, -3077, -3077, -3077, -3077, -3077,   263,  1821,
   20729, 20729, 64504,   633, -3077, 67474, -3077, -3077, -3077, -3077,
   -3077, -3077,   481, -3077,   371, 44836,  1405,  1413,   946, 54619,
   54619,  1891, -3077, -3077, -3077, -3077,   965, 52144,   147,  1717,
    1547, -3077, -3077,  1031,  1031, 16049,   589,   603,   780, 16569,
   21249,  1769,  1656,   706,   224,  1775, -3077,  1661,  1885, 25409,
   20729, 20729,   904,   941, 20729, -3077, -3077, -3077,  1712, 54619,
   50164,   730,   844,  1434,  1522,  1437,   325,  1859, -3077,  1435,
   -3077,  1526, 54619, 71389,   249, -3077,  1896,   249,   249,   289,
    1897,  1535,   286,  1692,   251,   -60,  1620, -3077,  1435, 52144,
     129,   580,  1435, 54619,  1542,   656,  1435,  1852, 64504,  1314,
   41008,  1447, -3077, -3077, -3077,   166, 15529, -3077,   999,  1222,
    1263,   435,   207,  1285,  1584, 15529,  1606,  1615,   168,  1643,
    1655,  1660,  1662,  1665,  1673,  1678,  1680,   140,  1683,  1687,
    1690,  1697,  1700,  1711, -3077,  1714,   179,  1718,   210, 15529,
    1722, -3077,   192, -3077, 44836,   115, -3077, -3077,  1725, 44925,
   -3077, -3077,   189,  1753,  1549,  1550, 64504,  1504, 54619,  1776,
    1605,  1832,  1888, 69934, 54619,  1715,  1620,  1719,  1477,  1950,
    1721,  1234,  1723,  1478,  1724, -3077,  1798, -3077, 67969, 47194,
   -3077, -3077, -3077, -3077, -3077,  1847,  1834, 64504, 47194,  1490,
   -3077, -3077, 64504, -3077, 54619, 54619, -3077, 54619, 64504, -3077,
     524, 44836,  1995,   657, 71858, 48679, -3077, -3077, -3077, -3077,
    1005,  1110, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077,   866, 47194, -3077,  3991, 55114, 43766,  1496, 20729, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077,  1497,  1842, -3077,
   -3077,  6178,  1499, 43806,  1500, 25409, 25409,   633,  2433, -3077,
   -3077, 25409,  1501, 49174, 43679,  1507,  1511, 44154, 17089, 20729,
   17089, 17089, 44241, -3077,  1514, 44318, 59569,  1508, 54619, 53629,
   -3077, -3077, -3077, 20729, 20729,  3737, 54124,  1560, -3077, 31982,
   -3077,  1810, 31982, -3077, -3077,  4437, -3077, 31982,  1811, 20729,
   31982, -3077,  1758,  1759,  1527, 31982, -3077, 54619,  1528, 54619,
   -3077, -3077, -3077, -3077, -3077, 44836, -3077,  1538,   722,  1531,
   -3077, -3077, -3077, -3077, -3077,  1581, -3077,  1581,  1581, -3077,
   -3077, -3077, -3077,  1545,  1545,  1553, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,  1554,
    1057, -3077,  1581, -3077,  1545, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, 71389, -3077, -3077, -3077, -3077,   661,   701, -3077,
    1555, -3077, -3077, -3077, -3077,  1556, -3077,  1534,  2006, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,  6246,   785,
    1545,  2379, -3077, -3077, 20729, 20729, -3077, -3077,  1559, 44836,
    1589, -3077, -3077, 20729, 20729, -3077, -3077, -3077, -3077,  2055,
   -3077, 20729,  1581,  1581, -3077,  8715, -3077, 39905, 17609,  1645,
    1649,  2055, -3077,  2055, -3077,  8715,  2065,  2065, 37923, -3077,
    1730, 44405, -3077,  1564,  2304,  7248,  1567, -3077, -3077,  1566,
   -3077,  1573,  1570, 41663,   158,   633,   633, 20729, -3077,  2055,
   20729,  5909,  5909, -3077,   306, 69454, 20729, 20729, 20729, 20729,
   20729, 20729, 20729, 20729, 45709,  1672,   162, 64504, 20729, 20729,
    1586,   878, -3077, 20729,  1822, -3077,  1590, 20729,  1675,   248,
   20729, 20729, 20729, 20729, 20729, 20729, 20729, 20729, 20729, -3077,
   -3077, 27990,   316,   717,  1927,  1951,   121,  1085, 20729,  1941,
   11908, -3077,  1941, -3077, -3077, -3077, -3077, -3077,   230, -3077,
   -3077,  1538,  1538, -3077, 64504, -3077, 54619,   214, 51154, 20729,
   -3077, -3077,  1598,  1608,   160, -3077,  1679, -3077, -3077, 54619,
   38418,  1912, -3077,   372,  1612, -3077, 43640,  1870,  1912,  1031,
   -3077, -3077, 26449,  1749,  1913,  1850, -3077, -3077,  1833,  1838,
   -3077,  1626, 45058, 21769, 21769, -3077,  1375, 44836,  1378, -3077,
   -3077, -3077, -3077, -3077, -3077,   164, -3077, 54619,   165, 35943,
   -3077,  1634,   109, -3077,  3113,  1966,  1932,  1769,   224,  1641,
   -3077,  1441,  1639, 68464, 54619,  1929,  1887,  1933,   304, 69454,
   -3077, -3077, -3077, -3077, 54619, 64504, 63034, 68959, 47689, 54619,
   47194, -3077, -3077, -3077, -3077, 54619,  1575, 54619,  6535, -3077,
   -3077, -3077, -3077,   249, -3077, -3077, -3077, -3077, -3077, 64504,
   54619, -3077, -3077,   249, 64504, 54619,   249, -3077,  1444, 54619,
   54619, 54619, 54619,  1486, 54619, 54619,   866, -3077, -3077, -3077,
   22289,   232,   232,  1869, 13449,   182, -3077, 20729, 20729,   995,
   -3077, -3077, -3077, -3077,   294, 64504,  1837, -3077, -3077,   800,
    1886,   114, -3077,  1699, 54619, 54619, 54619, 54619, 64504, 54619,
    1582, -3077, -3077, -3077, -3077, -3077,  1652, -3077,  1657,  2022,
    1620, -3077,  2023, 50659,  1008,  3585,  2024,  1701,  2027, 13969,
    2140,  2029,  2179,  1669,  1915, -3077, -3077,  1901, -3077, 64504,
    2188, -3077,    95, -3077, 47194, -3077,   133, -3077,  1904,   243,
   -3077, 15529, 20729, -3077, -3077, -3077, -3077, -3077, -3077,  1314,
   28496, -3077,   811, -3077, -3077,  2154,   866,  2154,   728, -3077,
   -3077,  2154, -3077,  2137,  2154, -3077, -3077, 69454, -3077,  7350,
   -3077, 20729, 20729, -3077, 20729,  2026, -3077,  2187,  2187, 69454,
   25409, 25409, 25409, 25409, 25409, 25409,   343,  1368, 25409, 25409,
   25409, 25409, 25409, 25409, 25409, 25409, 25409, 26969,   779, -3077,
   -3077,   826,  2159, 20729, 20729,  2034,  2026, 20729, -3077, 69454,
    1689, -3077,  1691,  1693, 20729, -3077, 69454, -3077, 54619,  1695,
       5,    36, -3077,  1688,  1702, -3077,  1622, -3077,  1097,  1164,
   54619,  3374,  3593,  4699, -3077, -3077, 20729,  2025,  4437, 31982,
   -3077, 20729,  1703, -3077, -3077, 31982,  2045, -3077, -3077, -3077,
   36438,  4437, 69454,   833, -3077, 54619, 69454,   834, 20729, -3077,
   15529,  2210, 69454,  2175, 64504, 64504,  2212,  1706,  1708,  2055,
    1797, -3077,  1799,  1800,  1801, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, 69454, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077,  1720,  1713, 20729, 20729,   117, -3077,  7589,  1726,
    1735,  6101, -3077,  1727, -3077,  1710, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077,  1736, -3077,  1738, -3077,  1739,  1754,  1760,
    1743,  1744, 54619, -3077, 22809, -3077, 64504, -3077, -3077, 20729,
   20729, 54619, -3077,  1740, -3077,  1748,  1751,  7945, -3077, -3077,
   -3077,   277,   750,  7397,  1085,  2228,  2228,  2228,  8715, -3077,
   -3077, -3077,  1767, -3077, 25409, 25409, -3077,  5562,  2610, 10868,
   -3077, -3077,  2066, -3077,  1208, -3077,  1757, -3077, -3077,  4110,
   -3077, 39905, 45129, 20729,   174, -3077, 20729,  1586, 20729,  1839,
    2228,  2228,  2228,   292,   292,   277,   277,   277,   750,  1085,
   -3077, -3077, -3077,  1762, 20729, 47194, -3077,  1763,  1764,  2113,
    1372, 20729, -3077, -3077, 31982,  1560,   115,  1560,  2055,  5909,
   -3077,   965, -3077, -3077,   965, 44836, 54619, -3077, -3077,  2030,
    1766, 31982,  1809,  2232,  2214, 64504, -3077, -3077,  1765,  1941,
    1781, -3077, -3077,  1786, 20729,  1835,  1786, -3077,  1912,     1,
    1996,  1139,  1139,  1375,  1998, -3077, -3077,  1841, -3077, -3077,
   -3077, 20729, 14489,  1381, -3077,  1398, -3077, -3077, -3077, -3077,
   -3077,  1782, -3077,  2063, -3077, 54619, -3077, -3077, 25409,  2240,
   20729, 36933,  2242,  2042, -3077, -3077, -3077,  1881,  1435, 20729,
    2036, -3077,   159,  1804,  2160,   359,  2112, 64504, -3077,   281,
     613, -3077,   971,  2167,   243,  2168,   243, 47194, 47194, 47194,
     848, -3077, -3077, -3077,   866, -3077,   -95,   854, -3077, -3077,
   -3077, -3077,  1894,   662,  1620,  1435, -3077, -3077, -3077, -3077,
   -3077, -3077, -3077,   144,   663,  1435,  1895, -3077,  1898, -3077,
    1899,   689,  1435, -3077, -3077,  1668,  9304, 44836,   554,   182,
     182,   182, 15529, -3077,  2044,  2047,  1815, 44836, 44836,   142,
   -3077, -3077, -3077, -3077,  1818, -3077,   157, -3077, 64504, -3077,
   -3077, -3077,  1837,  1888, 54619,  1620,  1825,  2293,  1234,  1478,
    1798, -3077,  1994,   734,  1273, -3077, 64504, 54619, 54619, 54619,
   63529, -3077, -3077, -3077,  1836,  1831, -3077,    11,  2068,  2064,
   54619,  1876, 54619,  1437,  2316, 54619, -3077,   864, 18129, 64504,
   -3077, 47194,  2205, 54619,  1834, -3077, -3077, -3077, -3077, 64504,
   -3077, -3077, 44836, -3077, -3077, 48184, -3077, -3077, -3077, -3077,
   -3077, 47194, -3077,   866, -3077,   866,  2079, 64504, 42158,   866,
   42653,   866,  1844, -3077, 44836,  8244, 44836,  2034, -3077,   228,
    2187,   515,   515,   515,  2519,  2189,   257,  1848,   515,   515,
     515,   355,   355,   228,   228,   228,  2187,   779,   831, 49174,
    1849, -3077, 44836, 44836, -3077, -3077,  1846, -3077, -3077, -3077,
   -3077,  1851,  1853, -3077, -3077, -3077, -3077, -3077, -3077, 64504,
    1142,  1560,   -28,   -28,   -28,   -28, -3077, 54619, 54619, 54619,
   44836,  2306,  2182, -3077,  4437, 44836, 54619, -3077, 29501, 54619,
   -3077,  2203, -3077,  2291, -3077, 54619,   869, -3077, -3077, -3077,
     873,  1861,  1708, 69454,   910,   914, -3077,  2055,   191,  1862,
    1505,   659,   905,  1396, -3077, -3077, -3077,  1864, 44540, 20729,
   -3077,  2233, -3077, -3077, -3077, 20729, 20729, -3077, 39905, -3077,
   -3077, -3077, -3077,   454,   454,  1866, 10868, 44762, -3077,  2184,
    8312, 44836, -3077,  1730, -3077, -3077,  5909, 20729,  1788,  3148,
   20729,  1868, 20729,  2215, -3077, -3077,  1871, -3077, -3077, 69454,
   20729,  1872,  4181, 25409, 25409,  4991, -3077,  5175, 20729, 10868,
   -3077, 41047,  1867,  1880,  1869, 18649, -3077,  2090,  1883, -3077,
    2025,   182,  2025,  1890, -3077, -3077, -3077, -3077,  2379, -3077,
   20729,  2037, 64504,   506,  2665,   948, -3077,   633, 38418,  1809,
   20729,   620, -3077, -3077,  1892, -3077,  1786, -3077, -3077, -3077,
    2106, -3077, -3077, -3077, 54619, -3077,  1893, -3077, 35943,  2217,
   11388, -3077, 35943, 54619, 54619,  8562,  2247, -3077, 64504, 64504,
   64504, -3077, 64504,  1900,  1902,   244,  1905,   575, -3077,  2798,
     244,  2234,   280,  1437,   286,  3799,    47, -3077, -3077, -3077,
    1963, 54619, -3077, 64504, -3077, -3077, -3077, -3077, -3077, 47689,
   -3077, -3077, 39409, 47194, -3077, 47194, 54619, 54619, 54619, 54619,
   54619, 54619, 54619, 54619, 54619, 54619,  1314, 20729, -3077, 20729,
    1907,  1908,  1910,  1869, -3077, -3077, -3077,   204, -3077,  1911,
   -3077, -3077, -3077,   -60, -3077,   157,  1906, -3077, 50659,  3749,
    1701,  2370,  1914,  1888,  1113, 64009, -3077,  1918,  1917,   953,
    1620,  1916,  2371, -3077,  1008, 50659, -3077, -3077, -3077,  2326,
   -3077,   628,   213, -3077,  1234, -3077,  3749,  1478, -3077,  3749,
   44836,  1798,   954, 64504,  1959, -3077,   243,   960, -3077, -3077,
   -3077, -3077, -3077, 64504,  1920, -3077,  1920, -3077, -3077,  1920,
   -3077, -3077, -3077, -3077, 25409,  2244,  1925, 69454, -3077, -3077,
   54619, -3077, -3077, -3077,   978,  1928,  2025, 54619, 54619, 54619,
   54619, -3077, -3077, -3077, 19169, 20729,  1965, -3077,  1940, 12428,
    2218, -3077, 29002, -3077,   231,  1942, 36438, 64504, -3077, -3077,
   -3077, -3077,  2055, -3077, -3077, 64504, -3077,  1934, -3077,  1943,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, 20729,
   44836, -3077, 44836, -3077, -3077, -3077, -3077, -3077,  6806, -3077,
    1949,  1944, 64504, 20729, -3077, -3077, -3077,   765, 20729, 20729,
    5562, -3077, 45220, 20729, 69454,   983,  5562,   361, 20729,  3581,
    3923, 20729, 20729,  5412,  8611, -3077, 23329, 15009, -3077,  1945,
   20729, 40408, 38913, -3077, 31982,  2182,  1946,  2182,   866,  1956,
   44836, 20729, -3077, -3077, -3077, -3077,  2012,   352, 33467,  2169,
   -3077,  1977, 64504, -3077,  2037, 44836, -3077, -3077, 39905, -3077,
   -3077, -3077, -3077, -3077,  2422,  1877,  1967,  1968, -3077,  1317,
   -3077, -3077, 64504,  1972, -3077,  1973,   244, -3077, 64504,  2009,
   -3077,   272,  2285,   132, -3077, 20729, -3077,  2374,  2452,  2798,
    1980, 64504, 54619, 25409, -3077,   278,   215, -3077,  2270, 54619,
    2009,  2409, -3077, -3077, -3077,   575, -3077,  2307,  2220, -3077,
     249, -3077, 20729,   575,  2221,   185, 64504, -3077, -3077,  2128,
   -3077, 69454,   243,   243, -3077,  1531,  1985,  1988,  1989,  1992,
    1999,  2000,  2001,  2007,  2008,  2013, -3077,  2015,  2016,  2020,
    2021,  2028,  2033,  2035,  2038,  1554,  2043, -3077,  2050,  1892,
    2052,  2057,  2060,  2067,  2070, 70414,  2071,  2072,  2075,  2077,
    1555,  2078,  1005,  1110, -3077, -3077, -3077, -3077,  2080, -3077,
   -3077, -3077,  1272,  2011, -3077, -3077, -3077,  2082, -3077,  2094,
   -3077, -3077, -3077, -3077, -3077, -3077,  2048,  2059, -3077, -3077,
   -3077,   182,  2010,  2083, 64504,  1314,   116, 64504,  2085,  1876,
    2520, 19689, 47194,   816,  2305,  2081, -3077,   866,  1701, -3077,
   50659,  4276,   658,  2064, -3077,   193,  1876, -3077,  2473,  1701,
    2121,  2542, -3077,  2087, -3077,  2314, 64504,  2093, -3077, -3077,
   48184,  1920,  4971, 25409, 69454,   990,   996, -3077,  2595,  2258,
    2182, -3077, -3077, -3077, -3077, -3077,  2096,    -9,  2097, 10348,
    2095, -3077, -3077, -3077, -3077, -3077, -3077, 44836, 44836, 64504,
    2277, -3077, -3077,  2098,  2099, 37428,  2556,  2102, -3077, 15529,
   -3077,  2425, -3077, 30495, -3077,  1708,  2114,  1708, 69454,  1708,
   -3077, -3077, 44836, 20729, -3077, -3077, 41086,  2442,  5562,  5562,
   45220,  1023, -3077,  5562, 20729, 20729,  5562,  5562, 20729, -3077,
    9826,   608, -3077,  1025, -3077, 40447, -3077, 70894, -3077, -3077,
    1965,   866,  1965, -3077, -3077,  2117, -3077, -3077, -3077,  2178,
   -3077, -3077,  1036,  2548,  2037, 20729, -3077, -3077,  2127, 35943,
   -3077, -3077, -3077, -3077, 35943,   244, -3077,  2299,  2009,  2130,
   -3077, -3077, -3077, -3077, -3077, -3077, 40486, -3077,    92, 20729,
   -3077,   989,  2519, -3077, -3077, -3077, -3077,  2009,  1234, -3077,
   54619,  2605,  2499, -3077, -3077, 44836, -3077, -3077,  2055,  2055,
   -3077, -3077,  2291, -3077, -3077,  2136, -3077, -3077,  1272,   -94,
   39409, 54619, 54619, -3077, -3077,  2142, -3077, -3077, -3077, -3077,
   -3077,   -60,  2534,  1045,  1008, -3077,  3749,  3749, 44836,  1058,
   54619,  2507, 50659, -3077,  2622,  2149, 54619,  1876,   375,   375,
   -3077,  2300, -3077,  2302, -3077, -3077,  2630,   273, -3077, 20209,
   47194, 54619, -3077, -3077, 32972, -3077,  4971,  1059, -3077, -3077,
    2156,  2158, -3077,  1965, 20729,  2161, 20729, -3077, 23849,  2633,
    2163, -3077, 20729,  2222, 27489, -3077, 20729, -3077, 54619, 59569,
     232,  2164, 59569, -3077, -3077, -3077, -3077, -3077, 20729, -3077,
    5562,  5562,  5562, 20729, -3077, 20729, -3077, -3077, -3077,  2365,
    2277, -3077,  2277, 20729,  3749,   633,  3248, 64504,    30, -3077,
   44836, -3077, -3077, -3077, 54619, -3077, 47194, -3077,   244,   451,
    2165, 20729, 40533,  2398, -3077, -3077,  2434, -3077,  2494, -3077,
    2237,   299,  2248, -3077, -3077, -3077, -3077,  1314,   866,  1701,
    2064,  2121, -3077, -3077,  2172, 54619,  3749,  1008,   628, -3077,
   -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077, -3077,
   -3077, -3077,  3749,  2614,  2400,  2624,  3749, 44836,  1064,  1959,
   20729,   195, -3077,  1065,  2616, -3077, -3077,  2692,  2277,  2190,
   23849,  2191, -3077,  2193, 64504, 44836,  2334, -3077, -3077,  2194,
   -3077, -3077,   182, 20729, -3077, 41171,  2195,  2197,  2644,  1869,
    2222,  2222, -3077,   352, -3077, -3077,  2611, 32972,  2579,  1234,
     244,  2211,  1084, -3077, -3077, -3077, -3077, -3077,  1620, -3077,
   40572,  2441,   380,  2426,  2165, 20729, -3077,  2280, -3077, -3077,
   -3077,  2681, -3077, -3077, 50659,  2209,  2121,  2064,  1876,  2121,
    2435, -3077,  2436, -3077, -3077,  2225, 40922, 64504, 64504,  1701,
   32972, 64504,  2226,  2222, -3077,  2229, -3077, -3077, -3077, 53629,
   -3077,  2231,  2235, -3077, -3077, -3077, 20729,   141, -3077, -3077,
    2273, 54619,  1130,    58,  2434, 39409, -3077, 47194,  1565,   451,
    2538, -3077, -3077, -3077, -3077,   154,  2454, -3077,  2458, -3077,
   44836, -3077,  3749, 50659, -3077, -3077, -3077, -3077, -3077, -3077,
   32972,  2616, -3077,   372, -3077,  1560, -3077,   372, -3077, -3077,
   -3077, -3077,   866, -3077,  1507, 24369, 24369, 24369,  2236,  3749,
   -3077,  1560, -3077,  2363,  2426, -3077, -3077, -3077, -3077, -3077,
     417,   417,  2631, -3077,  2303, -3077,  2121,  1140, 64504,  1786,
   -3077,  1786, 25929,  2391,   239, 43718,  2612, -3077,  2612,  2612,
   -3077, -3077, -3077, 38418, -3077, -3077,  2734, -3077,   183, -3077,
   -3077, -3077,  1701,   372, -3077, -3077,  2725, -3077, -3077, -3077,
   -3077, -3077,   151, -3077, -3077, -3077,  1560,   244, -3077, -3077,
   -3077,  1560,  1786, 24889,  2399, -3077,  2466, -3077, -3077, -3077,
   -3077, -3077, -3077, -3077
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     155,   263,     0,  1387,  1386,  1457,   263,     0,  1314,     0,
     263,   485,   401,     0,  1478,  1477,     0,   207,   263,     0,
     155,     0,     0,     0,     0,     0,     0,   548,   551,   549,
       0,     0,     0,   263,   588,     0,  1479,   263,     0,     0,
     580,   550,     0,  1435,     0,     0,     0,     0,     0,     2,
       4,     5,     6,     7,     8,     9,    23,    10,    11,    12,
      13,    19,    14,    15,    16,    17,    18,    20,    21,    22,
      25,    24,    26,    27,  1345,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,   524,   510,   593,   523,     0,
       0,   154,   692,   531,    37,    38,    39,    40,    41,    42,
      43,  1480,  1476,    44,   262,   261,   255,     0,     0,     0,
       0,     0,  1456,     0,     0,   256,   111,  1504,  1505,  1506,
    1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1878,  1515,
    1516,  1517,  1518,  1519,  1879,  1520,  1521,  1522,  1824,  1825,
    1880,  1826,  1827,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,  1828,  1829,  1533,  1534,  1535,  1536,  1537,
    1830,  1881,  1831,  1538,  1539,  1540,  1541,  1542,  1882,  1543,
    1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1883,  1552,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1832,
    1562,  1563,  1833,  1564,  1565,  1566,  1567,  1568,  1569,  1570,
    1571,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
    1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,
    1834,  1591,  1592,  1593,  1594,  1595,  1835,  1596,  1597,  1598,
    1836,  1599,  1600,  1601,  1884,  1885,  1602,  1603,  1837,  1887,
    1604,  1605,  1838,  1839,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1888,  1615,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,  1623,  1624,  1625,  1626,  1889,  1840,  1627,  1628,
    1629,  1630,  1631,  1841,  1842,  1843,  1632,  1890,  1891,  1633,
    1892,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1893,  1641,
    1894,  1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1844,
    1650,  1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,
    1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,  1669,
    1845,  1896,  1846,  1670,  1671,  1672,  1847,  1673,  1674,  1897,
    1675,  1848,  1676,  1849,  1677,  1678,  1679,  1680,  1681,  1682,
    1683,  1684,  1685,  1686,  1850,  1898,  1687,  1899,  1851,  1688,
    1689,  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,
    1699,  1700,  1852,  1900,  1701,  1702,  1853,  1703,  1704,  1705,
    1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1854,
    1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,
    1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1901,
    1734,  1735,  1736,  1855,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1856,  1756,  1757,  1902,  1758,  1759,  1857,
    1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
    1770,  1771,  1772,  1858,  1773,  1859,  1774,  1775,  1776,  1904,
    1777,  1778,  1779,  1780,  1781,  1782,  1860,  1861,  1783,  1784,
    1862,  1785,  1863,  1786,  1787,  1864,  1788,  1789,  1790,  1791,
    1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,  1865,  1866,  1805,  1905,  1806,  1807,  1808,
    1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
    1819,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,  1820,  1821,  1822,  1823,     0,   112,   113,  1262,
    1487,     0,  1240,   111,  1837,  1844,  1858,  1312,  1313,   112,
       0,   258,   484,     0,     0,     0,     0,     0,     0,   209,
       0,   395,   394,     0,  1303,   400,     0,     0,     0,   115,
     107,  1703,   114,  1239,   105,   121,  2048,  2049,  2050,  2051,
    1935,  2052,  2053,  2054,  2055,  1936,  2056,  1937,  1938,  1939,
    1940,  1941,  1942,  2057,  2058,  2059,  1944,  1943,  2060,  1945,
    2061,  1946,  2062,  1947,  1948,  2063,  2064,  1949,  1558,  1950,
    1951,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
    1952,  1953,  2074,  2075,  1954,  2076,  2077,  1955,  2078,  1956,
    1957,  1958,  2079,  2080,  1959,  1960,  2081,  1961,  2082,  2083,
    1962,  1963,  1966,  1964,  2084,  1965,  2085,  1967,  1968,  1969,
    2086,  2087,  1970,  1971,  2088,  1972,  1973,  1974,  1975,  1976,
    2089,  1977,  2090,  1978,  1979,  2091,  2092,  2093,  2094,  2095,
    1981,  1980,  1982,  1983,  2096,  2097,  2098,  2099,  1984,  1985,
    1986,  2100,  2101,  1987,  2102,  2103,  1988,  1989,  2104,  1990,
    1991,  2105,  1992,  1993,  2106,  1994,  1995,  2107,  2108,  2109,
    1996,  2110,  1997,  1998,  2111,  2112,  1999,  2000,  2113,  2001,
    2114,  2115,  2116,  2117,  2002,  2003,  2118,  2004,  2119,  2120,
    2121,  2122,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  1453,   123,   122,   124,     0,   419,   420,
       0,   430,     0,   412,   417,   413,     0,   439,   432,   440,
     421,   411,   433,   422,   410,   208,     0,   441,   427,   415,
       0,     0,     0,     0,   259,   220,   401,     0,   155,     0,
    1349,  1350,  1351,  1352,  1353,  1354,  1359,  1355,  1356,  1357,
    1358,  1360,  1361,  1362,  1363,  1364,  1340,  1345,  1365,  1366,
    1367,  1368,  1369,  1370,  1371,  1372,  1373,  1374,  1375,  1376,
    1377,  1378,     0,  1314,     0,     0,  1830,  1881,  1835,     0,
    1848,     0,  1851,  1852,  1737,  1859,  1862,  1863,  1864,  1865,
       0,   760,   114,   109,   744,     0,   526,   696,   706,   744,
     749,  1026,   772,  1027,     0,   116,  1421,  1420,  1416,  1415,
     194,  1277,  1465,  1604,  1644,  1754,  1860,  1783,  1483,  1466,
    1460,  1464,   260,   587,   585,     0,  1211,  1604,  1644,  1741,
    1754,  1860,  1395,  1399,     0,   257,  1485,  1470,     0,  1471,
     114,   532,   579,     0,   264,  1434,     0,  1439,     0,  1717,
     559,   562,  1271,   560,   524,     0,     0,     1,   155,  1344,
    1449,     0,   161,     0,   583,   583,     0,   583,     0,   516,
       0,     0,   524,   519,   523,   693,  1482,  1860,  1783,  1469,
    1472,  1613,     0,     0,  1613,     0,  1613,     0,  1613,     0,
       0,  1459,  1195,     0,  1241,   117,     0,  1328,     0,  1329,
    1325,  1321,  1327,  1322,     0,  1330,  1320,  1331,  1319,     0,
    1336,  1324,     0,     0,     0,   366,   399,   398,   397,   396,
     401,  1613,  1287,     0,   448,   449,     0,     0,     0,     0,
       0,   205,  1298,   108,   106,  1613,  1454,   428,   429,     0,
     418,   414,   416,     0,     0,  1613,  1266,   438,   434,  1613,
     438,  1233,  1613,     0,     0,   212,     0,   394,  1342,  1379,
    2002,  1380,  1381,  1393,     0,  1394,  1384,  1348,   155,     0,
     483,  1311,  1417,     0,     0,     0,  1147,   744,   749,     0,
       0,   762,     0,  1166,     0,  1172,     0,     0,     0,   744,
     531,     0,   706,   761,   110,     0,   742,   743,   634,   634,
     588,     0,   569,   754,     0,     0,   757,   755,     0,   757,
       0,     0,     0,   757,   753,   714,     0,   634,     0,   742,
     745,   634,     0,   764,  1339,     0,     0,     0,     0,     0,
    1463,  1461,  1462,  1467,     0,     0,     0,  1243,  1245,  1246,
    1115,  1256,  1012,     0,  1825,  1826,  1827,  1187,  1828,  1829,
    1831,  1832,  1833,   966,  1578,  1834,  1254,  1836,  1838,  1839,
    1841,  1842,  1843,  1844,  1845,  1846,     0,  1255,  1849,  1682,
    1854,  1855,  1857,  1860,  1861,  1253,  1866,     0,     0,     0,
    1222,  1138,     0,     0,     0,  1011,     0,  1188,  1196,  1007,
       0,     0,   808,   809,   830,   831,   810,   836,   837,   839,
     811,     0,  1218,   900,   995,  1206,  1014,  1045,  1016,  1025,
    1003,  1082,   996,     0,  1006,   998,  1214,   569,  1212,     0,
     999,  1242,   569,  1210,  1398,  1396,  1402,  1397,     0,     0,
       0,     0,     0,   110,  1441,  1442,  1433,  1431,  1432,  1430,
    1429,  1436,     0,  1438,  1345,  1133,  1135,     0,   561,     0,
       0,     0,   513,   512,   514,     3,  1271,     0,     0,     0,
       0,   581,   582,     0,     0,     0,     0,     0,     0,     0,
       0,   677,   608,   609,   611,   674,   678,   686,     0,     0,
       0,     0,     0,   520,     0,  1481,  1475,  1473,     0,     0,
       0,   139,   139,     0,     0,     0,     0,     0,    99,    48,
      92,     0,     0,     0,     0,   234,   247,     0,     0,     0,
       0,     0,   244,     0,     0,   227,   221,   223,    50,     0,
     139,     0,    46,     0,     0,     0,    52,  1457,     0,   483,
    1194,     0,   119,   120,   118,   111,     0,  2016,  1878,  1879,
    1880,  1881,  1831,  1882,  1883,     0,  1884,  1885,  1837,  1887,
    1888,  1889,  1890,  1891,  1892,  1893,  1894,  1844,  1896,  1897,
    1898,  1899,  1900,  1901,  2042,  1902,  1858,  1904,  1864,     0,
    1905,  1018,   112,  1259,  1141,   593,  1139,  1272,     0,     0,
    1323,  1326,     0,     0,     0,     0,     0,   481,     0,     0,
       0,     0,  1283,     0,     0,  1613,   201,  1613,   366,     0,
    1613,   366,  1613,     0,  1613,   206,   210,  1297,  1300,     0,
     431,   426,   424,   423,   425,  1613,   253,     0,     0,  1267,
     436,   437,     0,   405,     0,     0,   407,     0,     0,   217,
       0,   215,     0,   401,   155,     0,   228,  1389,  1390,  1388,
       0,     0,  1347,   231,  1383,  1392,  1382,  1391,  1346,   248,
    1341,     0,     0,  1337,   471,     0,     0,     0,     0,  1148,
     877,   876,   860,   861,   874,   875,   862,   863,   870,   871,
     879,   878,   868,   869,   864,   865,   858,   859,   866,   867,
     872,   873,   856,   857,  1161,  1149,  1150,  1151,  1152,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,     0,     0,   705,
     703,     0,     0,     0,     0,     0,     0,  1188,     0,   970,
     996,     0,     0,     0,  1133,  1171,     0,     0,     0,     0,
       0,     0,  1133,  1177,     0,     0,   728,   740,     0,   627,
     633,   704,   702,     0,  1211,   697,     0,   774,   754,     0,
     753,     0,     0,   756,   750,     0,   751,     0,     0,     0,
       0,   752,     0,     0,     0,     0,   700,     0,   740,     0,
     701,   771,  1423,  1422,  1418,  1405,  1413,   195,     0,  1263,
    1906,  1907,  1908,   818,  1909,   847,   825,   847,   847,  1910,
    1911,  1912,  1913,   814,   814,   827,  1914,  1915,  1916,  1917,
    1918,   815,   816,   852,  1919,  1920,  1921,  1922,  1923,     0,
       0,  1924,   847,  1925,   814,  1926,  1927,  1928,   819,  1929,
     782,  1930,     0,  1931,   817,   783,  1932,   855,   855,  1933,
       0,   842,  1934,  1264,  1265,     0,  1144,   792,   800,   801,
     802,   803,   828,   829,   804,   834,   835,   805,   899,     0,
     814,   155,  1468,  1484,     0,  1138,  1004,   846,   833,  1186,
       0,   841,   840,     0,  1138,   823,   822,   821,  1009,     0,
     820,  1095,   847,   847,   845,   925,   824,     0,     0,     0,
       0,     0,   851,     0,   849,   926,   904,   905,     0,  1221,
    1230,  1133,  1137,     0,  1007,  1133,     0,  1000,  1001,     0,
    1085,  1087,     0,     0,  1189,  1244,  1008,     0,  1249,     0,
       0,   899,   899,  1217,  1115,     0,  1105,  1108,     0,     0,
    1112,  1113,  1114,     0,     0,     0,  1209,     0,  1123,  1125,
       0,     0,   941,  1121,     0,   944,     0,     0,     0,     0,
    1109,  1110,  1111,  1101,  1102,  1103,  1104,  1106,  1107,  1119,
    1100,   922,     0,   997,     0,  1048,     0,   921,  1215,   695,
       0,  1247,   695,  1407,  1411,  1412,  1410,  1406,     0,  1401,
    1400,  1403,  1404,  1486,     0,  1443,  1427,     0,  1424,  1136,
     690,   563,  1235,     0,   567,  1450,  1448,   160,   159,     0,
       0,   536,   535,   602,   594,   596,   602,     0,   534,     0,
     650,   651,     0,     0,     0,     0,   683,   681,  1243,  1256,
     638,   612,   637,     0,     0,   616,     0,   642,   900,   676,
     518,   606,   607,   610,   517,     0,   679,     0,   689,     0,
     555,   557,   540,   554,   552,   537,   545,   677,   611,     0,
    1474,     0,     0,     0,     0,     0,  1613,     0,     0,   785,
      83,    64,   318,   138,     0,     0,     0,     0,     0,     0,
       0,    91,    88,    89,    90,     0,     0,     0,     0,  1263,
     232,   233,   246,     0,   237,   238,   235,   239,   240,     0,
       0,   225,   226,     0,     0,     0,     0,   224,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1458,  1451,  1190,
    1195,   593,   593,   593,     0,   591,   592,     0,     0,     0,
    1335,  1333,  1332,  1334,     0,     0,   470,   364,   374,     0,
       0,     0,  1287,     0,     0,     0,     0,     0,   205,     0,
     401,  1288,  1286,  1290,  1289,  1291,  1584,   189,     0,     0,
     200,   197,     0,   363,   337,     0,     0,  1302,     0,     0,
       0,     0,     0,     0,  1613,   353,  1299,     0,  1455,     0,
       0,   251,   438,  1268,     0,   435,   438,  1234,     0,   438,
     219,     0,     0,  1343,  1385,   229,   249,   230,   250,   483,
     478,   508,     0,   486,   491,   468,     0,   468,     0,   488,
     492,   468,   487,     0,   468,   482,  1419,     0,  1041,     0,
    1031,     0,     0,   763,     0,     0,  1032,   972,   973,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   990,   989,  1033,
     767,     0,   770,     0,     0,  1169,  1170,     0,  1034,     0,
       0,  1176,     0,     0,     0,  1039,     0,   707,     0,     0,
       0,   622,   626,   629,     0,   632,   569,   525,  1604,  1644,
       0,   580,   580,   580,   578,   568,     0,   654,     0,     0,
     729,     0,     0,   731,   733,     0,     0,   736,   713,   712,
       0,     0,     0,     0,   775,     0,  1239,     0,     0,   196,
       0,     0,     0,   800,     0,     0,     0,   790,   786,     0,
     880,   881,   882,   883,   884,   885,   886,   887,   888,   889,
     890,   891,   806,  1276,     0,   812,  1281,  1282,  1279,  1275,
    1278,  1280,     0,     0,     0,     0,  1185,  1181,     0,     0,
       0,     0,  1090,  1092,  1094,     0,   844,   843,  1099,  1105,
    1108,  1112,  1113,  1114,  1109,  1110,  1111,  1101,  1102,  1103,
    1104,  1106,  1107,     0,  1127,     0,  1081,     0,     0,     0,
       0,     0,     0,  1220,     0,   968,     0,  1002,  1013,     0,
       0,  1088,  1017,  1222,  1197,     0,     0,     0,  1252,  1251,
     901,   910,   913,   945,   946,   917,   918,   919,   923,  1274,
    1273,  1216,     0,  1208,     0,     0,   902,   927,   932,     0,
    1178,   962,     0,   950,     0,   940,     0,   948,   952,   928,
     943,     0,   924,     0,  1209,  1124,  1126,     0,  1122,     0,
     914,   915,   916,   906,   907,   908,   909,   911,   912,   920,
    1098,  1096,  1097,     0,  1195,     0,  1207,     0,     0,  1050,
       0,     0,   947,  1213,     0,   774,   593,   774,     0,   899,
    1444,  1271,  1437,  1426,  1271,  1134,  1236,  1270,   565,     0,
       0,     0,  1446,   146,   150,     0,  1196,   180,   182,   695,
       0,   600,   601,   605,     0,     0,   605,   584,   533,  1855,
    1737,     0,     0,     0,     0,   643,   684,     0,   675,   640,
     641,     0,   639,  1243,   644,  1242,   645,   648,   649,   617,
    1231,   685,   687,     0,   680,     0,  1237,   539,   558,     0,
       0,     0,     0,     0,   522,   521,   691,     0,    49,     0,
    1613,    66,     0,     0,     0,     0,     0,     0,   268,     0,
     368,   268,   104,  1613,   438,  1613,   438,  1508,  1579,  1755,
       0,    62,   342,    95,     0,   132,   371,     0,   327,    85,
     100,   125,     0,     0,   222,    51,   236,   241,   128,   245,
     242,  1307,   243,   139,     0,    47,     0,   126,     0,  1305,
       0,     0,    53,   130,  1309,  1459,     0,  1194,     0,   591,
     591,   591,     0,  1140,     0,     0,     0,  1142,  1143,   940,
    1316,  1317,  1318,  1315,   456,   469,     0,   365,     0,   480,
     459,   460,   470,  1285,     0,   201,   366,     0,   366,     0,
     210,  1287,     0,     0,   191,   187,     0,     0,     0,     0,
     364,   356,   354,   387,     0,   361,   355,     0,     0,   313,
       0,  1502,     0,     0,     0,     0,   450,     0,     0,   205,
     211,     0,     0,     0,   253,   254,   404,  1269,   406,     0,
     408,   218,   216,  1338,   475,     0,   474,   479,   473,   477,
     472,     0,   467,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,  1028,  1146,     0,  1164,  1163,   971,   978,
     981,   985,   986,   987,  1165,     0,     0,     0,   982,   983,
     984,   974,   975,   976,   977,   979,   980,   988,   772,     0,
       0,   766,  1174,  1173,  1167,  1168,     0,  1036,  1037,  1038,
    1175,     0,     0,   741,   620,   618,   621,   623,   619,     0,
       0,   774,   580,   580,   580,   580,   577,     0,     0,     0,
     773,     0,   671,   735,     0,   759,     0,   732,     0,     0,
     723,     0,   730,   779,   746,     0,     0,   748,  1414,   796,
       0,   791,   787,     0,     0,     0,   797,     0,     0,     0,
       0,     0,     0,     0,  1145,   586,  1005,     0,     0,     0,
    1182,     0,   967,   813,   826,     0,  1093,  1015,     0,  1116,
    1080,   854,   853,   855,   855,     0,     0,     0,  1229,     0,
    1134,  1084,  1086,  1230,  1010,   838,   899,     0,     0,     0,
       0,     0,     0,     0,   951,   942,     0,   949,   953,     0,
       0,     0,   936,     0,     0,   934,   963,   930,     0,     0,
     964,  1194,     0,  1198,     0,     0,  1049,  1058,   698,   694,
     654,   591,   654,     0,  1408,  1428,  1425,   566,   155,  1447,
       0,   169,     0,     0,     0,     0,   172,   186,   183,  1446,
       0,     0,   595,   597,     0,  1117,   605,   599,   647,   646,
       0,   615,   682,   613,     0,   688,     0,   556,     0,   542,
       0,   716,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   268,     0,   376,     0,   383,     0,     0,   368,   349,
      84,     0,     0,     0,    58,   103,    76,    68,    54,    82,
       0,     0,    87,     0,    80,    97,    98,    96,   101,     0,
     278,   303,     0,     0,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   483,  1195,  1191,  1195,
       0,     0,     0,   593,   589,   590,  1019,     0,   455,   507,
     504,   505,   503,   227,   375,     0,     0,   199,   363,     0,
    1302,     0,     0,  1284,   401,     0,   192,     0,   190,     0,
     201,   366,     0,   341,   337,   362,   335,   334,   336,     0,
    1503,   220,     0,  1497,   366,  1301,     0,     0,   451,     0,
     445,   210,     0,     0,  1296,   252,   438,     0,   463,   502,
     509,   489,   494,     0,   500,   496,   495,   490,   498,   497,
     493,  1029,  1040,  1162,     0,     0,     0,     0,   765,   768,
       0,  1035,  1030,   739,     0,     0,   654,     0,     0,     0,
       0,   571,   570,   576,     0,     0,  1052,   734,     0,     0,
       0,   721,   711,   717,     0,     0,     0,     0,   777,   776,
     747,   800,     0,   780,   800,     0,   800,     0,   798,     0,
     807,   892,   893,   894,   895,   896,   897,   898,   832,     0,
    1184,  1180,  1089,  1091,  1128,   850,   848,  1219,  1133,  1224,
    1226,     0,     0,     0,  1083,   969,  1250,   903,     0,     0,
     933,  1179,   954,     0,     0,     0,   929,  1116,     0,     0,
       0,     0,     0,   938,     0,  1202,  1195,     0,  1201,     0,
       0,     0,     0,  1024,   699,   671,     0,   671,     0,     0,
    1445,     0,  1440,   147,   148,   149,     0,     0,     0,   164,
     141,     0,     0,   181,   169,   157,   603,   604,     0,   598,
     614,  1232,  1238,   541,     0,  1007,     0,     0,   538,     0,
     133,   268,     0,     0,    65,     0,   385,   329,   377,   360,
     344,     0,     0,     0,   269,     0,   402,     0,     0,   350,
       0,     0,     0,     0,   330,     0,     0,   289,     0,     0,
     360,     0,   367,   285,   286,     0,    57,    77,     0,    73,
       0,   102,     0,     0,     0,     0,     0,    60,    72,     0,
      55,     0,   438,   438,    63,  1263,  1906,  1907,  1908,  1909,
    1910,  1911,  1912,  1913,  1914,  1915,  2026,  1916,  1917,  1918,
    1919,  1920,  1921,  1922,  1923,  2035,  1924,   275,  1925,  1682,
    1926,  1927,  1928,  1929,  1930,     0,  1931,   783,  1932,  1933,
    2114,  1934,  1101,  1102,   273,   274,   370,   270,  1264,   271,
     378,   272,     0,   373,   328,   129,  1308,     0,   127,     0,
    1306,   136,   134,   131,  1310,  1452,     0,     0,  1022,  1023,
    1020,   591,     0,     0,     0,   483,   462,     0,     0,  1502,
       0,     0,     0,     0,  1613,     0,   188,     0,  1302,   198,
     363,     0,   393,   313,   388,     0,  1502,  1500,     0,  1302,
    1496,     0,   442,     0,   202,     0,     0,     0,   409,   476,
       0,   499,   991,     0,     0,     0,     0,   630,     0,   636,
     671,   575,   574,   573,   572,   653,  1553,  1838,  1736,     0,
     657,   652,   655,   660,   662,   661,   663,   659,   670,     0,
     673,   758,  1129,  1131,     0,     0,     0,     0,   722,     0,
     724,     0,   726,     0,   778,   794,     0,   795,     0,   793,
     788,   799,  1183,  1227,  1228,  1223,     0,   900,   960,   958,
     955,     0,   956,   937,     0,     0,   935,   931,     0,   965,
       0,     0,  1199,     0,  1044,     0,  1047,  1061,  1057,  1056,
    1052,  1019,  1052,  1409,   564,   168,   145,   171,   170,     0,
    1196,   178,     0,     0,   169,     0,   173,   452,     0,     0,
     553,   715,   546,   547,     0,   381,    67,     0,   360,     0,
     268,   346,   345,   348,   343,   347,     0,   403,     0,     0,
     287,     0,   294,   332,   333,   331,   288,   360,   366,   290,
       0,     0,     0,    69,    59,    56,    61,    70,     0,     0,
      71,    74,   779,    86,    79,  1263,  2035,  2044,     0,     0,
       0,     0,     0,  1193,  1192,     0,   458,   457,   506,   454,
     465,   227,     0,     0,   337,  1499,     0,     0,   447,     0,
       0,     0,   363,   193,     0,     0,     0,  1502,     0,     0,
     265,     0,   310,     0,   213,  1501,     0,     0,  1488,     0,
       0,     0,  1294,  1295,     0,   464,   992,     0,   993,   769,
       0,     0,   628,  1052,     0,     0,     0,   664,   658,     0,
    1051,  1053,     0,   625,  1132,   718,     0,   720,     0,   744,
     593,     0,   744,   727,   789,   781,  1225,  1042,     0,   957,
     961,   959,   939,  1195,  1203,  1195,  1200,  1046,  1060,  1063,
     673,  1248,   673,     0,     0,   156,     0,     0,   153,   140,
     158,  1118,   543,   544,     0,   268,     0,   359,   382,   299,
     277,     0,     0,     0,   284,   291,   392,   293,     0,    78,
      94,     0,     0,   372,   137,   135,  1021,   483,     0,  1302,
     313,  1496,   444,   204,     0,     0,     0,   337,   220,  1498,
     326,   319,   320,   321,   322,   323,   324,   325,   340,   339,
     311,   312,     0,     0,     0,     0,     0,   446,     0,  1296,
       0,   175,   184,     0,   175,   994,   631,     0,   673,     0,
       0,     0,   656,     0,     0,   672,     0,   529,  1130,     0,
     710,   708,   591,     0,   709,     0,     0,     0,     0,   593,
     625,   625,   142,     0,   143,   179,     0,     0,     0,   366,
     384,   358,     0,   351,   297,   296,   298,   302,     0,   300,
       0,   316,     0,   309,   277,     0,    81,     0,   379,   453,
     461,     0,   267,  1490,   363,     0,  1496,   313,  1502,  1496,
       0,  1493,     0,   443,   203,     0,     0,     0,   177,  1302,
       0,   177,     0,   625,   666,     0,   665,  1055,  1054,   627,
     719,     0,     0,  1043,  1205,  1204,     0,  1067,   528,   527,
       0,     0,     0,     0,   392,     0,   338,     0,     0,   299,
       0,   292,   389,   390,   391,     0,   305,   295,   306,    75,
      93,   380,     0,   363,  1491,   266,   214,  1489,  1494,  1495,
       0,   175,   174,   602,   176,   774,   185,   602,   635,   530,
     667,   624,     0,   725,  1062,     0,     0,     0,     0,     0,
     152,   774,   163,     0,   309,   357,   352,   276,   301,   315,
       0,     0,     0,   307,     0,   308,  1496,     0,   177,   605,
    1292,   605,  1824,  1554,  1790,     0,  1079,  1068,  1079,  1079,
    1059,   144,   151,     0,   268,   281,     0,   280,     0,   369,
     304,  1492,  1302,   602,   165,   166,     0,  1072,  1071,  1070,
    1074,  1073,     0,  1066,  1064,  1065,   774,   386,   279,   283,
     282,   774,   605,     0,     0,  1076,     0,  1077,   162,  1293,
     167,  1069,  1075,  1078
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3077, -3077, -3077,  1919,    67,    73,  -884, -1192,  -940, -1199,
   -3077,  -120,    81, -3077, -3077,   171, -3077,  1002, -3077,   161,
    -790,   537, -3077,  1095, -3077, -3077,  1541,   500,    85,    90,
    1997, -3077,   969, -3077,  3873,  2539,  3800,  1269,  -515,  -870,
   -1224,    23,     7, -3077, -3077, -3077, -3077, -3077,  -747,   477,
   -1211, -3077,   430, -3077, -3077, -3077, -3077,  -206,   153, -2246,
       2, -2162, -2869,  -565, -3077,  -671, -3077,  -319, -3077,  -614,
   -3077,  -687,  -619,  -653, -2827, -1134, -3077,  1613,  -367, -3077,
     592, -3077, -2535, -3077, -3077,   576, -3077, -1160, -3077, -2209,
     156,  -599, -2587, -2525, -2163,  -904,   234,  -602,   208, -2107,
    -974, -3077,   604, -3077,  -589, -3077,  -892, -1944,    93, -2660,
   -1676,    -7, -3077, -3077, -3077,  -713, -3077, -2494,    94,  1533,
   -2121,    96, -1674, -3077, -3077, -1664,    44, -2134,     8, -2092,
      97, -3077, -3077,    98,    17,  -616,   282, -3077,    99, -3077,
   -3077,  1503,  -906, -3077, -3077,   483,   101,   962, -3077, -2539,
   -3077,  -606, -3077,  -611,  -618, -3077, -3077,    32,  -907,  1489,
   -3077, -3077, -3077,    12, -3077,  -474, -3077, -3077, -2578, -3077,
      18, -3077, -3077, -3077, -3077, -3077,  -410,   290, -3077, -3077,
    -548, -2562,  -500, -3077, -2950, -2977, -3077, -3077,  -649, -2996,
   -2037,   103,   110,  1480,   111,   112, -3077,   311,   113, -1138,
       4,  2058,   -44,   -50, -3077,   -38, -3077, -3077, -3077,   642,
   -3077, -3077,    15,    34,  1694, -3077, -1011, -3077, -1603,   789,
   -3077,  1854,  1855, -2202,  -873,   -74, -3077,   677, -1665, -2119,
    -664,  1114,  1671,  1677,   437, -2284, -3077,  -539, -3077,   266,
   -3077, -3077,   670,  1161, -1559, -1565, -3077, -2149, -3077,  -454,
    -341, -3077, -3077, -3077, -3077, -3077, -2379, -2404,  -576,  1131,
   -3077,  1684, -3077, -3077, -3077, -3077,    -3, -1492,  2847,   710,
     -84, -3077, -3077, -3077, -3077,   148, -3077,   893,  -169, -3077,
    2076,  -672,  -785,  1909,  -122,   211, -1809,    37,  2100,   486,
   -3077, -3077,   484, -2056, -1419,   441,  -255,   895, -3077, -3077,
   -1273, -3077, -1885, -1167, -3077, -3077,  -710,  -575, -3077, -3077,
   -3077,  1803,  2056, -3077, -3077,  2593,  2728, -3077,  -843,  3339,
    -826, -1028,  1921,  -928,  1922,  -931,  -937,  -941,  1923,  1926,
    1930,  1935,  1936,  1939, -1537,  4904,  -668,  -701, -2125, -3077,
    1014,    77, -3077, -1380,    79, -3077, -3077, -3077, -3077, -2228,
   -3077,  -436, -3077,  -431, -3077, -3077, -3077, -1651, -3076, -1678,
   -3077,  2227,   824, -3077, -3077,   422, -3077, -3077, -3077, -3077,
   -1526, -3077,  5919,   724, -3077, -1986, -3077, -3077,  -970,  -832,
   -1137, -1008, -1220, -1929, -3077, -3077, -3077, -3077, -3077, -3077,
   -1504, -1778,  -223,   783, -3077, -3077,   876, -3077, -3077, -3077,
   -1738, -2106, -3077, -3077, -3077,   791,  1467,   108,  -813, -1611,
   -3077,   841, -2356, -3077, -3077,   427, -3077,  -603, -1116, -2428,
     330,    25, -3077,  1785, -2495, -3077, -3077,  -718, -2637, -1100,
    -899, -3077,   119,  1035,    19, -3077,   124,  1251, -3077, -3077,
   -3077,   126, -3077,   512,   127,   471, -3077,   942, -3077,   676,
      68, -3077, -3077, -3077,    75,  2827,    14, -2912
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    48,    49,    50,   750,   751,  1840,  1783,  2934,  1227,
    1773,  1353,   752,  2596,  2597,  2598,  2240,  1208,  3366,  2241,
    1209,  1210,  2600,    54,    55,    56,   114,  1239,   753,   754,
     527,    59,  2290,   922,   801,  1097,   803,  1098,  1606,   905,
    1242,  1243,   755,  2638,  2302,  3161,  2687,  3162,  2363,  2296,
    1363,  2357,  1881,  1821,  1364,   535,  1895,  2688,  2643,  1882,
     756,  2585,  2936,  3359,  2611,  3499,  2872,  2873,  3356,  3357,
    2588,  2243,  3426,  3427,  2670,  1764,  3421,  2321,  3298,  2247,
    2228,  2874,  2329,  3257,  2982,  2244,  2854,  2322,  3352,  1856,
    2323,  3353,  3110,  2324,  1818,  1844,  2589,  3428,  2248,  1819,
    2584,  2937,  1752,  2325,  3363,  2326,   546,  2858,   757,  2673,
    1309,   529,   518,   519,  1534,   715,  1283,   716,   758,   940,
    1850,   759,  1302,  1832,    65,  1316,   547,  1853,   760,  1841,
     761,  2657,  2658,   762,   763,  1144,  2541,  2162,   764,   741,
     742,   957,  1333,   743,    71,  1861,   765,  1339,  1340,   965,
      73,   870,  1355,   766,  1356,  1357,   974,    74,  2689,   976,
     977,    75,    76,   768,  3193,  2997,  1318,  1857,  2334,   548,
     769,  2819,  2164,  2544,  3348,    79,  3091,  2167,  1169,  3094,
    3312,  2812,  3089,  2545,  3388,  3443,  3092,  2168,  2169,  3313,
    2170,   770,   818,  1474,   771,   772,  1039,  2019,   773,  1755,
     774,  1099,    86,    87,  1012,    88,  3104,    89,    90,  1730,
    1731,  1732,   848,   860,   861,  2160,  1447,  1965,   853,  1173,
    1699,   835,   836,  2286,   878,  1806,  1694,  1695,  2173,  2552,
    1723,  1724,  1182,  1183,  1953,  3327,  1954,  1955,  1440,  1441,
    3202,  1711,  1715,  1716,  2194,  2184,  1702,  2432,  3020,  3021,
    3022,  3023,  3024,  3025,  3026,  1100,  2726,  3213,  1719,  1720,
    1185,  1186,  1187,  1728,  2204,    92,    93,  2145,  2528,  2529,
     807,  3037,  1464,  1733,  2730,  2731,  2732,  3041,  3042,  3043,
     808,  1007,  1008,  1031,  1026,  1454,  1973,   809,   810,  1930,
    1931,  2401,  1033,  1967,  1983,  1984,  2738,  2454,  1535,  2229,
    1536,  1537,  1998,  1538,  1101,  1539,  1565,  1102,  1570,  1541,
    1103,  1104,  1105,  1544,  1106,  1107,  1108,  1109,  1558,  1110,
    1111,  1582,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,
    2008,  2009,  2010,  2011,  2012,  1155,  1734,  1113,  1114,  1115,
    1116,  1117,  1118,   812,  1119,  1120,  1655,  2139,  2527,  3030,
    3210,  3211,  2803,  3079,  3239,  3339,  3458,  3486,  3487,  3513,
    1121,  1122,  1600,  1601,  1602,  2032,  2033,  2034,  2035,  2133,
    1649,  1650,  1123,  2941,  1652,  2055,  3033,  3034,  1156,  1433,
    1593,  1285,  1286,  1549,  1407,  1408,  1414,  1905,  1422,  1426,
    1935,  1936,  1434,  2101,  1124,  2026,  2027,  2471,  1560,  1125,
    1241,  1605,  2798,  2136,  1653,  2095,  1132,  1126,  1133,  1128,
    1589,  1590,  2488,  2770,  2771,  2065,  2201,  1682,  2206,  2207,
     961,  1129,  1130,  1131,  1287,   522,  1550,  3444,  1329,  1161,
    1288,  2091,   775,   106,   776,    96,   777,  1151,   857,  1152,
    1154,   778,   829,   830,   779,   842,   843,  1476,  1669,  1477,
     866,   101,   102,  1196,   831,   849,   781,  3188
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     517,   904,    61,   865,    84,   880,   881,    60,    66,   714,
    1192,  1226,    77,   879,   103,    91,   517,    69,    78,    95,
     805,  1297,  1127,   958,  1027,  1425,  1157,  1787,  1798,  1478,
    1837,  2176,   521,  1786,  1244,    91,   972,  1352,  1299,   713,
    1751,   883,   847,  1932,  1683,  1400,  1770,  2143,   521,  1399,
    1987,  2054,   767,   884,  1336,  1398,  1584,  2557,  1396,  1803,
    2547,   740,  2278,  2450,  1757,  1342,  1685,    51,   100,  2590,
    1358,  1761,  2970,    52,  2078,  2079,   851,  2630,  2631,  2632,
     863,    53,   517,   517,   520,    57,   805,   805,   780,  2530,
      58,  2532,  1791,    62,    63,  2682,    64,    67,    68,    70,
     811,    72,   813,    80,  1863,  1228,   889,  1232,  2452,  1236,
     844,    81,    82,    83,   521,   521,  1659,  2942,  2939,    94,
    2583,  1662,  1596,  2968,    97,  2511,    98,    99,  2546,  2983,
    2769,   973,  2986,  1009,  1244,  2644,   819,   968,  1030,   960,
    2833, -1895, -1318,   -45,  2838, -1895,  -511,   897,  2303,  2307,
    -515,  2199,  1367, -2035, -2035,  2196,  3180,  2404,  1330,  2433,
    2639,   978,   815, -1241,  2310,     1,   811,   811,   813,   813,
    2147, -1260,  2442, -1886, -1260,     2,  2652,     3,     4, -1257,
   -1257, -2026, -2026,  -852, -1903, -1886, -1895,  -852,  2651,  -847,
       5,  -855, -2044, -2044,  1051,     6,  1330, -1261,  1666,   815,
    1051, -1903,  1409,  1051,     7, -1258, -1258,  2093,  -855,  2659,
   -1261,  1753,  1548,  2647,  1181,  1561,  1562,  1146,     8,  2093,
   -2021, -2021,  1789, -2046, -2046,   532,  1753,     9,  -814,    10,
    -827,  -842,  1574,  1742,   815,   815,   815,  2618,  1801,  1909,
    -466,    11,   871,    12,  1911,  1139,  -511,  1802,     3,     4,
    -515,  3114,   855,  1346,    13,  3524,  2469,  1170,  1051,  1592,
    2694,  2696,  3097,  2699,   972,  1321,  1663,  1346,   815,    14,
      15,    16,  1051,  1244,  1771,  3387,  3470,  1774,  1775,  1810,
      17,  3273,  3260,  3129,   949,  2300,    18,  1004,  1615,  2209,
    -227,  -648,  1419,  1617,    19,  -227,    20,    21,  2666,   815,
    3519,  2114,  1184,  1615,  1322,  3149,  1330,  1616,  1617,  3165,
      22,  2962,  1668,  2733,    23,  3181,  1030,  2414,  1811,  3346,
    2987,  2586,  1949,  1625,  3455,  1418,  3184,  1745,  1009,  2806,
    3182,  3525,   872,  3462,  3125,  1143, -1099,  3303,  1625,  1687,
      24,   533,  2080,   554, -1099,   783,  2130,  3304,  2416,   745,
    1010,  3412,  1566,  1949,  2131,  1993,    25,  1627,  2427,  2428,
    2429,   821,  1739,  2850,  3391,  2716,  1909,  1360,  1576,  3373,
    1910,  1911,  1627,  2847,  2284,   862,   862,  1735,  1736,  3205,
    1664,  2805,    26,  2807,  1147,  1177,  1148,  1548,   852,  2705,
    1703, -1120,  3111,   104,  1462,  1776,  2522,  2876,  3123, -1120,
    3174,  2377,  2417,  2594,  3508,  3290,  3506,  1847,  2612,  2158,
     876,  3186,  1805,  2171,  3447,  3272,  1781,   833,  2023,  2846,
    1036,  2613,  1864,  3526,  2115,   782,  3080,  2029,  3082,   112,
    3148,  1037,  2405,  2889,  2159,  -511,  1704,  2829,   893,  -515,
    1782,  2116,   105,  2202,  3477,  1463,  2117,  3531, -2020, -2020,
    2851,  1299,  1331,  3372,   874,  3175,  2587,    27,    28,    29,
    3291,  1179,  3520,  1540,  3434,    30,  3112,  3437,    31,  3292,
    2877,  2583,  3124,  2583,  2995,  2385,  2230,  1548,  3456,  1718,
    3495,  1503,  1323,   784,  2118,  2988,  2140,  1747,  1419,  1011,
    1331,  3478,  2764,  3293,  3126,  1762,  1812,    32,  2172,  1688,
    1584,  3503,  1140,  1665,  -511,  -668,    33,  3457,  -515,  3463,
    1180,  3271,   113,  3305,  2415,  1578,  2852,  3289,  2853,   834,
    3183,  3255,    34,  1050,   875,  1760,  1909,   876,  1737,    35,
    1910,  1911,  3249,    36, -2048, -2048, -2048,  2285,   924,  1777,
    3265,  2706,  2301,    37,  3347,  2418,  3465,  2993,  1678,  1778,
    3435,  1686,  3422,  1706,  2878,    38,  2991,  1790,  2203,    39,
    2640,  2641,  3509,  2210,  3501,  3294,  2446,  3010,  2979,  1762,
    3160,   873,  2619,  2292,  2963,  2094,  3527,  1141,  3295,    40,
    2785,   714,  1604,  2221,  2283,  2054,  3001,  2513,  3115,  2025,
    1045,   530,    41,   950,   856,    42,  1324,  1941,    43,  2703,
    1331,   985,   876,    44,  1748,  3471,  3261,  2733,  2856,   958,
    1813,   946,  2534,  1332,  1865,  1707,  1738,  2386,  2560,    45,
    1869,  1785,  -511,  2196,  2372,  2727,  -515,  2387,   814,  3280,
    1956,  3203,   972,  1804,  2857,  2141,  2378,  2653,  1540,  2119,
    2347,  1787,  2662,    46,  1561,  1562,  1976,  1557,  1697,  2555,
   -1895,  1335,  2146,  -784, -1895,  2942,  2939,    47,  1571, -1318,
     -45,  -511,  1571,  -511,  1579,  -515,  2406,  -515,  2353,  1574,
     902,  3252, -1241,  2411,   903,  2681,  3253,  2549,  1149,  3105,
   -1260,  1579, -1886, -1260,   534,  2644,  1580,   858,  3423,  3496,
    3138,  3139,  -852, -1903, -1886, -1895,  1548,  3226,  -847,  1763,
    1581,  3371, -1099,  1580,  2748,   865, -1261,   902,  1610,  2443,
   -1903,   903,  2132,  2443,  1419,  1419,  1001,  1583,  3436, -1261,
    1419,  1563,  2022,  1592,   998,  1171,  3169,   973,  1540,  2036,
    2037,  1866,  1592,  1873,  1244,  2074,  1244,  1564,  1926,  1569,
    -842,  2464,   971,  1660,  2148,  3039,  2057,  1907,  1908,  3378,
    1990,   877,  3377,  1928,  1350,  1351,   865, -1120,  2226,  3155,
      23,  1615,  1781,    91,  1947,  1760,  1700,  3087,  1350,  1351,
    2283,  2814,  3424,  1763,  3497,  2075,  1615,  3296,  3005,   868,
    3297,   975,   517,  2826,  1566,  3096,  1782,  1648,  -784,  1548,
    1909,  -227,  -227,   517,  1910,  1911,  1625,  1000,   883,  1645,
    1646,  1647,  1648,  3498,  1576,  3088,  1917,  3178,  3367,  1193,
     884,  3445,  1753,  2226,   521,  1864,   780,   867,  2227,  2717,
    2718,  2719,  2720,  1754,  1762,   521,  2815,  1172,   517,   517,
    1627,  1200,  2412,  2256,   536,   869,  3340,  1201,  3341,  1760,
    2015,  2337,  3098,  2259,   885,  1627,  2262,  1376,  1377,  2968,
    2827,   517,  3240,   900,  3242,  3061,  3045,  3354,  3179,  3047,
    3163,  3049,  1923,  1924,  1925,  1926,   811,  1177,   813,  2412,
      61,   815,    84,  2580,  1701,    60,    66,   811,   906,   813,
      77,   944,   103,    91,  2254,    69,    78,    95,  1150,  2956,
    1145,  2957,  1451,  1158,   982,   517,   714,   537,  1458,  1282,
    1762,   517,  1604,    27,    28,    29,  1762,  1762,  3175,  2096,
    1145,  2523,   844,   844,  3393,   844,   923,  1384,  1385,  3355,
    2942,  2939,  1344,  1548,  3521,  1345,  1753,  1445,  2279,  2280,
    2281,  3131,  1579,  1762,  1455,    51,   100,  1756,  2313,  3136,
    2356,    52,  1202,  1179,  3308,  2421,  2485,  1540,  3258,    53,
    1792,  2218,  2054,    57,  1580,  -208,  2346,  1282,    58,  2776,
    2348,    62,    63,  2350,    64,    67,    68,    70,    34,    72,
     971,    80,  1342,  2358,  1300,  3318,   517,   517,  2255,    81,
      82,    83,   517,   930,  3245,   517,   517,    94,   517,   517,
     517,   517,    97,    91,    98,    99,  1676,  2591,  2265,  1677,
     815,  2185,  2366,  2272,   517,    39,  1703,  2367,   805,  1875,
    2102,   517, -2017, -2017,  1051,   805, -2048, -2048, -2048,  1932,
    1921,  1922,  1923,  1924,  1925,  1926,  1795,  1298,  1763,   517,
    1282,  1533,  2617,  2621,  1388,  1389,   521,  2103,    41,  1870,
    1540,   115,  1871,   521,   941,   531,   780,  2230,   865,    44,
     517,  2535,  1704,   744,  2536,  1787,  3408,  3409,  3071,  2625,
     942,  2257,  2633,  2860,  2368,  1177,  2260,  2628,   832,   517,
    1178,  1548,   845,   963,   947,  3197,   936,   541,  2629,   967,
     517,   517,   517,  1548,   517,   517,  2555,   714,   811,  2566,
     813,   951,   107,  3350,  1760,   811,  1615,   813,  1203,   948,
    1616,  1617,  -592,    47,  1763,   545,  2863,  -592,  2592,  3449,
    1763,  1763,  2410,  1548,  1877,   937,   517,  1598,  1705,  1051,
    1548,  3234,   953,  1691,  1692,  2620,  1698,  2102,  1572,  1573,
    3401,  1625,  3235,   517,   517,   884,   884,  1763,   884,  1579,
    2365,  1179,   964,  2558,  2369,   902,  1950,  2371,  1051,   903,
    2655,  1951,  2104,   952,  2103,  1204,  1548,  2105,  1823,  1205,
    1548,  1580,  2106,  1384,  1385,  1627,  1548,   972,   517,  1706,
    1760,  1596,   517,   517,  1540,  1581,  1760,  1760,  -592,  1579,
    2743,   902,   517,   517,   517,  1603,   954,   517,  1548,   862,
    1180,  1206,  2467,  2667,   902,   983, -1241,  1824,   903,  2675,
     939,  1580,    23,  1760,  1145,  1940,  1533,  1942,  1943,  1419,
    1419,  1419,  1419,  1419,  1419,  1583,   984,  1419,  1419,  1419,
    1419,  1419,  1419,  1419,  1419,  1419,  1419,  -592,   985,  2134,
    1456,  1707,  3170,  2135,  1461, -2018, -2018,  1989,   536,  1282,
    1990,   986,  2379,  2380,  2381,  2382,  2383,  2384,  1282,   989,
    2388,  2389,  2390,  2391,  2392,  2393,  2394,  2395,  2396,  2397,
     108,   992,  1207,  3263,  1203,   993,  1788,  2501,  2867,  2104,
     994,   109,  1282,  2531,  2289,  1442, -2019, -2019,   815,  2106,
    1388,  1389,  1826,   995,  1921,  1922,  1923,  1924,  1925,  1926,
     536,  3006,   996,  1466,   817,   817,  1533,  1470, -2022, -2022,
    2013,   537,  2054,  2014,  1831,   926,   110,   927,  1134,  1135,
    1833,  1137,   714,  2107,  1834,  2297,  1835,  2868,  2298,  1003,
    2728,   714,  1540,  2735,  2108,  2593,  2360,  2594,  2602,  2361,
    2604,  1032,  3517,  2869,  1540,  1040,  1041,  1042,   971,  2940,
    2503,  2398,  1858,   997,  2399,    27,    28,    29,  2444,  2447,
     998,  2445,  2445,   537,  1035,   714,   111,  2595,  1043,    91,
    3504,   517,  3505,  2608,  1540,  1968,  2609,  2504,  1970,  2614,
    1038,  1540,  2615,  1974,   539,  1448,  1977,   975,  1448,  2678,
    1044,  1981,  1990,   901,  2740,  1880,  1045,  2445,  2741,  3480,
    1046,  2014,  1200,  1419,  1419,  1200,  2887,  2569,  1201,    14,
      15,  1201,  2880,  3530,  2650,  3492,  1138,  1540,   517,   517,
      34,  1540,   780,  1142,   517,  2955,   517,  1540,   928,  2844,
     929,   517,   517,   517,   517,  2744,  2498,  2499,  2745,  2746,
    2107,  1298,  2745,  1555,  2870,    47,   517,   517,  -207,  1540,
    1153,  2108,   517,  2871,    23,   517,   805,    39,   521,   805,
     517,  2965,   517,   517,   805,  2765,  2766,   805,   517,  2879,
    3528,  2888,   805,  2821,  1159,  3529,  2822,  1200,  2978,  2994,
    1200,  2298,  2361,  1201,   521,  2999,  1201,   521,  3000,  1160,
      41,   541,   521,   542,  2327,   521,  2328,  2505,  1162,   862,
     521,    44,  2506,  3007,  1548,  3336,  3008,  3337,  3062,  1163,
     811,  2014,   813,  1202,  1167,  3198,  1202,  1419,  2014,   545,
    1016,  3199,  1200,  1016,  2445,  1533,  1596,  2422,  1201,  2423,
    2754,  2756,  2757,  1168,  2753,  2755,   811,  1164,   813,   811,
    2752,   813,  2751,   541,   811,   967,   813,   811,  3229,   813,
    3236,  2014,   811,  1990,   813,    47,  1017,   517,   517,  1017,
    2605,  3246,  2607,  1175,  3247,  2020,   517,   517,  2016,  1198,
    3279,   545,  1449,  2298,   517,  1457,    91,  1194,  2017,  2018,
    2021,   517,  1019,  3283,  3315,  1019,  2361,  2014,  1202,  3384,
    3389,  1202,  2361,  3390,  2424,  1195,  2425,    27,    28,    29,
    1643,  1644,  1645,  1646,  1647,  1648,   714, -2023, -2023,  3416,
     517,  1200,  3417,   517,  2843,  1213,  2845,  1201,  1533,   517,
     517,   517,   517,   517,   517,   517,   517,   714,  3142, -2024,
   -2024,   517,   517,  1202,  2555,  1214,   517,  1548, -2025, -2025,
     517,  2686,  2143,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   972,  2507,   517,  3461,  1197,  2090,  3390,  2178,
    1199,   517,    34,  1282,  2508,  3502, -2027, -2027,  3390,  1203,
    1213,   884,  1203,    36,  1174,  1867,  1176,  1868, -2028, -2028,
    1211,  1215,   517, -2029, -2029, -2030, -2030,  2074, -2031, -2031,
    1214,  1212,  3106,  1548,  1229,    38, -2032, -2032,  1233,    39,
    2887, -2033, -2033, -2034, -2034,   517, -2036, -2036,  1237,  1023,
   -2037, -2037,  1023, -2038, -2038,  1290,   517,   517,  1238,  1150,
   -2039, -2039,  1202, -2040, -2040,  1291,  1230,  1292,  1450,  1234,
    1205,  1450,    41,  1205, -2041, -2041,  1215, -2043, -2043,  1295,
     934, -2045, -2045,    44,  1203, -2047, -2047,  1203,  1807,  1808,
    2197,  2198,  1533,  -643,  -643,  1540,  -647,  -647,  1296,    45,
    1301,   714,  1231,   714,  3159,  1235,  1303,  2837,  1993,   536,
    2961,  1304,  2973,  -646,  -646,  1317,  1216,  1386,  1387,  1319,
    2989,  1388,  1389,    46,  1320,  3225,  3102,  3103,  3479,  1203,
    2998,  2242,  3481,  2246, -1304,  1327,  1548,    47,  1328,  3073,
    1334,  2217,  1337,   517,  2263,  1205,  1050,  1282,  1205,  1909,
     517,   517,   935,  1910,  1911,  3488,  3489,  1912,  1913,  1914,
    3514,  3515,  1419,  1419,  3314,  1217,  1671,  1672,  1343,  1338,
    1361,  1216,   537,  1207,  2778,  1218,  1207,  1206,  1362,  1365,
    2264,  1436,  1368,  1423,  1439,  1438,  2270,  1219,  3522,  1453,
    1205,  1446,  1282,  2038,  1459,  2789,  2790,  1452,  1460,  2331,
    2039,  2040,  1465,  1469,  2041,  2042,  2043,   714,  1471,  1551,
    1552,  1554,  -818,  -825,  1282,   517,  1563,  1567,  1203,  1220,
    1217,    47,  2271,   971,  -668,  -669,  2312,  2940,  1540,  -815,
    1218,  1548,  1577,  -816,  -819,  2434,  1578,  -817,  1588,  2555,
    1533,  2437,  1219,  1597,   517,   517,  1607,   517,  1207,   936,
    1609,  1207,  1533,   517,   517,   517,   517,   517,   517,  1654,
    1656,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,  1222,  1658,  1679,  1220,  1670,   517,   517,  1680,  1205,
     517,  1684,  1533,  1690,  1540,  1178,  1689,   517,   937,  1533,
    3134,  1725,  1180,  1207,  1729,  1727,  1223,  1740,  1758,   934,
    1759,  1760,  1765,  1766,  1767,  1772,  1779,  1784,  1548,   517,
     112,  1206,   517,  1780,   517,  1225,   805,  3314,   517,  3277,
    1794,  1800,   805,   938,  1814,  1533,  1222,  1815,  1816,  1533,
    1820,   517,  1828,  1282,  1829,  1533,  3143,  3144,  1830,  1839,
    1845,  1843,  1849,  1842,   521,  1846,  1852,  1848,  1851,  1859,
     521,  1223,   541,  1419,   967,  1860,  1864,  1533,  1872,  1916,
    3314,  1898,  1900,  1901,  1903,  1906,  1929,   517,   517,  3044,
    1225,   935,  1948,   939,  -524,  1937,  1938,   544,  3032,  1945,
     545,  3220,  1207,  1966,  1969,  1975,  3002,  1540,  -524,  1978,
    1979,  1980,  1985,  -524,  1557,  1997,   811,  1991,   813,  1596,
    1996,   980,   811,   817,   813,   865,  1988,   517,    85,  1564,
    3314,  2025,   517,   517,  1051,  1548,  3369,  1569,  1992,  1994,
    1995,  2058,  3057,  2024,  2222,  2059,  1615,  2067,    85,  1917,
    3467,   804,  2064,  1034,  2231,  2069,  2234,   517,   517,  2245,
    2070,  2071,   517,  2072,  -524,  2249,    85,  2251,  2092,  1548,
    2099,  2110,  3330,  2113,  2111,   864,   517,  2137,  1136,   517,
    2258,   517,  2144,  2138,  -524,  2261,  2156,   874,  1823,  2266,
    2267,  2268,  2269,  2157,  2273,  2274,  2554,   517,   714,   875,
    2174,  -593,  1540,  2161,   517,  2177,  -593,   517,  2186,  2187,
    2188,   805,  2940,  3120,  2191,  2189,  2212,   804,   804,   882,
    2190,  2213,  2208,  2219,   517,  2223,  2216,  1824,   805,  2225,
      85,  2224,  1419,  -524,   876,  2304,  2314,   517,  1213,   521,
    2295,  2316,  -524,  2299,  2317,  2318,  2332,  2333,  1548,  2335,
    2338,  2339,  2340,  2341,   517,   517,   521,   875,  1214,  2342,
    2343,  2345,  1825,  2349,  2362,  3122,  2370,  1934,  1909,  2400,
    1933,   517,  2419,   517,  2407,  2431,  2408,  -593,  2409,  1540,
    2413,  2438,   517,  2449,  2451,  2456,  2420,  2436,  2457,  1787,
    2458,   811,  1548,   813,  3266,  2460,  2466,  2461,  2462,  2463,
     714,   714,   714,  2477,  1215,  2465,  1614,  2502,   811,  1615,
     813,  2473,  1826,  1616,  1617,  2476,  1354, -2048, -2048, -2048,
    2474,  2481,  2478,  2479,  2480,  1394,  -593,  2482,  2483,  2484,
    2242,  2242,  2242,  2494,  2497,   876,  2495,  2518,  2526,   517,
     865,  2509,  2542,  2543,  1625,  1282,  2519,  2524,  2525,  2537,
    2538,  1626,  2540,  2548,  2550,  2551,  -649,   972,  2561,  1918,
    1919,  1920,  2562,  1921,  1922,  1923,  1924,  1925,  1926,  2568,
    2564,  2572,  1419,  2883,  1473,  1831,  2565,  2573,  1627,  2574,
    2576,  1833,  2579,  1533,  2582,  1834,  1540,  1835,  2578,  2601,
    2603,  -524,  2616,  2622,  1548,  2634,  2623,  2624,  2635,  1216,
    2636,   517,  2637,  2649,   714,  3196,  2044,  2045,  2046,  2648,
    2047,  2048,  2049,  2050,  2051,  2052,  2654,  3332,   971,  2665,
    1540,  2664,  2672,  2669,   714,  2668,  2676,  2683,  2693,  2701,
    2704,  2711,  2707,  2710,  1880,  2724,  2712,  2725,  2713,  2736,
    1608,  2737,  3319,  2742,  3321,  2074,  2761,  2750,  1217,  2758,
    1611,  2767,  2773,  2781,  1880,  2784,  2783,  2787,  1218,   902,
    2802,  2796,   517,   903,  2797,  2811,  2830,  2834,  1661,  2842,
    1219,  2804,  2891,  3329,  1628,  2808,  2828,  1667,  2832,  2875,
    2971,  2981,  2985,  2996,   877,  3003,  3035,  2849,  2848,  2855,
    2967,  1629,  2958,  2959,   521,  2960,  1630,  2964,  2972,  1540,
    2980,   517,  1220,  2976,  3331,  2977,  3454,  3334,  2298,  3004,
    3029,  1050,   865,  3009,  1909,  3414,  1533,  3050,  1910,  1911,
    2799,  -524,  1912,  1913,  1914,  3031,  3051,  3040,  3093,  3054,
    3074,  3081,   517,  2734,  1633,  -524,  3407,  3053,   517,   517,
    -524,  3084,  3086,  1540,  3418,   865,   811,    11,   813,   517,
    3095,  3099,  3100,  3101,  1222,  3109,  1867,  3107,  3108,  3113,
     517,  3117,  3118,   517,  3119,   517,  3127,  3130,  3132,  3133,
    3137, -2016,  1533,   517, -2017, -2018,   517,   517, -2019,  1223,
    3151,   517,   517,  3328,  3150, -2020, -2021, -2022,   517,  1636,
    3402,  -524,  3152, -2023, -2024,  3156,  2836,  1050,  1225, -2025,
    1909, -2027, -2028,   517,  1910,  1911, -2029, -2030,  1912,  1913,
    1914,  -524,  2020,   517, -2031,  2016,   516,   528,  2820, -2032,
      23, -2033,   552,    91, -2034,  2017,  2018,  2021,   552, -2036,
    3166,  3153,   802,   517,   816,   816, -2037,   717, -2038,   820,
     552,   828,  3154, -2039,   828,  1540, -2040,   846,   850,  3171,
    3185,   850,  3189, -2041,   552,   552, -2042, -2043, -2044,  1548,
    -524, -2045,    85, -2046, -2047,  3172, -1258,  3187,  3157,  -524,
    3164,  3190,   714,  3191,  3200,  2938,   714,  3194,   714,  3201,
    3204,  3206,  3212,  3208,  3215,  3218,  3214,  3219,  1614,  1638,
     517,  1615,   517,  3221,   718,  1616,  1617,  3224,   802,   802,
    1879,  1915,  2242,  3228,  1473,  3243,  2943,  3244,  2246,  3248,
     719,   846,  3251,  3254,  3256,  3268,   850,   552,   850,   850,
     850,  3269, -1257,  2969,  1916,  1831,  1625,  3276,  3278,  3285,
    2671,  1833,  3286, -2048,  3287,  1834,  3300,  1835,  3301,  3442,
    3302,  3316,  3317,  3323,  3338,  3320,  3326,  3126,  3333,  3358,
    2990,  3324,  3362,  2992,  3364,   865,  3374,  3368,  3380,   720,
    1627,  3365,  3381,    27,    28,    29,  3387,   517,  3382,   721,
    1533,  3392,  3399,  3406,  3411,  3394,  3396,  3077,  3404,  3400,
    3405,   722,  3413,  3420,  3415,  3425,   723,   517,   517,  3431,
    1445,  3432,   517,  3433,  1917,   517,  1639,  3438,  3439, -2048,
   -2048, -2048,  3459,  1643,  1644,  1645,  1646,  1647,  1648,  3440,
    1916,  3448,  3469,  3472,  3450,   724,  3452,  3474,  -524,  3493,
    3453,  3490,   517,  3470,  3471,  2500,  3507,  2734,    34,  3518,
    3512,  3523,  1359,  3533,  3532,  3140,   517,  2890,  2250,  2599,
    2894,   517,   517,  2153,   865,  2626,   517,  1533,  1796,  2645,
     981,   517,  2816,  2293,   517,   517, -2048,  1165,   725,   517,
    1282,  2690,   726,   517,  3195,    39,   904,   517,  2966,  3429,
    3500,   805,  3264, -2048,   517,  3468,    85,   864, -2048,  3475,
    1917,  3494,  3299,  1750,  2606,    40,   902,  2581,  3466,  1162,
     903,  2984,  2859,  2944,  3473,  3464,  2577,  2685,    41,   521,
    1862,  2824,  1827,  2351,  1874,  3385,    23,  3345,  2823,    44,
    1540,  1542,  3446,  3410,  3516,  1896, -2048,   987,   517,  2809,
    2567,  2553,  2215,  1681,  1722,    45,   517,  2715,   999,  1721,
    3451,  2563,   727,  2183,  1443,  1444,  3395,  3322,  2214,  1726,
     806,  2539,  2860,  2441,  3223,   517,  1002,   728,  2861,    46,
    3038,   811,  2708,   813,  1533,  2709,  2739,  3270,  3398,   988,
    2455,  2862,  3397,    47,  2359,  2492,  1612,  1410,  2763,  2556,
    2516,  1636,  2470,  2839,  2840,  2514,   882,  1395,  1397,  1401,
     729,  1957,  1402,   730,  2493,  2863,  1403,  2864,  2938,  3085,
    2775,  1404,  1405,  1359,   731,  1406,    85,   732,  2152,   890,
    2448,  2892,     0,     0,  1918,  1919,  1920,  2149,  1921,  1922,
    1923,  1924,  1925,  1926,     0,   733,  2945,  2946,  2947,  2948,
    2949,  2950,  2951,  2952,  2953,  2954,     0,     0,     0,   734,
       0,     0,     0,     0,   517,   714,   736,     0,  2817,     0,
       0,     0,     0,     0,     0,   865,   737,     0,     0,    27,
      28,    29,   738,     0,     0,  3177,     0,     0,     0,     0,
       0,     0,     0,   971,     0,  1880,   517,  1533,     0,  1359,
       0, -2048,  1359,  1359,  2865,     0,     0,     0,     0,   739,
       0,     0,   517,     0,     0,     0,  1542,     0,     0,     0,
    1918,  1919,  1920,     0,  1921,  1922,  1923,  1924,  1925,  1926,
       0,     0,  1282,     0,     0,     0,    85,     0,     0,     0,
       0,  1533,     0,  1013,    34,     0,   517,     0,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,   517,   517,     0,
       0,   517,     0,   517,     0,  2275,     0,     0,     0,   804,
       0,     0,  2866,     0,   850,     0,   804,  2867,  2291,   850,
       0,    39,   850,  2291,     0,     0,     0,     0,   517,     0,
     552,     0,     0,     0,  1543,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1542,  1015, -2048,     0,
       0,  1556,   517,     0,    41,  1643,  1644,  1645,  1646,  1647,
    1648,  1050,     0,  1568,  1909,    44,  2868,     0,  1910,  1911,
       0,     0,  1912,  1913,  1914,  1876,  1878,     0,     0,     0,
       0,    45,  2869,  2938,     0,     0,     0,     0,     0,  1354,
    1594,     0,     0,     0,     0,  2364,  1050,     0,     0,  1909,
     536,     0,     0,  1910,  1911,    46,     0,  1912,  1913,  1914,
    3281,  3282,     0,     0,     0,     0,     0,     0,  1016,  2818,
       0,     0,   517,   714,  2779, -1304,     0,   517,     0,     0,
       0,     0,  3121,     0,     0,     0,     0,   517,     0,   517,
       0,   517,   536,     0,     0,   517,     0,   517,     0,   517,
       0,     0,     0,  1880,  1017,     0,     0,     0,     0,   521,
    1420,   517,     0,   537,     0,     0,   517, -1304,   517,     0,
    1018,   882,   882,     0,   882,  1369,   517,   815,     0,     0,
    1019,     0,     0,  2870,     0,     0,     0,     0,  3342,   714,
    3344,     0,  2871,     0,   517,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   537,     0,     0,     0,  1543,
       0,   811,     0,   813,  1020,     0,     0,   538,     0,  3351,
     956,   552,   552,     0,     0,     0,     0,     0,     0,     0,
    3376,     0,     0,     0,     0,  1191,   539,     0,     0,     0,
    1370,  1371,     0,   517,     0,     0,  3379,     0,     0,     0,
    3383,  2211,     0,   517,     0,     0,     0,     0,     0,   966,
    1021,   979,   528,   816,     0,  1542,   517,  1022,   516,     0,
     850,     0,     0,     0,  1916,     0,     0,     0,     0,   802,
     517,  1372,  1373,  1006,  1006,  1374,  1375,     0,  1006,  1029,
       0,     0,     0,   540,  2030,     0,     0,     0,   517,  1543,
    -207,     0,   828,   828,   828,     0,  2060,  1023,  2061,  1916,
       0,     0,   521,     0, -1778,     0,   828,   828,     0,   828,
       0,     0,     0,   517,     0,     0,  1024,     0,     0,     0,
       0,     0,   850,     0,  2076,   540,     0,     0,   552,   517,
       0,     0,    85,   541,  1917,   542,     0,     0,  2938,   850,
     714,     0,   850,     0,     0,   521,  1420,     0,  1542,    23,
    1376,  1377,   543,     0,   811,     0,   813,     0,   544,     0,
       0,   545,     0,   517,     0,     0,  3476,     0,     0,  1917,
    3351,     0,     0,     0,     0,   541,     0,   967,   517,   517,
     517,     0,     0,     0,     0,  1025,     0,     0,     0,     0,
    3267,   850,  1294,  3491,   543,   521,     0,   811,     0,   813,
     544,     0,     0,   545, -1778,   517,   850,   850,   850,   850,
    1315,  3274,  3275,     0,  1378,  1379,  1380,  1381,  1382,  1383,
    1384,  1385,     0,  1326,  1386,  1387,     0,     0,  2195,  2195,
       0,     0,     0,     0,     0,     0,  3288,   804,     0,     0,
     804,     0,     0,  2610,     0,   804,   517,   811,   804,   813,
       0, -1778,     0,   804,     0,     0,  1006,  1029,     0,   850,
       0,     0,  1417,     0,     0, -1778,     0,     0,  1006,  1006,
   -1778,     0,     0,     0,   552, -1778,     0,     0,     0,     0,
     802,  3343,  1542,     0, -1778,     0,     0,   802,  1359, -1778,
       0,     0,    27,    28,    29,  2642,     0,   552,  1359,     0,
       0,  1359,     0,     0,  1472,     0,     0,     0,  1543,     0,
       0,     0,     0,  2656,  1553,     0,     0,     0,     0,  1050,
       0, -1778,  1909, -1780,     0,     0,  1910,  1911,     0,     0,
    1912,  1913,  1914,     0,     0,     0,     0,  1388,  1389,    85,
       0, -1778,     0,     0,  1918,  1919,  1920,  3064,  1921,  1922,
    1923,  1924,  1925,  1926,  1354,     0,     0,    34,     0,     0,
       0,  1545,  2691,     0,  2692,   552,     0,     0,  2697,     0,
    2700,     0,  1420,  1420,     0,     0,     0,     0,  1420,  1918,
    1919,  1920,     0,  1921,  1922,  1923,  1924,  1925,  1926,     0,
   -1778,     0,     0, -1778,    39,  1359,     0,     0,     0, -1778,
       0,  1543,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,     0,  1675,     0,     0,     0,  2100,     0,
       0,     0,     0, -1780,   907,   908,     0,    41,   552,   552,
    1542,     0,  1390,  1391,     0,     0,   850,     0,    44, -1778,
     909,     0,  1542,     0,     0,     0,     0,     0,     0,     0,
       0,   910,     0,     0,    45,     0,  1392,  1393,  1417,     0,
       0,     0, -1778,     0,     0,     0,  2330,     0,   850,  1749,
   -1780,  3460,  1542,     0,     0,     0,     0,     0,    46,  1542,
       0,   850,     0,     0, -1780,     0,    23,   882,     0, -1780,
       0,     0,    47,     0, -1780,     0,  1546,     0,   850,     0,
       0,     0,   850, -1780,  1013,     0,     0,  1797, -1780,  1014,
       0,     0,     0,     0,  2459,  1542,   911,     0,     0,  1542,
     852,     0,     0,     0,     0,  1542,     0,     0,     0,     0,
       0,     0,  1916,     0,     0,  1543,  1545,     0,     0,     0,
   -1780,     0,     0,   553,     0,   912,     0,  1542, -1778,   553,
       0,     0,     0,     0,     0,     0,     0,     0, -1778,     0,
   -1780,   553,     0,     0,     0,  1817,     0,   850,  1015,  1213,
       0,     0,     0,   850,     0,   553,   553, -1778,     0, -1778,
   -1778,     0,     0,     0,     0,     0,     0,  1855,   913,  1214,
       0,     0,   914,     0,     0,     0,   956,     0,     0,     0,
       0,   956,  1917,   552,   552,   717,   552,   956,     0, -1780,
       0,  2935, -1780,  2142,     0,     0, -1778,     0, -1780, -1778,
   -1778, -1778,     0,     0,  2315,     0,  1545,     0,     0,    27,
      28,    29,     0,    85,  1472,  1215,  2881,     0,   553,  1016,
       0,     0,     0,     0,  2642,   854,  2882,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0, -1780,  1420,
       0,  1050,   718,  2533,  1909,     0,     0,     0,  1910,  1911,
       0,  1546,  1912,  1913,  1914,  1017,     0,     0,   719,     0,
       0, -1780,     0,  1543,  1417,  1417,     0,     0,     0,  3065,
    1417,  1018,   516,     0,    34,  1543,  2559,  2559,     0,     0,
       0,  1019,     0,     0,  2883,  1006,     0,   552,  1952,     0,
     892,     0,   895,   915,   899,   850,     0,     0,   802,     0,
       0,   802,     0,     0,   916,  1543,   802,   720,     0,   802,
    1216,    39,  1543,  1661,   802,  1020,   552,   721,   552,   852,
       0,     0,     0,     0,     0,   917,     0,     0,     0,   722,
       0,     0,     0,     0,   723,     0,     0,   804,     0,   918,
       0,  1546,     0,   804,    41,     0,   919, -1780,  1543,     0,
       0,     0,  1543,     0,     0,    44,  1883, -1780,  1543,  1217,
       0,  1021,   920,   724,     0,     0,     0,     0,  1022,  1218,
       0,    45,     0,    27,    28,    29, -1780,     0, -1780, -1780,
    1543,  1219,     0,  2884,     0,     0,     0,  3083,     0,   921,
       0,     0,  1918,  1919,  1920,    46,  1921,  1922,  1923,  1924,
    1925,  1926,     0,  1884,     0,     0,   725,     0,  1023,    47,
     726,     0,     0,  1220,     0, -1780,     0,     0, -1780, -1780,
   -1780,     0,     0,     0,  1885,  1545,  2053,  1024,  1614,     0,
       0,  1615,     0,  1542,     0,  1616,  1617,  2063,    34,     0,
       0,     0,  1886,     0,     0,     0,  1887,  1420,  1420,  1420,
    1420,  1420,  1420,     0,  1916,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1222,  1625,  1594,  1888,     0,
       0,  1889,     0, -2048,   539,    39,   956,     0,     0,     0,
     727,     0,     0,     0,     0,  2100,     0,  1890,     0,     0,
    1223,    14,    15,     0,     0,   728,  1025,     0,     0,  1614,
    1627,  2520,  1615,     0,     0,     0,  1616,  1617,    41,  1225,
       0,  2885,   804,     0,  2886,     0,     0,     0,  1545,    44,
       0,     0,     0,  2150,  1917,   850,     0,   850,   729,   804,
       0,   730,     0,     0,     0,    45,    23,  1625,   850,  2166,
       0,     0,   731,     0, -2048,   732,     0,     0,     0,     0,
       0,  1417,  2747,  2749,     0,     0,  3173,     0,     0,    46,
    1546,     0,     0,   733,     0,  2510,  1542,     0,     0,     0,
       0,  1627,     0,    47,     0,     0,   850,   734,   552,  1354,
    1891,     0,     0,   735,   736,     0,     0,     0,  1892,     0,
       0,     0,  1749,   552,   737,     0, -2048,     0,     0,     0,
     738,     0,     0,   552,  2232,   552,  2236,     0,   552,     0,
    1893,     0,     0, -2048,   552,     0,   552,     0, -2048,     0,
       0,     0,  1542,  1760,     0,     0,     0,   739,   956,   552,
       0,  1420,  1420,   956,   552,     0,  2788,  1894,   552,   552,
     552,   552,     0,   552,   552,     0,     0,     0,     0,     0,
       0,     0,  1545,  1546,     0,     0, -2048,     0,     0,     0,
    3241,   553,     0,     0,  2294,     0,     0, -2048,     0,     0,
       0,     0,     0,   850,   850,   850,   850,  1315,   850,    27,
      28,    29,   864,     0, -2048,     0,  1543,  1547,     0, -2048,
       0,     0,  2320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1359,  2344,     0,
       0,  1636,     0,     0,     0,     0,     0,     0,   925,     0,
       0,     0,     0,   932,     0,  1542,   933, -2048,     0,  2935,
       0,     0,     0,     0,  1918,  1919,  1920,  3176,  1921,  1922,
    1923,  1924,  1925,  1926,    34,  1420,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,    23,     0,  1417,
    1417,  1417,  1417,  1417,  1417,     0,     0,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,    38,     0,     0,
       0,    39,  1636,     0,  1013,     0,     0,  1546,     0,  1014,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
    1545,     0,     0,     0,     0,     0,     0,     0,     0,   850,
       0, -2048,  1545,     0,    41,     0,     0,     0,   802,  1543,
    1542,     0,     0,     0,   802,    44,     0,     0,     0,   552,
       0,     0,     0,     0,   552,     0,     0,  3046,     0,     0,
       0,    45,  1545,  2453,  2453,     0,     0,     0,  1015,  1545,
       0,     0,   553,   553,  1594,     0,     0,  3370,     0,     0,
       0,     0,  1547,     0,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1543,     0,     0,     0,    47,
       0,     0, -2048,     0,     0,  1545,     0,  1594,     0,  1545,
       0,     0,     0,     0,     0,  1545,     0,  1542,     0,     0,
      27,    28,    29,     0,     0,     0,    85,     0,     0,     0,
       0,   552,    85,     0,     0,  2489,     0,  1545, -2048,  1016,
     552,     0,     0,     0,     0,  1643,  1644,  1645,  1646,  1647,
    1648,  1013,     0,     0,     0,  1546,  1014,     0,  2835,     0,
       0,     0,     0,  1417,  1417,     0,     0,  1546,     0,     0,
       0,     0,  1547,     0,     0,  1017,     0,     0,     0,     0,
    2053,     0,     0,     0,     0,    34,     0,     0,     0,   553,
       0,  1018,     0,     0,   991,  1359,     0,  1546,  1543,     0,
    1359,  1019,     0,     0,  1546,     0,     0,     0,     0, -2048,
       0,     0,     0,   802,  2935,  1015,  1643,  1644,  1645,  1646,
    1647,  1648,    39,     0,  1542,   552,     0,     0,     0, -1795,
     802,     0,     0,     0,  2166,  1020,     0,    85,     0,     0,
    1546,     0,     0,     0,  1546,     0,     0,  1876,  1878,     0,
    1546,  3241,     0,     0,     0,    41,  1971,     0,  1542,     0,
       0,     0,     0,     0,    85,     0,    44,    85,     0,     0,
    1420,  1420,  1546,  1166,   552,     0,     0,  1417,     0,     0,
     552,  1021,    45,     0,     0,     0,  1016,     0,  1022,     0,
       0,     0,     0,  1543,  1188,     0,  1817,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
      47,     0,  1017,     0,     0,  1293,     0,     0,  1023, -1795,
       0,     0,     0,     0,     0,  1437,     0,  1542,  1018,     0,
    1306,  1308,  1311,  1313,     0,     0,     0,  1024,  1019,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1468,     0,
       0,     0,     0,     0,     0,     0,     0,  1817,     0,     0,
    1543,     0,     0,   850,     0,     0, -1795,     0,     0,     0,
       0,  1542,  1020,     0,     0,  1817,   850,   850,   850,     0,
   -1795,  1547,   804,  1412,     0, -1795,     0,     0,     0,   552,
   -1795,   850,     0,  1189,   850,     0,   864,     0,  1315, -1795,
       0,     0,   850,     0, -1795,     0,  1025,     0,   956,     0,
       0,  1972,     0,     0,     0,     0,  1599,     0,  1021,     0,
       0,     0,     0,     0,     0,  1022,  1817,  1817,     0,  1817,
       0,     0,     0,  1545,     0,     0, -1795,     0,     0,     0,
       0,     0,     0,  1876,  1878,     0,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,  1359, -1795,     0,   516,     0,
       0,     0,     0,     0,     0,  1023,     0,  1543,     0,     0,
       0,     0,     0,  1542,  1547,     0,  1420,     0,  2714,   553,
     553,     0,     0,     0,  1024,     0,   850,   850,   850,     0,
       0,     0,     0,     0,     0,   552,     0,  1417,   552,  1050,
       0,  1543,  1909,     0,   552, -1795,  1910,  1911, -1795,     0,
    1912,  1913,  1914,     0, -1795,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2053,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1025, -1795,     0,     0,  1625,  1190,    85,
       0,     0,     0,     0, -2048,     0,  1545,     0,  1546,     0,
       0,     0,  1417,  1417,     0,     0,     0, -1795,     0,     0,
    1543,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1627,  1741,     0,     0,     0,     0,  1594,     0,     0,
       0,  2813,     0,     0,     0,  1768,     0,  2166,  1547,     0,
    1420,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1545,   850,  1543,     0,  1793,   552,     0,     0,
       0,   552,   552,   552,     0,   852,     0,  1817,  1749,  1817,
       0,  1855,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,   553,  2791,   553,     0,     0,
     552,     0,  2893, -1795,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1795,     0,   552,   552,   552,   552,   552,
     552,   552,   552,   552,   552,     0,     0, -2048,     0,     0,
       0,  1822, -1795,     0, -1795, -1795,     0,  1838,     0,     0,
       0,  1546,     0,  1614, -2048,     0,  1615,  2320,     0, -2048,
    1616,  1617, -2048,     0,   850,     0,     0,     0,     0,     0,
    1359,     0,     0,     0,  1749,  1545,  1543,     0,     0,     0,
       0, -1795,     0,     0, -1795, -1795, -1795,     0,  1542,     0,
       0,  1625,  1855,     0,    85,    85,     0, -2048, -2048,     0,
    1420,     0,  1817,     0,     0,     0,  1547,  1546,   553,     0,
       0,     0,     0,  1417,     0,     0,     0,     0,  1547,   552,
       0,     0,     0,     0,     0,  1627,   850,   850,   850,   850,
       0,     0,  1917,     0,     0,     0,     0,  1982,  1417,  1986,
       0,  1417,     0,     0,     0,   552,   956,     0,  1547,     0,
       0,     0,  1636,     0,  3048,  1547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1545,     0,    85,     0,    85,     0,     0,     0,     0,     0,
       0,  3055,     0,     0,     0,     0,     0,     0,     0,  1964,
    2792,  1547,     0,     0,     0,  1547,     0,     0,     0,     0,
       0,  1547,     0,     0,     0,     0,     0,     0,     0,     0,
    1546,  3078,     0,   802,    85,     0,     0,     0,     0,     0,
       0, -2048,     0,  1547,     0,     0,     0,  3090,     0,     0,
      85,  2166,     0,     0,    85,     0,     0,  2053, -2048,     0,
       0,     0,     0, -2048,     0,     0,     0,  1545,     0,     0,
       0,  1749, -2048,     0,     0,     0,     0,  1817,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     956,   552,  1417,     0,     0,     0,     0,     0,   850,     0,
       0, -2048,     0,     0,     0,     0,     0,     0,     0,     0,
    1614,     0,     0,  1615,     0,  3141,     0,  1616,  1617,     0,
       0,     0,     0,     0,     0,  1546,     0,     0,     0,     0,
       0,  1420,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1625,     0,
       0,     0,     0,     0,     0, -2048,  1636,     0,     0,     0,
       0,  1543,  1918,  1919,  1920,     0,  1921,  1922,  1923,  1924,
    1925,  1926,     0,     0,  1545,     0,     0,     0,     0, -2048,
      85,     0,  1627,     0,     0,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,  3158,     0,     0,  1817,     0,     0,     0,
       0,     0,  1546,     0,     0,     0,     0,    85,  1545,  2320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,     0,     0,  3192,     0,     0,     0,     0,
       0,     0,  1417,     0,   553,     0,     0,     0,     0,  2151,
       0,  2154,     0,     0,   553,     0,   553,  3068,     0,   553,
       0,     0,  2163,     0,     0,   553, -2048,   553,  3209,     0,
    1614,     0,     0,  1615,   552,     0,     0,  1616,  1617,     0,
     553,     0,   552,     0,     0,   553,     0,     0, -2048,   553,
     553,   553,   553,     0,   553,   553,     0,  1545,     0,     0,
    2200,     0,     0,     0,     0, -2048,     0,     0,  1625,     0,
   -2048,     0,     0,     0,     0, -2048,  3238,     0,     0,  1546,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1200,     0,     0,     0,     0,     0,  1201,     0,   552,     0,
       0,  1545,  1627,   552,  1213,     0,     0,     0, -2048,     0,
       0,     0,     0,  1546,     0,     0,     0,     0,     0,  1547,
       0,     0,     0,     0,  1214,     0,     0,     0,     0,   552,
       0,     0,     0, -2048,     0,     0,     0,     0,     0,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,
     552,   552,     0,     0,     0,     0,     0,  2305,  2306,  2308,
    2309,     0,  2311,  1636,     0,     0,     0,     0,     0,   850,
    1215,  1749,     0,     0,     0,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     850,     0,  1546,  3311,     0,     0,     0,     0, -2048,  1112,
    1112,  1202,     0,  1545,     0,     0,     0,     0,   553,     0,
       0,     0,     0,  1417,     0, -2048,     0,   552,  1006,     0,
   -2048,  1006,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1546,     0,     0,     0,
    2440,     0,     0,     0,     0,  1986,  3090,     0,     0,     0,
       0,     0,  1547,   850,     0,     0,     0,     0, -2048,     0,
       0,     0,     0, -2048,     0,  1216,  1240,     0,     0,     0,
    1284,     0,  1289,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   850,     0,     0,     0,     0,     0,
       0,     0,     0,  2426,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1547,     0,
       0,     0,     0,  1636,  1217,     0,     0,     0,     0,     0,
       0,     0,   553,  3209,  1218,     0,     0,     0,  1341,     0,
       0,  1599,     0,     0,     0,     0,  1219,     0,  1546,     0,
       0,     0,     0,     0,     0,     0,  3311,  1366,     0,     0,
       0,     0,     0,  1411,     0,     0,  1413,  1203,     0,  1424,
    1427,  1432,  1435,     0,     0,     0,     0,     0,  1220,     0,
   -2048,     0,     0,  1749,     0,     0,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,   956,   956,     0,  3311,
     956,     0,     0,     0,     0,     0,     0,     0,  1952,     0,
    1475,  1284,     0,     0,     0,     0,     0,     0,     0,     0,
     552,  1547,     0, -2048,  1221,     0,   553,     0,  1205,     0,
    1222,  1559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1749,     0,     0,     0,     0,  1370,  1371,  3311,
    1575,     0,     0,     0,     0,  1223,     0,     0,     0,     0,
    1224,  1585,  1586,  1587,     0,  1591,  1595,     0,     0,     0,
       0,     0,     0,     0,  1225,   553,     0,     0,  1545,     0,
       0,  2571,     0,     0,     0,     0,     0,   956,  1372,  1373,
       0,     0,  1374,  1375,     0,     0,     0,  1657,     0,     0,
       0,     0,  2166,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1475,  1475,  1547,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2048,  1207,     0,     0,     0,     0,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,     0,     0,  1696,
       0,     0,     0,  1712,  1717,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1112,  1112,     0,  1376,  1377,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,  1547,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,  1623,     0,     0,
       0,     0,     0,  1546,     0,     0,     0,  1625,     0,     0,
    1284,     0,     0,     0,  1626,     0,     0,     0,     0,  1284,
       0,  1378,  1379,  1380,  1381,  1382,  1383,  1384,  1385,     0,
       0,  1386,  1387,     0,     0,     0,     0,  2646,     0,     0,
       0,  1627,     0,  1284,     0,     0,  1614,     0,     0,  1615,
    2660,  2661,  2663,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,  2674,     0,     0,  2677,     0,
       0,     0,     0,     0,  1623,     0,  2684,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
    1547,  1626,     0,     0,     0,     0,   553,     0,     0,   553,
       0,     0,     0,     0,     0,  1982,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,     0,  1547,     0,     0,     0,     0,     0,
       0,     0,  1899,     0,     0,     0,     0,  1628,     0,     0,
       0,     0,     0,     0,  1388,  1389,     0,     0,     0,     0,
       0,     0,     0,     0,  1629,     0,     0,     0,     0,  1630,
    2721,  2722,  2723,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1370,  1371,     0,     0,     0,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,  1432,     0,  1432,  1432,     0,  1633,     0,     0,
       0,     0,     0,  1547,     0,     0,     0,  1112,  1112,     0,
       0,     0,     0,     0,  1628,  1372,  1373,     0,     0,  1374,
    1375,     0,     0,  1112,     0,     0,     0,     0,   553,     0,
       0,  1629,   553,   553,   553,  1634,  1630,     0,  1635,  1390,
    1391,     0,     0,     0,     0,     0,     0,  1547,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,     0,  1631,
    1632,   553,     0,  1392,  1393,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1633,     0,   553,   553,   553,   553,
     553,   553,   553,   553,   553,   553,     0,     0,     0,     0,
       0,     0,     0,     0,  1376,  1377,     0,  2831,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1634,     0,     0,  1635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2028,     0,  1636,
       0,     0,  1637,     0,     0,  2031,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1547,
       0,     0,  1638,     0,     0,     0,     0,     0,  1378,  1379,
    1380,  1381,  1382,  1383,  1384,  1385,     0,     0,  1386,  1387,
    1982,     0,     0,     0,  2077,     0,     0,     0,     0,     0,
    2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,  2975,     0,
       0,     0,  2097,  2098,     0,     0,  2440,  2109,     0,     0,
       0,  2112,     0,     0,  2120,  2121,  2122,  2123,  2124,  2125,
    2126,  2127,  2128,     0,     0,  2129,     0,     0,     0,     0,
       0,  1200,  1112,     0,  1284,     0,     0,  1201,     0,  1638,
       0,     0,     0,     0,     0,  1213,     0,     0,     0,     0,
       0,     0,     0,  2155,     0,     0,     0,     0,     0,     0,
    3011,  3012,  3013,  3014,     0,  1214,     0,     0,     0,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,     0,  1586,  1587,     0,
       0,  1388,  1389,     0,     0,  2475,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1215,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1202,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,     0,     0,     0,     0,     0,  1902,     0,     0,     0,
       0,     0,     0,     0,  2277,     0,     0,     0,  1284,     0,
       0,  2287,  2288,     0,     0,  1613,  1390,  1391,     0,     0,
    1614,     0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,     0,  1216,     0,     0,     0,
    1392,  1393,  3128,     0,     0,     0,     0,     0,  1623,     0,
       0,     0,  1624,  1284,  1547,     0,     0,     0,  1625,     0,
    1999,     0,     0,     0,     0,  1626,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1341,  2352,     0,     0,     0,
       0,     0,     0,     0,     0,  1217,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,  1218,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2374,  2375,  1219,  2376,     0,
       0,     0,     0,     0,  1614,     0,     0,  1615,     0,     0,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1203,     0,
       0,     0,     0,     0,     0,  3217,     0,  2402,  2403,  1220,
       0,  2155,  1623,  2440,     0,     0,  2772,     0,     0,     0,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,  1626,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2430,     0,     0,     0,     0,  2435,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2252,  1627,     0,  1628,  1205,
       0,  1222,  1475,     0,  1284,     0,     0,     0,     0,   553,
       0,     0,     0,     0,   553,  1629,     0,     0,     0,     0,
    1630,     0,  1421,     0,     0,     0,  1223,     0,     0,     0,
       0,  2253,     0,     0,     0,     0,     0,     0,     0,  2468,
     553,     0,     0,  1631,  1632,  1225,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,   553,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2487,     0,
       0,     0,     0,  2490,  2491,     0,   553,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,  1634,     0,     0,  1635,
       0,     0,  1207,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,  1636,  1630,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2512,   553,     0,
    2515,     0,  2517,     0,     0,     0,     0,  1631,  1632,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,  2521,     0,
       0,     0,  1633,  3284,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3309,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,  1696,     0,
    1634,     0,     0,  1635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1717,  2127,  1636,     0,     0,
    1637,     0,     0,  1638,     0,     0,     0,     0,  1421,     0,
       0,     0,     0,     0,  1112,     0,     0,     0,     0,     0,
       0,     0,     0,  2575,     0,     0,     0,  3349,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3375,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1587,     0,     0,     0,     0,     0,  1284,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,  1651,     0,     0,     0,     0,  1651,     0,
    1639,   553,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2680,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1614,     0,     0,  1615,
    1651,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,  1651,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
       0,  1626,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,
       0,  2068,     0,     0,     0,     0,     0,     0,  1627,     0,
    1651,     0,  1651,     0,  1421,  1421,     0,  1927,     0,     0,
    1421,     0,     0,  1651,     0,     0,  1651,     0,     0,     0,
       0,  1651,     0,     0,  1651,     0,     0,     0,  1614,     0,
       0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,  2760,     0,     0,     0,     0,     0,  2762,
    2031,     0,     0,     0,     0,     0,  1623,     0,     0,     0,
    2768,     0,     0,     0,  1651,     0,  1625,     0,     0,     0,
       0,  2777,     0,  1626,  2780,  1614,  2782,     0,  1615,     0,
       0,     0,  1616,  1617,  2786,     0,  1620,  1621,  1622,     0,
       0,     0,  2793,  2794,  1628,     0,     0,     0,     0,  2801,
    1627,     0,     0,  1623,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,  1625,  2810,     0,  1630,     0,     0,     0,
    1626,     0,     0,     0,  2825,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1631,
    1632,     0,     0,     0,  1112,     0,     0,  1627,  1651,     0,
       0,     0,     0,     0,  1633,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,  1651,  1651,     0,     0,     0,
    1651,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,  1634,     0,     0,  1635,  1628,     0,     0,     0,
       0,  2277,     0,  2277,     0,     0,     0,     0,     0,  1636,
       0,     0,  1637,  1629,     0,     0,     0,     0,  1630,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1631,  1632,  1628,     0,     0,  1651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1633,     0,     0,     0,
    1629,     0,     0,     0,     0,  1630,     0,  1614,     0,     0,
    1615,     0,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,  1651,     0,     0,  1631,  1632,
       0,     0,     0,     0,  1634,  1623,     0,  1635,  3027,  3028,
       0,  1651,     0,  1633,     0,  1625,  1651,     0,     0,  1638,
       0,  1636,  1626,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,     0,  1927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3052,     0,     0,     0,     0,     0,  1627,
       0,  1634,     0,     0,  1635,     0,     0,  3056,     0,     0,
       0,     0,  3058,  3059,     0,     0,     0,  3060,  1636,     0,
       0,  1637,  3063,     0,     0,  3066,  3067,     0,     0,     0,
    2277,  1284,     0,     0,  3075,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1112,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,  3116,
       0,     0,     0,  2068,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,  3135,  1630,  1638,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1631,  1632,     0,     0,     0,     0,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,  1633,  1927,  1927,     0,  1421,
    1421,  1421,  1421,  1421,  1421,     0,     0,  1421,  1421,  1421,
    1421,  1421,  1421,  1421,  1421,  1421,  1421,  1927,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,  1634,     0,  2373,  1635,     0,     0,     0,
       0,     0,     0,     0,     0,  3168,     0,     0,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,  1640,  1641,
    1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1284,     0,     0,     0,  1651,     0,     0,
    1651,     0,     0,  1614,     0,     0,  1615,  2487,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,  3230,  3231,
       0,     0,  3232,     0,  1587,     0,     0,     0,     0,     0,
    1638,  1623,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1625,     0,     0,     0,     0,  1651,     0,  1626,  3250,
    1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,     0,     0,
       0,     0,     0,  1421,  1421,     0,  1651,  1651,     0,     0,
       0,     0,     0,  3262,     0,  1627,     0,     0,  1651,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,  1651,
    1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,  3307,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,     0,     0,  2472,     0,     0,     0,     0,     0,
       0,     0,  3027,     0,     0,     0,  3325,     0,     0,     0,
    1112,  1628,     0,     0,     0,     0,     0,  1421,     0,     0,
       0,     0,  3335,     0,     0,     0,     0,  2277,  1629,  2277,
       0,     0,     0,  1630,     0,     0,     0,  1112,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3360,  1631,  1632,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,  1651,     0,     0,
       0,     0,     0,     0,  3386,     0,     0,     0,     0,  1634,
       0,     0,  1635,     0,  3027,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1636,  1112,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,  3430,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
    1623,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1625,     0,     0,  1651,  1651,  1651,     0,  1626,  1927,  1927,
    1927,  1927,  1927,  1927,     0,     0,     0,  1927,  1927,  1927,
    1927,  1927,  1927,  1927,  1927,  1927,  1927,     0,     0,     0,
    1614,  1651,  1651,  1615,  1627,     0,     0,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1623,  1651,
       0,     0,     0,     0,  1651,     0,     0,     0,  1625,  3485,
    3485,  3485,     0,     0,     0,  1626,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3485,  1651,     0,     0,
       0,     0,  1627,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,     0,     0,  1651,
    1651,     0,     0,     0,     0,     0,     0,  1927,  1927,     0,
    1628,     0,     0,     0,     0,     0,     0,  3485,     0,     0,
       0,  1651,  1421,  1421,  1651,     0,  1651,  1629,     0,     0,
    1651,     0,  1630,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,
    2496,     0,     0,     0,     0,  1631,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,     0,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,     0,     0,
    1630,     0,     0,     0,     0,     0,     0,     0,  1634,     0,
       0,  1635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,  1632,  1636,     0,     0,  1637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1614,     0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,  1623,  1651,
       0,     0,     0,  1636,     0,     0,  1637,     0,  1625,     0,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,  1614,
       0,     0,  1615,  1421,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,     0,  1638,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,     0,     0,  1623,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1625,     0,     0,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
       0,  1651,     0,     0,     0,     0,     0,  1651,     0,     0,
       0,  1627,     0,     0,     0,     0,  1651,     0,     0,  1651,
       0,  1651,     0,  1638,     0,  1651,     0,     0,  1927,  1927,
       0,     0,  1651,  1651,     0,     0,     0,     0,     0,     0,
    1651,     0,     0,  1614,     0,     0,  1615,     0,     0,  1651,
    1616,  1617,     0,     0,  1620,  1621,  1622,     0,  1628,     0,
       0,     0,  1639,     0,  1651,  1640,  1641,  1642,     0,  1643,
    1644,  1645,  1646,  1647,  1648,  1629,     0,     0,     0,  2702,
    1630,  1625,     0,     0,     0,     0,     0,     0,  1626,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1421,  1631,  1632,     0,     0,  1628,     0,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,  1633,     0,
       0,     0,     0,     0,  1629,     0,     0,     0,     0,  1630,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,  2774,     0,     0,
       0,     0,  1631,  1632,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,     0,     0,     0,  1633,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,  1635,     0,
       0,  1628,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,  1629,     0,
       0,     0,     0,  1630,     0,     0,     0,     0,     0,     0,
       0,  1927,  1421,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1631,  1632,     0,     0,
       0,     0,     0,     0,     0,     0,  1651,  1651,     0,     0,
       0,  1633,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1651,     0,     0,     0,  1651,     0,  1651,  1651,  1651,
       0,     0,  1651,     0,     0,  1651,  1651,     0,     0,  1634,
       0,     0,  1635,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,  1638,     0,     0,     0,  1636,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1651,     0,     0,     0,     0,
       0,  1927,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,  2841,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1651,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,     0,  1639,
       0,     0,  1640,  1641,  1642,  1927,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,  3069,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
    1651,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1651,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,  1651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1651,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1651,     0,   116,  1047,   815,
    1048,  1049,  1050,  1051,  1052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,  1053,     0,     0,   128,   129,   130,  1651,
     131,   132,   133,   134,   135,   136,   137,   138,  1054,   140,
    1055,  1056,     0,   143,   144,   145,   146,   147,   148,  1057,
     785,   149,   150,   151,   152,  1058,  1059,   155,     0,   156,
     157,   158,   159,   786,     0,   787,     0,  1060,   163,   164,
     165,   166,   167,   168,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,  1651,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,  1061,   190,   191,  1062,
     193,  1063,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
    1064,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,  1065,   221,   222,   223,
     224,   225,   788,  1066,   227,     0,   228,   229,  1067,   231,
       0,   232,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,  1068,  1069,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,  1070,
    1071,     0,  1072,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1073,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,  1074,   321,  1075,   323,   324,   325,   326,  1076,   327,
     328,   329,   330,  1077,   790,   332,  1078,   334,   335,   336,
       0,   337,   338,     0,     0,  1079,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   347,   792,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   793,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,  1080,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,  1081,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,   426,   427,   428,  1082,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   795,     0,     0,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
    1083,  1084,     0,     0,   458,   459,   796,   461,   797,  1085,
     463,   464,   798,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,  1086,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,  1087,     0,     0,     0,     0,     0,     0,  1088,
    1089,  1090,     0,     0,     0,     0,  1091,     0,  1092,     0,
       0,     0,     0,  1093,  1094,  1095,  1096,     0,  2627,   116,
    1047,   815,  1048,  1049,  1050,  1051,  1052,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   117,   118,
     119,   120,   121,   122,   123,   124,     0,   125,   126,   127,
       0,     0,     0,     0,     0,  1053,     0,     0,   128,   129,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
    1054,   140,  1055,  1056,     0,   143,   144,   145,   146,   147,
     148,  1057,   785,   149,   150,   151,   152,  1058,  1059,   155,
       0,   156,   157,   158,   159,   786,     0,   787,     0,  1060,
     163,   164,   165,   166,   167,   168,   169,   170,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,  1061,   190,
     191,  1062,   193,  1063,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,     0,     0,
     205,   206,  1064,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,   219,  1065,   221,
     222,   223,   224,   225,   788,  1066,   227,     0,   228,   229,
    1067,   231,     0,   232,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,  1068,  1069,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,  1070,  1071,     0,  1072,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,  1073,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,  1074,   321,  1075,   323,   324,   325,   326,
    1076,   327,   328,   329,   330,  1077,   790,   332,  1078,   334,
     335,   336,     0,   337,   338,     0,     0,  1079,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   347,   792,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   793,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,     0,   376,   377,   378,  1080,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,  1081,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,     0,   426,   427,   428,
    1082,   430,     0,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   795,     0,     0,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,  1083,  1084,     0,     0,   458,   459,   796,   461,
     797,  1085,   463,   464,   798,   466,   467,   468,   469,   470,
       0,     0,   471,   472,   473,     0,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,  1086,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,     0,     0,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,  1087,     0,     0,     0,     0,     0,
       0,  1088,  1089,  1090,     0,     0,     0,     0,  1091,     0,
    1092,     0,     0,     0,     0,  1093,  1094,  1095,  1096,     0,
    3233,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,  1053,     0,     0,
     128,   129,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,  1054,   140,  1055,  1056,     0,   143,   144,   145,
     146,   147,   148,  1057,   785,   149,   150,   151,   152,  1058,
    1059,   155,     0,   156,   157,   158,   159,   786,     0,   787,
       0,  1060,   163,   164,   165,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    1061,   190,   191,  1062,   193,  1063,   194,     0,   195,   196,
     197,   198,   199,   200,    14,    15,   201,   202,   203,   204,
       0,     0,   205,   206,  1064,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
    1065,   221,   222,   223,   224,   225,   788,  1066,   227,     0,
     228,   229,  1067,   231,     0,   232,     0,   233,   234,    23,
     235,   236,   237,   238,   239,   240,     0,   241,     0,  1068,
    1069,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1070,  1071,     0,  1072,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1073,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1074,   321,  1075,   323,   324,
     325,   326,  1076,   327,   328,   329,   330,  1077,   790,   332,
    1078,   334,   335,   336,     0,   337,   338,     0,     0,  1079,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   347,
     792,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    27,    28,    29,     0,   360,   361,   793,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,  1080,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1081,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    34,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    36,   426,
     427,   428,  1082,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   795,
      38,     0,   446,   447,    39,   448,   449,   450,   451,   452,
     453,   454,     0,   455,  1083,  1084,     0,     0,   458,   459,
     796,   461,   797,  1085,   463,   464,   798,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,    41,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   799,  1086,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,    45,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,  1087,     0,    46,     0,
       0,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
    1091,     0,  1092,  3207,     0,     0,     0,  1093,  1094,  1095,
    1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,  1053,     0,     0,
     128,   129,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,  1054,   140,  1055,  1056,     0,   143,   144,   145,
     146,   147,   148,  1057,   785,   149,   150,   151,   152,  1058,
    1059,   155,     0,   156,   157,   158,   159,   786,     0,   787,
       0,  1060,   163,   164,   165,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    1061,   190,   191,  1062,   193,  1063,   194,     0,   195,   196,
     197,   198,   199,   200,    14,    15,   201,   202,   203,   204,
       0,     0,   205,   206,  1064,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
    1065,   221,   222,   223,   224,   225,   788,  1066,   227,     0,
     228,   229,  1067,   231,     0,   232,     0,   233,   234,    23,
     235,   236,   237,   238,   239,   240,     0,   241,     0,  1068,
    1069,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1070,  1071,     0,  1072,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1073,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1074,   321,  1075,   323,   324,
     325,   326,  1076,   327,   328,   329,   330,  1077,   790,   332,
    1078,   334,   335,   336,     0,   337,   338,     0,     0,  1079,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   347,
     792,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    27,    28,    29,     0,   360,   361,   793,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,  1080,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1081,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    34,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    36,   426,
     427,   428,  1082,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   795,
      38,     0,   446,   447,    39,   448,   449,   450,   451,   452,
     453,   454,     0,   455,  1083,  1084,     0,     0,   458,   459,
     796,   461,   797,  1085,   463,   464,   798,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,    41,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   799,  1086,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,    45,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,  1087,     0,    46,     0,
       0,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
    1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,  1095,
    1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,  1053,     0,     0,
     128,   129,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,  1054,   140,  1055,  1056,     0,   143,   144,   145,
     146,   147,   148,  1057,   785,   149,   150,   151,   152,  1058,
    1059,   155,     0,   156,   157,   158,   159,   786,     0,   787,
       0,  1060,   163,   164,   165,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    1061,   190,   191,  1062,   193,  1063,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,  1064,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
    1065,   221,   222,   223,   224,   225,   788,  1066,   227,     0,
     228,   229,  1067,   231,     0,   232,     0,   233,   234,    23,
     235,   236,   237,   238,   239,   240,     0,   241,     0,  1068,
    1069,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1070,  1071,     0,  1072,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1073,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1074,   321,  1075,   323,   324,
     325,   326,  1076,   327,   328,   329,   330,  1077,   790,   332,
    1078,   334,   335,   336,     0,   337,   338,     0,     0,  1079,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   347,
     792,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    27,    28,    29,     0,   360,   361,   793,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,  1080,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1081,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    34,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,   426,
     427,   428,  1082,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   795,
       0,     0,   446,   447,    39,   448,   449,   450,   451,   452,
     453,   454,     0,   455,  1083,  1084,     0,     0,   458,   459,
     796,   461,   797,  1085,   463,   464,   798,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,    41,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   799,  1086,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,    45,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,  1087,     0,    46,     0,
       0,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
    1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,  1095,
    1096,  1245,  1047,   815,  1048,  1049,  1050,  1051,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1246,   125,
     126,   127,     0,     0,     0,  1247,     0,  1053,     0,     0,
    1248,   129,   130,     0,   131,   132,   133,  1249,   135,   136,
     137,   138,  1054,  1250,  1055,  1056,     0,   143,   144,   145,
     146,   147,   148,  1057,   785,   149,   150,   151,   152,  1058,
    1059,   155,     0,   156,   157,   158,   159,   786,     0,  1251,
       0,  1252,   163,   164,   165,   166,   167,  1253,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,  1254,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    1061,   190,   191,  1062,   193,  1063,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
    1255,     0,   205,   206,  1064,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
    1065,   221,   222,   223,   224,   225,   788,  1066,   227,     0,
     228,   229,  1067,   231,     0,   232,     0,   233,  1256,     0,
    1257,   236,   237,  1258,  1259,   240,     0,   241,     0,  1068,
    1069,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,  1260,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,  1261,   267,   268,   269,
     270,   271,   272,  1070,  1071,     0,  1072,     0,   276,  1262,
    1263,   279,  1264,   281,   282,   283,   284,   285,   286,     0,
       0,   287,  1265,   289,  1266,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1267,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1074,  1268,  1075,   323,   324,
     325,   326,  1076,   327,   328,  1269,   330,  1077,   790,   332,
    1078,   334,   335,   336,     0,   337,   338,     0,     0,  1079,
     340,   341,     0,     0,   342,   343,   344,  1270,   346,  1271,
     792,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   793,  1272,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,  1080,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,  1273,
     400,   401,   402,  1081,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,  1274,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,  1275,
     427,   428,  1082,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,  1276,   444,   795,
       0,     0,   446,   447,     0,   448,  1277,   450,   451,   452,
     453,   454,     0,   455,  1083,  1084,     0,     0,   458,   459,
     796,   461,   797,  1085,   463,   464,  1278,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,  1086,
    1279,   485,  1280,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,  1087,     0,     0,     0,
       0,     0,     0,  1088,  1089,  1090,     0,     0,     0,     0,
    1091,     0,  1092,  1281,     0,     0,     0,  1093,  1094,  1095,
    1096,   116,  1047,   815,  1048,  1049,     0,  1051,  1052,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,  1053,     0,     0,
     128,   129,   130,     0,   131,   132,   133,   134,   135,   136,
     137,   138,  1054,   140,  1055,  1056,     0,   143,   144,   145,
     146,   147,   148,  1057,   785,   149,   150,   151,   152,  1058,
    1059,   155,     0,   156,   157,   158,   159,   786,     0,   787,
       0,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    1061,   190,   191,  1062,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,    14,    15,   201,   202,   203,   204,
       0,     0,   205,   206,  1064,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
    1065,   221,   222,   223,   224,   225,   788,  1066,   227,     0,
     228,   229,  1067,   231,     0,   232,     0,   233,   234,    23,
     235,   236,   237,   238,   239,   240,     0,   241,     0,  1068,
    1069,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1070,  1071,     0,  1072,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   288,   289,   290,     0,   291,   292,   293,   294,
     295,   296,   297,   298,  1073,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1074,   321,  1075,   323,   324,
     325,   326,     0,   327,   328,   329,   330,  1077,   790,   332,
    1078,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   347,
     792,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    27,    28,    29,     0,   360,   361,   793,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,  1080,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,  1081,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    34,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    36,   426,
     427,   428,  1082,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   795,
      38,     0,   446,   447,    39,   448,   449,   450,   451,   452,
     453,   454,     0,   455,  1083,  1084,     0,     0,   458,   459,
     796,   461,   797,  1085,   463,   464,   798,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,    41,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   799,  1086,
       0,   485,   486,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,    45,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,     0,     0,    46,     0,
       0,     0,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
    1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,  1095,
    1096,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,  1428,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
    1429,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,  1430,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,  1431,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,  1245,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1247,     0,  1053,     0,
       0,  1248,   129,   130,     0,   131,   132,   133,  1249,   135,
     136,   137,   138,  1054,  1250,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
    1251,     0,  1252,   163,   164,   165,   166,   167,  1253,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1254,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,  1256,
       0,  1257,   236,   237,  1258,  1259,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1260,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1261,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
    1262,  1263,   279,  1264,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1265,   289,  1266,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1267,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,  1268,  1075,   323,
     324,   325,   326,  1076,   327,   328,  1269,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,  1270,   346,
    1271,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
    1272,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1273,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1274,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1275,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  1276,   444,
     795,     0,     0,   446,   447,     0,   448,  1277,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,  1278,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,  2282,   485,  1280,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,  1245,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1247,     0,  1053,     0,
       0,  1248,   129,   130,     0,   131,   132,   133,  1249,   135,
     136,   137,   138,  1054,  1250,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
    1251,     0,  1252,   163,   164,   165,   166,   167,  1253,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1254,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,  1256,
       0,  1257,   236,   237,  1258,  1259,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1260,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1261,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
    1262,  1263,   279,  1264,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1265,   289,  1266,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1267,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,  1268,  1075,   323,
     324,   325,   326,  1076,   327,   328,  1269,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,  1270,   346,
    1271,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
    1272,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1273,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1274,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1275,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  1276,   444,
     795,     0,     0,   446,   447,     0,   448,  1277,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,  1278,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,  1280,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,  2336,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124, -1106,
     125,   126,   127,     0,     0,     0,     0, -1106,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430, -1106,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,  1245,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1247,     0,  1053,     0,
       0,  1248,   129,   130,     0,   131,   132,   133,  1249,   135,
     136,   137,   138,  1054,  1250,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
    1251,     0,  1252,   163,   164,   165,   166,   167,  1253,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1254,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,  1256,
       0,  1257,   236,   237,  1258,  1259,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1260,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1261,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
    1262,  1263,   279,  1264,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1265,   289,  1266,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1267,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,  1268,  1075,   323,
     324,   325,   326,  1076,   327,   328,  1269,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,  1270,   346,
    1271,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
    1272,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1273,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1274,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1275,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  1276,   444,
     795,     0,     0,   446,   447,     0,   448,  1277,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,  1278,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,  1280,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,  3072,     0,     0,     0,  1093,  1094,
    1095,  1096,  1245,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1247,     0,  1053,     0,
       0,  1248,   129,   130,     0,   131,   132,   133,  1249,   135,
     136,   137,   138,  1054,  1250,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
    1251,     0,  1252,   163,   164,   165,   166,   167,  1253,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1254,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,  1256,
       0,  1257,   236,   237,  1258,  1259,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1260,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1261,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
    1262,  1263,   279,  1264,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1265,   289,  1266,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1267,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,  1268,  1075,   323,
     324,   325,   326,  1076,   327,   328,  1269,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,  1270,   346,
    1271,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
    1272,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1273,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1274,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1275,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  1276,   444,
     795,     0,     0,   446,   447,     0,   448,  1277,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,  1278,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,  1280,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,  1693,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1708,   815,  1048,  1049,  1050,  1709,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,  1710,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
    1429,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,  2056,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,  2679,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,  2800,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,  3015,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,  3016,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    3017,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,  3018,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  3019,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,  3167,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,  3306,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1713,  1714,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  2193,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  2276,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  2486,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  3070,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,  3016,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    3017,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,  3018,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  3019,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,  3482,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,  3483,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
    3484,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,  3483,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,  1076,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
    3484,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1087,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,     0,     0,     0,
       0,     0,     0,     0,  1415,  1416,     0,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137, -2048,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,  1060,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,  3483,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,  1063,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238, -2048,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252, -2048,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
       0,     0,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289, -2048,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,     0,   327,   328,     0,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
   -2048,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
    3484,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515, -2048,     0,     0,
       0,     0,     0,     0,  1088,  1089,  1090,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,     0,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  2179,  2180,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,     0,     0,     0,
       0,     0,     0,     0,  2181,  2182,     0,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,  1050,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
       0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
    1079,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,     0,     0,     0,
       0,     0,     0,     0,  1415,  1416,     0,     0,     0,     0,
       0,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   116,  1047,   815,  1048,  1049,     0,  1051,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,  1053,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,  1054,   140,  1055,  1056,     0,   143,   144,
     145,   146,   147,   148,  1057,   785,   149,   150,   151,   152,
    1058,  1059,   155,     0,   156,   157,   158,   159,   786,     0,
     787,     0,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1061,   190,   191,  1062,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,  1065,   221,   222,   223,   224,   225,   788,  1066,   227,
       0,   228,   229,  1067,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
    1068,  1069,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1070,  1071,     0,  1072,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1073,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1074,   321,  1075,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1077,   790,
     332,  1078,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   792,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   793,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1080,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,  1081,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,  1082,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     795,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,  1083,  1084,     0,     0,   458,
     459,   796,   461,   797,  1085,   463,   464,   798,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
    1086,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,     0,     0,     0,
       0,     0,     0,   116,  1047,   815,  1048,  1049,  1050,  1051,
    1052,  1091,     0,  1092,     0,     0,     0,     0,  1093,  1094,
    1095,  1096,   117,   118,   119,   120,   121,   122,   123,   124,
       0,   125,   126,   127,     0,     0,     0,     0,     0,  1053,
       0,     0,   128,   129,   130,     0,   131,   132,   133,   134,
     135,   136,   137,     0,  1054,   140,  1055,  1056,     0,   143,
     144,   145,   146,   147,   148,  1057,   785,   149,   150,   151,
     152,  1058,  1059,   155,     0,   156,   157,   158,   159,   786,
       0,   787,     0,  1060,   163,   164,   165,   166,   167,   168,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,  1061,   190,   191,  1062,   193,  1063,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,     0,     0,   205,   206,  1064,   208,   209,     0,
     210,   211,   212,     0,   213,     0,   215,     0,   216,   217,
     218,   219,  1065,   221,   222,   223,   224,   225,   788,  1066,
     227,     0,   228,   229,  1067,   231,     0,   232,     0,   233,
     234,     0,   235,   236,   237,   238,     0,   240,     0,   241,
       0,  1068,  1069,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1070,  1071,     0,  1072,     0,
     276,     0,     0,   279,   280,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   288,   289,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,  1073,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,  1074,   321,  1075,
     323,   324,   325,   326,     0,   327,   328,     0,   330,  1077,
     790,   332,  1078,   334,   335,   336,     0,   337,   338,     0,
       0,  1079,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   347,   792,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     793,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,     0,   376,   377,   378,  1080,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,  1081,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   427,   428,  1082,   430,     0,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   795,     0,     0,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,  1083,  1084,     0,     0,
     458,   459,   796,   461,   797,  1085,   463,   464,   798,   466,
     467,   468,   469,   470,     0,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,  1086,     0,   485,   486,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,     0,     0,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,     0,     0,
       0,     0,     0,     0,     0,  1088,  1089,  1090,     0,   969,
    1346,   815,  1091,     0,  1092,  1051,     0,     0,     0,  1093,
    1094,  1095,  1096,     0,     0,     0,     0,     0,   117,   118,
     119,   120,   121,   122,   123,   124,     0,   125,   126,   127,
       0,     0,     0,   560,     0,     0,     0,     0,   565,   129,
     130,     0,   131,   132,   133,   567,   135,   136,   137,   568,
     569,   570,   571,   572,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,   150,   151,   152,   576,   577,   155,
       0,   156,   157,   158,   159,   579,     0,   581,     0,   583,
     163,   164,   165,   166,   167,   584,   169,   170,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   587,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   589,   190,
     191,   590,   193,     0,   194,     0,   195,   196,   197,   198,
     199,   200,     0,     0,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,   219,   600,   221,
     222,   223,   224,   225,   601,  1347,   227,     0,   228,   229,
     604,   231,     0,   232,     0,   233,   607,     0,   609,   236,
     237,   610,   611,   240,     0,   241,     0,   614,   615,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   617,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   620,   621,   268,   269,   270,   271,
     272,   622,   623,     0,   625,     0,   276,   627,   628,   279,
     629,   281,   282,   283,   284,   285,   286,     0,     0,   287,
     632,   289,   633,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   635,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   636,   637,   638,   323,   324,   325,   639,
       0,   327,   328,   641,   330,     0,   643,   332,   644,   334,
     335,   336,     0,   337,   338,  1348,     0,   339,   340,   341,
       0,     0,   342,   343,   650,   651,   346,   652,   653,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   658,   659,   364,   365,
     660,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,     0,   376,   377,   378,   663,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   666,   400,   401,
     402,   667,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,     0,   669,   417,   418,   419,
     420,   421,   422,   670,   424,   425,     0,   672,   427,   428,
     673,   430,     0,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   675,   444,   676,     0,     0,
     446,   447,     0,   448,   680,   450,   451,   452,   453,   454,
       0,   455,   682,   683,     0,     0,   458,   459,   686,   461,
     687,  1349,   463,   464,   689,   466,   467,   468,   469,   470,
       0,     0,   471,   472,   473,     0,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   694,   695,     0,   485,
     697,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,     0,     0,   495,   496,   497,   498,   499,   500,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     512,   513,   514,   515,     0,     0,     0,     0,     0,     0,
       0,  1350,  1351,  2354,     0,   116,  1047,   815,  1048,  1049,
    2355,  1051,     0,     0,     0,     0,     0,     0,  1096,     0,
       0,     0,     0,     0,   117,   118,   119,   120,   121,   122,
     123,   124,     0,   125,   126,   127,     0,     0,     0,     0,
       0,  1053,     0,     0,   128,   129,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,  1054,   140,  1055,  1056,
       0,   143,   144,   145,   146,   147,   148,  1057,     0,   149,
     150,   151,   152,  1058,  1059,   155,     0,   156,   157,   158,
     159,   160,     0,   161,     0,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,  1061,   190,   191,  1062,   193,     0,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,     0,     0,   205,   206,  1064,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,   219,  1065,   221,   222,   223,   224,   225,
     226,  1066,   227,     0,   228,   229,  1067,   231,     0,   232,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  3036,  1068,  1069,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,  1070,  1071,     0,
    1072,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,  1074,
     321,  1075,   323,   324,   325,   326,     0,   327,   328,   329,
     330,  1077,   331,   332,  1078,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,     0,   376,   377,
     378,  1080,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,     0,   426,   427,   428,  1082,   430,     0,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,     0,     0,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,  1083,  1084,
       0,     0,   458,   459,   460,   461,   462,  1085,   463,   464,
     465,   466,   467,   468,   469,   470,     0,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,  1086,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,     0,     0,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
       0,     0,     0,     0,   116,  1047,   815,  1048,  1049,     0,
    1051,     0,     0,     0,  1091,     0,  2729,     0,     0,     0,
       0,  1093,  1094,   117,   118,   119,   120,   121,   122,   123,
     124,     0,   125,   126,   127,     0,     0,     0,     0,     0,
    1053,     0,     0,   128,   129,   130,     0,   131,   132,   133,
     134,   135,   136,   137,   138,  1054,   140,  1055,  1056,     0,
     143,   144,   145,   146,   147,   148,  1057,     0,   149,   150,
     151,   152,  1058,  1059,   155,     0,   156,   157,   158,   159,
     160,     0,   161,     0,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,  1061,   190,   191,  1062,   193,     0,   194,
       0,   195,   196,   197,   198,   199,   200,     0,     0,   201,
     202,   203,   204,     0,     0,   205,   206,  1064,   208,   209,
       0,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,   219,  1065,   221,   222,   223,   224,   225,   226,
    1066,   227,     0,   228,   229,  1067,   231,     0,   232,     0,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,  1068,  1069,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1070,  1071,     0,  1072,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,     0,   287,   288,   289,   290,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,  1074,   321,
    1075,   323,   324,   325,   326,     0,   327,   328,   329,   330,
    1077,   331,   332,  1078,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,     0,   376,   377,   378,
    1080,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
       0,     0,   417,   418,   419,   420,   421,   422,   423,   424,
     425,     0,   426,   427,   428,  1082,   430,     0,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,     0,     0,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,  1083,  1084,     0,
       0,   458,   459,   460,   461,   462,  1085,   463,   464,   465,
     466,   467,   468,   469,   470,     0,     0,   471,   472,   473,
       0,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,  1086,     0,   485,   486,   487,   488,   489,   490,
     491,   492,   493,     0,     0,   494,     0,     0,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,     0,
       0,     0,     0,   523,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1091,     0,  2729,     0,     0,     0,     0,
    1093,  1094,   117,   118,   119,   120,   121,   122,   123,   124,
       0,   125,   126,   127,     0,     0,     0,     0,     0,     0,
    1005,     0,     0,   129,   130,     0,   131,   132,   133,     0,
     135,   136,   137,   138,   139,     0,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,   150,   151,
     152,   153,   154,   155,     0,   156,   157,   158,   159,   160,
       0,     0,     0,   162,   163,   164,   165,   166,   167,     0,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
       0,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,     0,
     195,   196,   197,   198,   199,   200,     0,     0,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,  -524,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,     0,
     227,  -524,   228,   229,   230,   231,  -524,   232,     0,   233,
       0,     0,     0,   236,   237,   524,     0,   240,     0,   241,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,  -524,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,     0,     0,   287,     0,   289,     0,  -524,   291,   292,
     293,   294,   295,   296,   297,   298,   525,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,     0,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,  -524,   337,   338,     0,
       0,   339,   340,   341,     0,  -524,   342,   343,   344,     0,
     346,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,     0,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,     0,
       0,   417,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   427,   428,   429,   430,     0,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   526,
     444,   445,     0,     0,   446,   447,     0,   448,     0,   450,
     451,   452,   453,   454,     0,   455,   456,   457,     0,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,   470,  -524,     0,   471,   472,   473,     0,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,     0,   485,     0,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,     0,     0,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   523,     0,
     549,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1162,     0,   117,   118,   119,
     120,   121,   122,   123,   124,     0,   125,   126,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
       0,   131,   132,   133,     0,   135,   136,   137,   138,   139,
       0,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,     0,     0,     0,   162,   163,
     164,   165,   166,   167,     0,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,     0,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,     0,   227,     0,   228,   229,   230,
     231,     0,   232,     0,   233,     0,     0,     0,   236,   237,
     524,     0,   240,     0,   241,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   525,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,     0,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,   344,     0,   346,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
       0,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,     0,     0,   427,   428,   429,
     430,     0,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   526,   444,   445,     0,     0,   446,
     447,     0,   448,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,     0,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,   470,     0,
       0,   471,   472,   473,     0,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,     0,   485,     0,
     487,   488,   489,   490,   491,   492,   493,     0,     0,   494,
       0,     0,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   969,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2439,
    3222,     0,   117,   118,   119,   120,   121,   122,   123,   124,
       0,   125,   126,   127,     3,     4,     0,   560,     0,     0,
       0,     0,   565,   129,   130,     0,   131,   132,   133,   567,
     135,   136,   137,   568,   569,   570,   571,   572,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,   150,   151,
     152,   576,   577,   155,     0,   156,   157,   158,   159,   579,
       0,   581,     0,   583,   163,   164,   165,   166,   167,   584,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   587,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   589,   190,   191,   590,   193,     0,   194,     0,
     195,   196,   197,   198,   199,   200,    14,    15,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,   209,     0,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,   219,   600,   221,   222,   223,   224,   225,   601,     0,
     227,     0,   228,   229,   604,   231,     0,   232,     0,   233,
     607,    23,   609,   236,   237,   610,   611,   240,     0,   241,
       0,   614,   615,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,   617,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   620,   621,
     268,   269,   270,   271,   272,   622,   623,     0,   625,     0,
     276,   627,   628,   279,   629,   281,   282,   283,   284,   285,
     286,     0,     0,   287,   632,   289,   633,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   635,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   636,   637,   638,
     323,   324,   325,   639,     0,   327,   328,   641,   330,     0,
     643,   332,   644,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,   650,   651,
     346,   652,   653,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    27,    28,    29,     0,   360,   361,
     658,   659,   364,   365,   660,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,     0,   376,   377,   378,   663,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   666,   400,   401,   402,   667,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    34,
     669,   417,   418,   419,   420,   421,   422,   670,   424,   425,
      36,   672,   427,   428,   673,   430,     0,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   675,
     444,   676,    38,     0,   446,   447,    39,   448,   680,   450,
     451,   452,   453,   454,     0,   455,   682,   683,     0,     0,
     458,   459,   686,   461,   687,     0,   463,   464,   689,   466,
     467,   468,   469,   470,     0,     0,   471,   472,   473,    41,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     970,   695,     0,   485,   697,   487,   488,   489,   490,   491,
     492,   493,     0,     0,   494,     0,    45,   495,   496,   497,
     498,   499,   500,   702,   703,   704,   705,   706,   707,   708,
     709,   710,   711,   712,   512,   513,   514,   515,     0,   116,
      46,   549,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    47,     0,     0,     0,   117,   118,
     119,   120,   121,   122,   123,   124,     0,   125,   126,   127,
       0,     0,     0,     0,     0,     0,     0,     0,   128,   129,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   785,   149,   150,   151,   152,   153,   154,   155,
       0,   156,   157,   158,   159,   786,     0,   787,     0,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,     0,   195,   196,   197,   198,
     199,   200,    14,    15,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,   209,     0,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   788,     0,   227,     0,   228,   229,
     230,   231,     0,   232,     0,   233,   234,    23,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   789,     0,   287,
     288,   289,   290,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   790,   332,   333,   334,
     335,   336,     0,   337,   338,     0,   791,   339,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   347,   792,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      27,    28,    29,     0,   360,   361,   793,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,     0,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   794,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    34,     0,   417,   418,   419,
     420,   421,   422,   423,   424,   425,    36,   426,   427,   428,
     429,   430,     0,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   795,    38,     0,
     446,   447,    39,   448,   449,   450,   451,   452,   453,   454,
       0,   455,   456,   457,     0,     0,   458,   459,   796,   461,
     797,     0,   463,   464,   798,   466,   467,   468,   469,   470,
       0,     0,   471,   472,   473,    41,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   799,   484,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,     0,     0,
     494,     0,    45,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,     0,   116,    46,   549,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     800,     0,     0,     0,   117,   118,   119,   120,   121,   122,
     123,   124,     0,   125,   126,   127,     0,     0,     0,     0,
       0,     0,     0,     0,   128,   129,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   785,   149,
     150,   151,   152,   153,   154,   155,     0,   156,   157,   158,
     159,   786,     0,   787,     0,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     788,     0,   227,     0,   228,   229,   230,   231,     0,   232,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   789,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,     0,   790,   332,   333,   334,   335,   336,     0,   337,
     338,     0,   791,   339,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   347,   792,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   793,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,     0,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   794,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   795,     0,     0,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
       0,     0,   458,   459,   796,   461,   797,     0,   463,   464,
     798,   466,   467,   468,   469,   470,     0,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   799,   484,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,     0,     0,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   800,     0,     0,   117,
     118,   119,   120,   121,   122,   123,   124,     0,   125,   126,
     127,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     129,   130,     0,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,   785,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   786,     0,   787,     0,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   788,     0,   227,     0,   228,
     229,   230,   231,     0,   232,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     287,   288,   289,   290,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   790,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,   344,   345,   346,   347,   792,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   793,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,     0,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   794,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,     0,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,     0,   426,   427,
     428,   429,   430,     0,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   795,     0,
       0,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,   456,   457,     0,     0,   458,   459,   796,
     461,   797,     0,   463,   464,   798,   466,   467,   468,   469,
     470,     0,     0,   471,   472,   473,     0,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,     0,     0,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   116,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,   117,   118,   119,   120,   121,   122,
     123,   124,     0,   125,   126,   127,     0,     0,     0,     0,
       0,     0,     0,     0,   128,   129,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   785,   149,
     150,   151,   152,   153,   154,   155,     0,   156,   157,   158,
     159,   786,     0,   787,     0,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     788,     0,   227,     0,   228,   229,   230,   231,     0,   232,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,     0,   287,   288,   289,   290,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,     0,   790,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   347,   792,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   793,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,     0,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,     0,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   795,     0,     0,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
       0,     0,   458,   459,   796,   461,   797,     0,   463,   464,
     798,   466,   467,   468,   469,   470,     0,     0,   471,   472,
     473,     0,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,     0,   485,   486,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,     0,     0,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     523,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3310,     0,     0,   117,
     118,   119,   120,   121,   122,   123,   124,     0,   125,   126,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   130,     0,   131,   132,   133,     0,   135,   136,   137,
     138,   139,     0,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,     0,     0,     0,
     162,   163,   164,   165,   166,   167,     0,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,     0,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,     0,   195,   196,   197,
     198,   199,   200,    14,    15,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,     0,   227,     0,   228,
     229,   230,   231,     0,   232,     0,   233,     0,    23,     0,
     236,   237,   524,     0,   240,     0,   241,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   525,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,     0,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,   344,     0,   346,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    27,    28,    29,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,     0,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    34,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,    36,     0,   427,
     428,   429,   430,     0,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   526,   444,   445,    38,
       0,   446,   447,    39,   448,     0,   450,   451,   452,   453,
     454,     0,   455,   456,   457,     0,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
     470,     0,     0,   471,   472,   473,    41,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   799,   484,     0,
     485,     0,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,     0,    45,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   523,     0,    46,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,   117,   118,   119,   120,   121,   122,
     123,   124,   886,   125,   126,   127,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   129,   130,     0,   131,   132,
     133,     0,   135,   136,   137,   138,   139,     0,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
     150,   151,   152,   153,   154,   155,     0,   156,   157,   158,
     159,   160,     0,     0,     0,   162,   163,   164,   165,   166,
     167,     0,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,     0,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,     0,   195,   196,   197,   198,   199,   200,     0,     0,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
     209,     0,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,     0,   227,     0,   228,   229,   230,   231,     0,   232,
       0,   233,     0,    23,     0,   236,   237,   524,     0,   240,
       0,   241,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,     0,     0,   287,     0,   289,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   525,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
       0,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
     344,     0,   346,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    27,    28,    29,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,     0,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    34,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,     0,     0,   427,   428,   429,   430,     0,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   526,   444,   445,     0,     0,   446,   447,    39,   448,
       0,   450,   451,   452,   453,   454,     0,   455,   887,   457,
       0,     0,   888,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,   470,     0,     0,   471,   472,
     473,    41,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   799,   484,     0,   485,     0,   487,   488,   489,
     490,   491,   492,   493,     0,     0,   494,     0,    45,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     523,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    47,     0,     0,   117,
     118,   119,   120,   121,   122,   123,   124,     0,   125,   126,
     127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   130,     0,   131,   132,   133,     0,   135,   136,   137,
     138,   139,     0,   141,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,     0,     0,     0,
     162,   163,   164,   165,   166,   167,     0,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,     0,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,     0,   195,   196,   197,
     198,   199,   200,     0,     0,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,   209,     0,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,     0,   227,     0,   228,
     229,   230,   231,     0,   232,     0,   233,     0,    23,     0,
     236,   237,   524,     0,   240,     0,   241,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,     0,     0,
     287,     0,   289,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   525,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,     0,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,   344,     0,   346,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    27,    28,    29,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,     0,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    34,     0,   417,   418,
     419,   420,   421,   422,   423,   424,   425,     0,     0,   427,
     428,   429,   430,     0,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   526,   444,   445,     0,
       0,   446,   447,    39,   448,     0,   450,   451,   452,   453,
     454,     0,   455,   456,   457,     0,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
     470,     0,     0,   471,   472,   473,    41,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   799,   484,     0,
     485,     0,   487,   488,   489,   490,   491,   492,   493,     0,
       0,   494,     0,    45,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,     0,   523,    46,   549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,     0,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   523,     0,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   990,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,     0,   131,   132,   133,     0,   135,   136,
     137,   138,   139,     0,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   153,
     154,   155,     0,   156,   157,   158,   159,   160,     0,     0,
       0,   162,   163,   164,   165,   166,   167,     0,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     228,   229,   230,   231,     0,   232,     0,   233,     0,     0,
       0,   236,   237,   524,     0,   240,     0,   241,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   525,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,     0,   346,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     427,   428,   429,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   526,   444,   445,
       0,     0,   446,   447,     0,   448,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,     0,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
       0,   485,     0,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   523,     0,   549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1467,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   523,     0,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2205,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,     0,   131,   132,   133,     0,   135,   136,
     137,   138,   139,     0,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   153,
     154,   155,     0,   156,   157,   158,   159,   160,     0,     0,
       0,   162,   163,   164,   165,   166,   167,     0,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     228,   229,   230,   231,     0,   232,     0,   233,     0,     0,
       0,   236,   237,   524,     0,   240,     0,   241,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   525,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,     0,   346,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     427,   428,   429,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   526,   444,   445,
       0,     0,   446,   447,     0,   448,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,     0,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
       0,   485,     0,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   523,     0,   549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2439,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   523,     0,   549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2570,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,     0,   131,   132,   133,     0,   135,   136,
     137,   138,   139,     0,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   153,
     154,   155,     0,   156,   157,   158,   159,   160,     0,     0,
       0,   162,   163,   164,   165,   166,   167,     0,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     228,   229,   230,   231,     0,   232,     0,   233,     0,     0,
       0,   236,   237,   524,     0,   240,     0,   241,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   525,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,     0,   346,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     427,   428,   429,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   526,   444,   445,
       0,     0,   446,   447,     0,   448,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,     0,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
       0,   485,     0,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   523,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3216,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   523,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2062,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,     0,   131,   132,   133,     0,   135,   136,
     137,   138,   139,     0,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   153,
     154,   155,     0,   156,   157,   158,   159,   160,     0,     0,
       0,   162,   163,   164,   165,   166,   167,     0,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     228,   229,   230,   231,     0,   232,     0,   233,     0,     0,
       0,   236,   237,   524,     0,   240,     0,   241,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   525,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,     0,   346,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     427,   428,   429,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   526,   444,   445,
       0,     0,   446,   447,     0,   448,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,     0,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
       0,   485,     0,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   523,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2165,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,     0,  2895,  1346,   815,     0,     0,  2038,  1051,     0,
       0,     0,     0,     0,  2039,  2040,     0,  3077,  2041,  2042,
    2043,   117,   118,   119,   120,   121,   122,   123,   124,   556,
     125,   126,   127,   557,   558,   559,  2896,   561,   562,   563,
     564,  2897,   129,   130,   566,   131,   132,   133,  2898,   135,
     136,   137,     0,  1483,  2899,  1485,  1486,   573,   143,   144,
     145,   146,   147,   148,   574,   575,   149,   150,   151,   152,
    1487,  1488,   155,   578,   156,   157,   158,   159,     0,   580,
    2900,   582,  2901,   163,   164,   165,   166,   167,  2902,   169,
     170,   171,   585,   172,   173,   174,   175,   176,   177,   586,
    2903,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1493,   190,   191,  1494,   193,   591,   194,   592,   195,
     196,   197,   198,   199,   200,   593,   594,   201,   202,   203,
     204,   595,   596,   205,   206,  1064,   208,   209,   597,   210,
     211,   212,   598,   213,   214,   215,   599,   216,   217,   218,
     219,     0,   221,   222,   223,   224,   225,     0,   602,   227,
     603,   228,   229,  1495,   231,   605,   232,   606,   233,  2904,
     608,  2905,   236,   237,  2906,  2907,   240,   612,   241,   613,
       0,     0,   244,   245,   616,   246,   247,   248,   249,   250,
     251,   252,  2908,   254,   255,   256,   257,   618,   258,   259,
     260,   261,   262,   263,   264,   619,   265,  2909,     0,   268,
     269,   270,   271,   272,  1501,  1502,   624,  1503,   626,   276,
    2910,  2911,   279,  2912,   281,   282,   283,   284,   285,   286,
     630,   631,   287,  2913,   289,  2914,   634,   291,   292,   293,
     294,   295,   296,   297,   298,  2915,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1510,  2916,  1512,   323,
     324,   325,  2917,   640,   327,   328,  2918,   330,   642,     0,
     332,  1514,   334,   335,   336,   645,   337,   338,   646,   647,
    2919,   340,   341,   648,   649,   342,   343,     0,  2920,   346,
    2921,     0,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   654,   655,   656,   657,   360,   361,     0,
    2922,   364,   365,     0,   367,   368,   369,   661,   370,   371,
     372,   373,   374,   375,   662,   376,   377,   378,  1518,   380,
     381,   382,   383,   664,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   665,   397,   398,
    2923,   400,   401,   402,  1520,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   668,  2924,
     417,   418,   419,   420,   421,   422,  2925,   424,   425,   671,
    2926,   427,   428,  1524,   430,   674,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  2927,   444,
       0,   677,   678,   446,   447,   679,   448,  2928,   450,   451,
     452,   453,   454,   681,   455,  1527,  1528,   684,   685,   458,
     459,     0,   461,     0,   688,   463,   464,  2929,   466,   467,
     468,   469,   470,  2930,   691,   471,   472,   473,   692,   474,
     475,   476,   477,   693,   478,   479,   480,   481,   482,     0,
    1531,   696,   485,  2931,   487,   488,   489,   490,   491,   492,
     493,   698,   699,   494,   700,   701,   495,   496,   497,   498,
     499,   500,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   512,   513,   514,   515,     0,   523,     0,
    2044,  2045,  2046,  2038,  2932,  2933,  2049,  2050,  2051,  2052,
    2039,  2040,     0,     0,  2041,  2042,  2043,   117,   118,   119,
     120,   121,   122,   123,   124,     0,   125,   126,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
       0,   131,   132,   133,     0,   135,   136,   137,   138,   139,
       0,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,     0,     0,     0,   162,   163,
     164,   165,   166,   167,     0,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,     0,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,     0,   195,   196,   197,   198,   199,
     200,     0,     0,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,   209,     0,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,     0,   227,     0,   228,   229,   230,
     231,     0,   232,     0,   233,     0,     0,     0,   236,   237,
     524,     0,   240,     0,   241,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,     0,     0,   287,     0,
     289,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   525,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,     0,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,   344,     0,   346,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
       0,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,     0,     0,   417,   418,   419,   420,
     421,   422,   423,   424,   425,     0,     0,   427,   428,   429,
     430,     0,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   526,   444,   445,     0,     0,   446,
     447,     0,   448,     0,   450,   451,   452,   453,   454,     0,
     455,   456,   457,     0,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,   470,     0,
       0,   471,   472,   473,     0,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,     0,   485,     0,
     487,   488,   489,   490,   491,   492,   493,     0,     0,   494,
       0,     0,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,     0,     0,     0,  2044,  2045,  2046,     0,
    2047,  2048,  2049,  2050,  2051,  2052,  1614,     0,     0,  1615,
       0,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,  1614,     0,     0,  1615,     0,
       0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1623,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,  1625,  1614,     0,     0,  1615,     0,     0,
    1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1623,     0,     0,     0,     0,  1627,     0,     0,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,  1626,
       0,  1614,     0,     0,  1615,     0,     0,     0,  1616,  1617,
    1618,  1619,  1620,  1621,  1622,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,  1623,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1625,
    1614,     0,     0,  1615,  1628,     0,  1626,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,     0,     0,  1630,     0,  1623,     0,
       0,     0,     0,  1627,     0,     0,     0,     0,  1625,     0,
       0,     0,     0,  1628,     0,  1626,     0,     0,     0,  1631,
    1632,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1629,     0,     0,     0,  1633,  1630,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,  1631,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,  1634,  1633,  1630,  1635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,  1631,  1632,  1628,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1634,  1633,     0,  1635,     0,  1629,     0,     0,     0,
       0,  1630,     0,     0,     0,     0,     0,     0,  1636,     0,
       0,  1637,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,  1631,  1632,     0,     0,     0,     0,
    1634,     0,     0,  1635,     0,  1629,     0,     0,     0,  1633,
    1630,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1631,  1632,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,     0,  1634,  1633,     0,
    1635,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1636,     0,     0,  1637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1638,     0,
       0,     0,     0,     0,     0,     0,  1634,     0,     0,  1635,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,     0,     0,  3076,  1638,     0,     0,     0,     0,     0,
    1614,     0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,  1639,     0,     0,  1640,  1641,
    1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,  1623,     0,
       0,     0,  3237,  1638,     0,     0,     0,     0,  1625,     0,
       0,     0,     0,     0,     0,  1626,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,
       0,  3259,  1627,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1614,     0,     0,  1615,
       0,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,
    1645,  1646,  1647,  1648,  1623,     0,     0,     0,  3361,     0,
       0,     0,     0,     0,  1625,  1614,     0,     0,  1615,     0,
       0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,  1623,     0,     0,     0,  3419,  1627,     0,
       0,     0,     0,  1625,  1614,     0,     0,  1615,  1628,     0,
    1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,     0,     0,
    1630,     0,  1623,     0,     0,     0,     0,  1627,     0,     0,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,  1626,
       0,     0,     0,  1631,  1632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,     0,     0,     0,     0,  1627,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,  1628,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,     0,     0,  1634,     0,     0,  1635,
       0,  1629,     0,     0,     0,     0,  1630,  1623,     0,     0,
       0,     0,     0,  1636,     0,     0,  1637,  1625,     0,     0,
       0,     0,     0,  1628,  1626,     0,     0,     0,     0,  1631,
    1632,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1629,     0,     0,     0,  1633,  1630,     0,     0,     0,     0,
       0,  1627,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,  1631,  1632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,  1634,  1633,  1630,  1635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,  1631,  1632,     0,
       0,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,  1634,  1633,     0,  1635,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1636,     0,
       0,  1637,     0,     0,     0,     0,     0,  1628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1634,     0,     0,  1635,  1629,     0,     0,     0,     0,  1630,
       0,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,     0,  1633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,
    1646,  1647,  1648,     0,     0,     0,     0,  3441,  1638,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,  1799,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,  1640,  1641,
    1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,
    2795,     0,  1638,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,  3227,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   555,     0,     0,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,  3403,   117,   118,   119,   120,   121,
     122,   123,   124,   556,   125,   126,   127,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   129,   130,   566,   131,
     132,   133,   567,   135,   136,   137,   568,   569,   570,   571,
     572,   573,   143,   144,   145,   146,   147,   148,   574,   575,
     149,   150,   151,   152,   576,   577,   155,   578,   156,   157,
     158,   159,   579,   580,   581,   582,   583,   163,   164,   165,
     166,   167,   584,   169,   170,   171,   585,   172,   173,   174,
     175,   176,   177,   586,   587,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   589,   190,   191,   590,   193,
     591,   194,   592,   195,   196,   197,   198,   199,   200,   593,
     594,   201,   202,   203,   204,   595,   596,   205,   206,   207,
     208,   209,   597,   210,   211,   212,   598,   213,   214,   215,
     599,   216,   217,   218,   219,   600,   221,   222,   223,   224,
     225,   601,   602,   227,   603,   228,   229,   604,   231,   605,
     232,   606,   233,   607,   608,   609,   236,   237,   610,   611,
     240,   612,   241,   613,   614,   615,   244,   245,   616,   246,
     247,   248,   249,   250,   251,   252,   617,   254,   255,   256,
     257,   618,   258,   259,   260,   261,   262,   263,   264,   619,
     265,   620,   621,   268,   269,   270,   271,   272,   622,   623,
     624,   625,   626,   276,   627,   628,   279,   629,   281,   282,
     283,   284,   285,   286,   630,   631,   287,   632,   289,   633,
     634,   291,   292,   293,   294,   295,   296,   297,   298,   635,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     636,   637,   638,   323,   324,   325,   639,   640,   327,   328,
     641,   330,   642,   643,   332,   644,   334,   335,   336,   645,
     337,   338,   646,   647,   339,   340,   341,   648,   649,   342,
     343,   650,   651,   346,   652,   653,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   654,   655,   656,
     657,   360,   361,   658,   659,   364,   365,   660,   367,   368,
     369,   661,   370,   371,   372,   373,   374,   375,   662,   376,
     377,   378,   663,   380,   381,   382,   383,   664,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   665,   397,   398,   666,   400,   401,   402,   667,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   668,   669,   417,   418,   419,   420,   421,   422,
     670,   424,   425,   671,   672,   427,   428,   673,   430,   674,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   675,   444,   676,   677,   678,   446,   447,   679,
     448,   680,   450,   451,   452,   453,   454,   681,   455,   682,
     683,   684,   685,   458,   459,   686,   461,   687,   688,   463,
     464,   689,   466,   467,   468,   469,   470,   690,   691,   471,
     472,   473,   692,   474,   475,   476,   477,   693,   478,   479,
     480,   481,   482,   694,   695,   696,   485,   697,   487,   488,
     489,   490,   491,   492,   493,   698,   699,   494,   700,   701,
     495,   496,   497,   498,   499,   500,   702,   703,   704,   705,
     706,   707,   708,   709,   710,   711,   712,   512,   513,   514,
     515,   523,     0,     0,     0,     0,     0,     0,     0,     0,
    2073,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,     0,   131,   132,   133,     0,   135,   136,
     137,   138,   139,     0,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   153,
     154,   155,     0,   156,   157,   158,   159,   160,     0,     0,
       0,   162,   163,   164,   165,   166,   167,     0,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     228,   229,   230,   231,     0,   232,     0,   233,     0,     0,
       0,   236,   237,   524,     0,   240,     0,   241,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,     0,
       0,   287,     0,   289,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   525,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,     0,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,     0,   346,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,     0,   417,
     418,   419,   420,   421,   422,   423,   424,   425,     0,     0,
     427,   428,   429,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   526,   444,   445,
       0,     0,   446,   447,     0,   448,     0,   450,   451,   452,
     453,   454,     0,   455,   456,   457,     0,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
       0,   485,     0,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   523,     0,     0,     0,
       0,     0,     0,     0,     0,  2695,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   117,   118,   119,   120,   121,
     122,   123,   124,     0,   125,   126,   127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,     0,   131,
     132,   133,     0,   135,   136,   137,   138,   139,     0,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,     0,     0,     0,   162,   163,   164,   165,
     166,   167,     0,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,     0,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,     0,   195,   196,   197,   198,   199,   200,     0,
       0,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,   209,     0,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,     0,   227,     0,   228,   229,   230,   231,     0,
     232,     0,   233,     0,     0,     0,   236,   237,   524,     0,
     240,     0,   241,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,     0,     0,   287,     0,   289,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   525,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,     0,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,   344,     0,   346,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,     0,   376,
     377,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,     0,     0,   417,   418,   419,   420,   421,   422,
     423,   424,   425,     0,     0,   427,   428,   429,   430,     0,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   526,   444,   445,     0,     0,   446,   447,     0,
     448,     0,   450,   451,   452,   453,   454,     0,   455,   456,
     457,     0,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,   470,     0,     0,   471,
     472,   473,     0,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,     0,   485,     0,   487,   488,
     489,   490,   491,   492,   493,     0,     0,   494,     0,     0,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   969,  1346,   815,     0,     0,     0,  1051,     0,     0,
    2698,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
     126,   127,     0,     0,     0,   560,     0,     0,     0,     0,
     565,   129,   130,     0,   131,   132,   133,   567,   135,   136,
     137,   568,   569,   570,   571,   572,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   150,   151,   152,   576,
     577,   155,     0,   156,   157,   158,   159,   579,     0,   581,
       0,   583,   163,   164,   165,   166,   167,   584,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   587,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     589,   190,   191,   590,   193,     0,   194,     0,   195,   196,
     197,   198,   199,   200,     0,     0,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,   209,     0,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,   219,
     600,   221,   222,   223,   224,   225,   601,  1347,   227,     0,
     228,   229,   604,   231,     0,   232,     0,   233,   607,     0,
     609,   236,   237,   610,   611,   240,     0,   241,     0,   614,
     615,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   617,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   620,   621,   268,   269,
     270,   271,   272,   622,   623,     0,   625,     0,   276,   627,
     628,   279,   629,   281,   282,   283,   284,   285,   286,     0,
       0,   287,   632,   289,   633,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   635,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   636,   637,   638,   323,   324,
     325,   639,     0,   327,   328,   641,   330,     0,   643,   332,
     644,   334,   335,   336,     0,   337,   338,  1348,     0,   339,
     340,   341,     0,     0,   342,   343,   650,   651,   346,   652,
     653,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   658,   659,
     364,   365,   660,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,     0,   376,   377,   378,   663,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   666,
     400,   401,   402,   667,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,     0,   669,   417,
     418,   419,   420,   421,   422,   670,   424,   425,     0,   672,
     427,   428,   673,   430,     0,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   675,   444,   676,
       0,     0,   446,   447,     0,   448,   680,   450,   451,   452,
     453,   454,     0,   455,   682,   683,     0,     0,   458,   459,
     686,   461,   687,  1349,   463,   464,   689,   466,   467,   468,
     469,   470,     0,     0,   471,   472,   473,     0,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   694,   695,
       0,   485,   697,   487,   488,   489,   490,   491,   492,   493,
       0,     0,   494,     0,     0,   495,   496,   497,   498,   499,
     500,   702,   703,   704,   705,   706,   707,   708,   709,   710,
     711,   712,   512,   513,   514,   515,     0,     0,  1614,     0,
       0,  1615,     0,  1350,  1351,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1623,     0,     0,     0,
       0,  2171,     0,     0,     0,     0,  1625,  1614,     0,     0,
    1615,     0,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1623,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  1625,  1614,     0,     0,  1615,
       0,     0,  1626,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,  1625,     0,  2172,     0,     0,     0,
       0,  1626,     0,     0,  1614,     0,     0,  1615,     0,     0,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,  1623,     0,     0,     0,  1897,     0,     0,     0,
       0,     0,  1625,     0,  1614,     0,  1628,  1615,     0,  1626,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,     0,  1630,     0,
       0,     0,  1623,     0,     0,  1933,  1627,     0,     0,     0,
    1934,     0,  1625,     0,     0,  1628,     0,     0,     0,  1626,
       0,  1631,  1632,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,  1633,  1630,     0,     0,
       0,     0,     0,  3510,     0,     0,  1627,     0,     0,     0,
       0,     0,     0,     0,  1628,     0,     0,     0,     0,     0,
    1631,  1632,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,  1634,  1633,  1630,  1635,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,  1631,
    1632,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1634,  1633,     0,  1635,     0,     0,  1629,
       0,     0,     0,     0,  1630,     0,     0,     0,     0,     0,
    1636,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,  1631,  1632,     0,
       0,     0,  1634,     0,     0,  1635,     0,     0,     0,  1629,
       0,     0,  1633,     0,  1630,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1631,  1632,     0,
       0,  1638,     0,     0,     0,     0,     0,     0,     0,     0,
    1634,  3511,  1633,  1635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1634,     0,     0,  1635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2175,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1904,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,     0,     0,     0,     0,  1638,     0,     0,
       0,     0,  1614,     0,     0,  1615,     0,     0,     0,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
    1623,     0,     0,     0,  1939,     0,     0,  1638,     0,     0,
    1625,     0,     0,     0,     0,     0,     0,  1626,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1614,
       0,     0,  1615,     0,     0,     0,  1616,  1617,  1618,  1619,
    1620,  1621,  1622,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,  1623,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1625,     0,     0,
       0,     0,     0,     0,  1626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,
       0,  1627,     0,     0,     0,     0,  1614,     0,     0,  1615,
    1628,     0,     0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,  1630,     0,  1623,     0,     0,     0,  1946,     0,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
       0,  1626,     0,     0,     0,  1631,  1632,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1633,     0,     0,     0,     0,     0,     0,     0,  1627,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1944,  1614,     0,     0,  1615,  1628,     0,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,  1634,     0,
       0,  1635,     0,     0,  1629,     0,     0,     0,     0,  1630,
       0,  1623,     0,     0,     0,  1636,     0,     0,  1637,     0,
       0,  1625,     0,     0,     0,     0,     0,     0,  1626,     0,
       0,     0,  1631,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1633,     0,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
       0,     0,     0,     0,  1628,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,     0,  1634,  1630,     0,  1635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1636,     0,     0,  1637,     0,     0,     0,  1631,
    1632,     0,     0,     0,     0,  1638,     0,     0,  1614,     0,
       0,  1615,     0,     0,  1633,  1616,  1617,  1618,  1619,  1620,
    1621,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2066,     0,     0,     0,     0,  1623,     0,     0,     0,
       0,  1628,     0,     0,     0,     0,  1625,     0,     0,     0,
       0,     0,  1634,  1626,     0,  1635,     0,     0,  1629,     0,
       0,     0,     0,  1630,     0,     0,     0,     0,     0,  1636,
       0,     0,  1637,     0,     0,     0,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,     0,  1631,  1632,     0,     0,
       0,     0,  1638,     0,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,  1643,
    1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,  1628,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,     0,  1630,  1639,
       0,     0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,
    1647,  1648,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1631,  1632,     0,     0,     0,     0,     0,     0,     0,
    1614,     0,     0,  1615,     0,     0,  1633,  1616,  1617,  1618,
    1619,  1620,  1621,  1622,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,  1623,     0,
       0,     0,  2772,     0,     0,     0,     0,     0,  1625,     0,
       0,     0,     0,     0,  1634,  1626,  1639,  1635,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,     0,
       0,  1636,     0,     0,  1637,     0,     0,     0,     0,     0,
       0,     0,  1627,     0,  1614,     0,     0,  1615,     0,     0,
       0,  1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1623,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1625,     0,     0,     0,     0,     0,     0,  1626,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,  1627,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,  1614,     0,     0,  1615,     0,  1628,     0,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,     0,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,     0,     0,
    1630,  1623,     0,     0,  2759,     0,     0,     0,     0,     0,
       0,  1625,     0,     0,     0,     0,     0,     0,  1626,     0,
       0,     0,     0,  1631,  1632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1633,     0,
       0,     0,     0,     0,     0,  1627,     0,     0,     0,     0,
       0,     0,  1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1629,
       0,     0,     0,     0,  1630,     0,  1634,     0,  1639,  1635,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,     0,     0,  1636,     0,     0,  1637,  1631,  1632,     0,
       0,     0,     0,     0,     0,     0,  1614,     0,     0,  1615,
       0,     0,  1633,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1623,     0,     0,     0,     0,     0,
       0,  1628,     0,     0,  1625,     0,     0,     0,     0,     0,
    1634,  1626,     0,  1635,     0,     0,     0,     0,  1629,     0,
       0,     0,     0,  1630,     0,     0,     0,  1636,     0,     0,
    1637,     0,     0,     0,     0,     0,     0,  1614,  1627,     0,
    1615,     0,     0,     0,  1616,  1617,  1809,  1632,  1620,  1621,
    1622,     0,     0,  1638,     0,     0,     0,     0,     0,     0,
       0,  1633,     0,     0,     0,  1623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1625,     0,     0,     0,     0,
       0,     0,  1626,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1634,
       0,     0,  1635,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,  1636,     0,     0,  1637,
       0,     0,     0,     0,     0,     0,     0,  1638,  1614,     0,
       0,  1615,     0,     0,  1628,  1616,  1617,     0,     0,  1620,
    1621,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1629,     0,     0,     0,     0,  1630,     0,     0,     0,
    1639,     0,     0,  1640,  1641,  1642,  1625,  1643,  1644,  1645,
    1646,  1647,  1648,  1626,     0,     0,     0,     0,     0,  1631,
    1632,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1633,     0,     0,     0,     0,     0,
    1627,     0,     0,     0,     0,  1628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,  1629,     0,     0,     0,     0,  1630,     0,     0,
       0,     0,  1634,     0,  1639,  1635,     0,  1640,  1641,  1642,
       0,  1643,  1644,  1645,  1646,  1647,  1648,     0,     0,  1636,
    1631,  1632,  1637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1628,     0,     0,     0,
       0,     0,     0,  1634,     0,     0,  1635,     0,     0,     0,
       0,     0,     0,  1629,     0,     0,     0,     0,  1630,     0,
    1636,     0,     0,  1639,     0,     0,  1640,  1641,  1642,     0,
    1643,  1644,  1645,  1646,  1647,  1648,     0,     0,     0,     0,
       0, -2048, -2048,     0,     0,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,  1633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2048,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1636,     0,     0,     0,     0,     0,     0,     0,     0,
    1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1639,     0,     0,  1640,
    1641,  1642,     0,  1643,  1644,  1645,  1646,  2192,  1648,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,     0,     0,
    1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,  1648,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   555,     0,  2089,     0,     0,     0,  1639,     0,
       0,  1640,  1641,  1642,     0,  1643,  1644,  1645,  1646,  1647,
    1648,   117,   118,   119,   120,   121,   122,   123,   124,   556,
     125,   126,   127,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   129,   130,   566,   131,   132,   133,   567,   135,
     136,   137,   568,   569,   570,   571,   572,   573,   143,   144,
     145,   146,   147,   148,   574,   575,   149,   150,   151,   152,
     576,   577,   155,   578,   156,   157,   158,   159,   579,   580,
     581,   582,   583,   163,   164,   165,   166,   167,   584,   169,
     170,   171,   585,   172,   173,   174,   175,   176,   177,   586,
     587,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   589,   190,   191,   590,   193,   591,   194,   592,   195,
     196,   197,   198,   199,   200,   593,   594,   201,   202,   203,
     204,   595,   596,   205,   206,   207,   208,   209,   597,   210,
     211,   212,   598,   213,   214,   215,   599,   216,   217,   218,
     219,   600,   221,   222,   223,   224,   225,   601,   602,   227,
     603,   228,   229,   604,   231,   605,   232,   606,   233,   607,
     608,   609,   236,   237,   610,   611,   240,   612,   241,   613,
     614,   615,   244,   245,   616,   246,   247,   248,   249,   250,
     251,   252,   617,   254,   255,   256,   257,   618,   258,   259,
     260,   261,   262,   263,   264,   619,   265,   620,   621,   268,
     269,   270,   271,   272,   622,   623,   624,   625,   626,   276,
     627,   628,   279,   629,   281,   282,   283,   284,   285,   286,
     630,   631,   287,   632,   289,   633,   634,   291,   292,   293,
     294,   295,   296,   297,   298,   635,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   636,   637,   638,   323,
     324,   325,   639,   640,   327,   328,   641,   330,   642,   643,
     332,   644,   334,   335,   336,   645,   337,   338,   646,   647,
     339,   340,   341,   648,   649,   342,   343,   650,   651,   346,
     652,   653,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   654,   655,   656,   657,   360,   361,   658,
     659,   364,   365,   660,   367,   368,   369,   661,   370,   371,
     372,   373,   374,   375,   662,   376,   377,   378,   663,   380,
     381,   382,   383,   664,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   665,   397,   398,
     666,   400,   401,   402,   667,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   668,   669,
     417,   418,   419,   420,   421,   422,   670,   424,   425,   671,
     672,   427,   428,   673,   430,   674,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   675,   444,
     676,   677,   678,   446,   447,   679,   448,   680,   450,   451,
     452,   453,   454,   681,   455,   682,   683,   684,   685,   458,
     459,   686,   461,   687,   688,   463,   464,   689,   466,   467,
     468,   469,   470,   690,   691,   471,   472,   473,   692,   474,
     475,   476,   477,   693,   478,   479,   480,   481,   482,   694,
     695,   696,   485,   697,   487,   488,   489,   490,   491,   492,
     493,   698,   699,   494,   700,   701,   495,   496,   497,   498,
     499,   500,   702,   703,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   512,   513,   514,   515,   555,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,   556,   125,   126,   127,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   129,   130,   566,
     131,   132,   133,   567,   135,   136,   137,   568,   569,   570,
     571,   572,   573,   143,   144,   145,   146,   147,   148,   574,
     575,   149,   150,   151,   152,   576,   577,   155,   578,   156,
     157,   158,   159,   579,   580,   581,   582,   583,   163,   164,
     165,   166,   167,   584,   169,   170,   171,   585,   172,   173,
     174,   175,   176,   177,   586,   587,   179,   180,   181,   182,
     183,   184,   588,   186,   187,   188,   589,   190,   191,   590,
     193,   591,   194,   592,   195,   196,   197,   198,   199,   200,
     593,   594,   201,   202,   203,   204,   595,   596,   205,   206,
     207,   208,   209,   597,   210,   211,   212,   598,   213,   214,
     215,   599,   216,   217,   218,   219,   600,   221,   222,   223,
     224,   225,   601,   602,   227,   603,   228,   229,   604,   231,
     605,   232,   606,   233,   607,   608,   609,   236,   237,   610,
     611,   240,   612,   241,   613,   614,   615,   244,   245,   616,
     246,   247,   248,   249,   250,   251,   252,   617,   254,   255,
     256,   257,   618,   258,   259,   260,   261,   262,   263,   264,
     619,   265,   620,   621,   268,   269,   270,   271,   272,   622,
     623,   624,   625,   626,   276,   627,   628,   279,   629,   281,
     282,   283,   284,   285,   286,   630,   631,   287,   632,   289,
     633,   634,   291,   292,   293,   294,   295,   296,   297,   298,
     635,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   636,   637,   638,   323,   324,   325,   639,   640,   327,
     328,   641,   330,   642,   643,   332,   644,   334,   335,   336,
     645,   337,   338,   646,   647,   339,   340,   341,   648,   649,
     342,   343,   650,   651,   346,   652,   653,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   654,   655,
     656,   657,   360,   361,   658,   659,   364,   365,   660,   367,
     368,   369,   661,   370,   371,   372,   373,   374,   375,   662,
     376,   377,   378,   663,   380,   381,   382,   383,   664,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   665,   397,   398,   666,   400,   401,   402,   667,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   668,   669,   417,   418,   419,   420,   421,
     422,   670,   424,   425,   671,   672,   427,   428,   673,   430,
     674,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   675,   444,   676,   677,   678,   446,   447,
     679,   448,   680,   450,   451,   452,   453,   454,   681,   455,
     682,   683,   684,   685,   458,   459,   686,   461,   687,   688,
     463,   464,   689,   466,   467,   468,   469,   470,   690,   691,
     471,   472,   473,   692,   474,   475,   476,   477,   693,   478,
     479,   480,   481,   482,   694,   695,   696,   485,   697,   487,
     488,   489,   490,   491,   492,   493,   698,   699,   494,   700,
     701,   495,   496,   497,   498,   499,   500,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   512,   513,
     514,   515,   555,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,   556,
     125,   126,   127,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   129,   130,   566,   131,   132,   133,   567,   135,
     136,   137,   568,   569,   570,   571,   572,   573,   143,   144,
     145,   146,   147,   148,   574,   575,   149,   150,   151,   152,
     576,   577,   155,   578,   156,   157,   158,   159,   579,   580,
     581,   582,   583,   163,   164,   165,   166,   167,   584,   169,
     170,   171,   585,   172,   173,   174,   175,   176,   177,   586,
     587,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   589,   190,   191,   590,   193,   591,   194,   592,   195,
     196,   197,   198,   199,   200,   593,   594,   201,   202,   203,
     204,   595,   596,   205,   206,   207,   208,   209,   597,   210,
     211,   212,   598,   213,   214,   215,   599,   216,   217,   218,
     219,   600,   221,   222,   223,   224,   225,   601,   602,   227,
     603,   228,   229,   604,   231,   605,   232,   606,   233,   607,
     608,   609,   236,   237,   610,   611,   240,   612,   241,   613,
     614,   615,   244,   245,   616,   246,   247,   248,   249,   250,
     945,   252,   617,   254,   255,   256,   257,   618,   258,   259,
     260,   261,   262,   263,   264,   619,   265,   620,   621,   268,
     269,   270,   271,   272,   622,   623,   624,   625,   626,   276,
     627,   628,   279,   629,   281,   282,   283,   284,   285,   286,
     630,   631,   287,   632,   289,   633,   634,   291,   292,   293,
     294,   295,   296,   297,   298,   635,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   636,   637,   638,   323,
     324,   325,   639,   640,   327,   328,   641,   330,   642,   643,
     332,   644,   334,   335,   336,   645,   337,   338,   646,   647,
     339,   340,   341,   648,   649,   342,   343,   650,   651,   346,
     652,   653,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   654,   655,   656,   657,   360,   361,   658,
     659,   364,   365,   660,   367,   368,   369,   661,   370,   371,
     372,   373,   374,   375,   662,   376,   377,   378,   663,   380,
     381,   382,   383,   664,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   665,   397,   398,
     666,   400,   401,   402,   667,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   668,   669,
     417,   418,   419,   420,   421,   422,   670,   424,   425,   671,
     672,   427,   428,   673,   430,   674,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   675,   444,
     676,   677,   678,   446,   447,   679,   448,   680,   450,   451,
     452,   453,   454,   681,   455,   682,   683,   684,   685,   458,
     459,   686,   461,   687,   688,   463,   464,   689,   466,   467,
     468,   469,   470,   690,   691,   471,   472,   473,   692,   474,
     475,   476,   477,   693,   478,   479,   480,   481,   482,   694,
     695,   696,   485,   697,   487,   488,   489,   490,   491,   492,
     493,   698,   699,   494,   700,   701,   495,   496,   497,   498,
     499,   500,   702,   703,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   512,   513,   514,   515,   555,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,   556,   125,   126,   127,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   129,   130,   566,
     131,   132,   133,   567,   135,   136,   137,   568,   569,   570,
     571,   572,   573,   143,   144,   145,   146,   147,   148,   574,
     575,   149,   150,   151,   152,   576,   577,   155,   578,   156,
     157,   158,   159,   579,   580,   581,   582,   583,   163,   164,
     165,   166,   167,   584,   169,   170,   171,   585,   172,   173,
     174,   175,   176,   177,   586,   587,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   589,   190,   191,   590,
     193,   591,   194,   592,   195,   196,   197,   198,   199,   200,
     593,   594,   201,   202,   203,   204,   595,   596,   205,   206,
     207,   208,   209,   597,   210,   211,   212,   598,   213,   214,
     215,   599,   216,   217,   218,   219,   600,   221,   222,   223,
     224,   225,   601,   602,   227,   603,   228,   229,   604,   231,
     605,   232,   606,   233,   607,   608,   609,   236,   237,   610,
     611,   240,   612,   241,   613,   614,   615,   244,   245,   616,
     246,   247,   248,   249,   250,   251,   252,   617,   254,   255,
     256,   257,   618,   258,   259,   260,   261,   262,   263,   264,
     619,   265,   620,   621,   268,   269,   270,   271,   272,   622,
     623,   624,   625,   626,   276,   627,   628,   279,   629,   281,
     282,   283,   284,   285,   286,   630,   631,   287,   632,   289,
     633,   634,   291,   292,   293,   294,   295,   296,   297,   298,
     635,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   636,   637,   638,   323,   324,   325,   639,   640,   327,
     328,   641,   330,   642,   643,   332,   644,   334,   335,   336,
     645,   337,   338,   646,   647,   339,   340,   341,   648,   649,
     342,   343,   650,   651,   346,   652,   653,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   654,   655,
     656,   657,   360,   361,   658,   659,   364,   365,   660,   367,
     368,   369,   661,   370,   371,   372,   373,   374,   375,   662,
     376,   377,   378,   663,   380,   381,   382,   383,   664,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   665,   397,   398,   666,   400,   401,   402,   667,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   668,   669,   417,   418,   419,   420,   421,
     422,   670,   424,   425,   671,   672,   427,   428,   673,   430,
     674,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   675,   444,   676,   677,   678,   446,   447,
     679,   448,   680,   450,   451,   452,   453,   454,   681,   455,
     682,   683,   684,   685,   458,   459,   686,   461,   687,   688,
     463,   464,   689,   466,   467,   468,   469,   470,   690,   691,
     471,   472,   473,   692,   474,   475,   476,   477,   693,   478,
     479,   480,   481,   482,   694,   695,   696,   485,   697,   487,
     488,   489,   490,   491,   492,   493,   698,   699,   494,   700,
     701,   495,   496,   497,   498,   499,   500,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   512,   513,
     514,   515,   555,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,  2237,   122,   123,   124,   556,
     125,   126,   127,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   129,   130,   566,   131,   132,   133,   567,   135,
     136,   137,   568,   569,   570,   571,   572,   573,   143,   144,
     145,   146,   147,   148,   574,   575,   149,   150,   151,   152,
     576,   577,   155,   578,   156,   157,   158,   159,   579,   580,
     581,   582,   583,   163,   164,   165,   166,   167,   584,   169,
     170,   171,   585,   172,   173,   174,   175,   176,   177,   586,
     587,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   589,   190,   191,   590,   193,   591,   194,   592,   195,
     196,   197,   198,   199,   200,   593,   594,   201,   202,   203,
     204,   595,   596,   205,   206,   207,  2238,   209,   597,   210,
     211,   212,   598,   213,   214,   215,   599,   216,   217,   218,
     219,   600,   221,   222,   223,   224,   225,   601,   602,   227,
     603,   228,   229,   604,   231,   605,   232,   606,   233,   607,
     608,   609,   236,   237,   610,   611,   240,   612,   241,   613,
     614,   615,   244,   245,   616,   246,   247,   248,   249,   250,
     251,   252,   617,   254,   255,   256,   257,   618,   258,   259,
     260,   261,   262,   263,   264,   619,   265,   620,   621,   268,
     269,   270,   271,   272,   622,   623,   624,   625,   626,   276,
     627,   628,   279,   629,   281,   282,   283,   284,   285,   286,
     630,   631,   287,   632,   289,   633,   634,   291,   292,   293,
     294,   295,   296,   297,   298,   635,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   636,   637,   638,   323,
     324,   325,   639,   640,   327,   328,   641,   330,   642,   643,
     332,   644,   334,   335,   336,   645,   337,   338,   646,   647,
     339,   340,   341,   648,   649,   342,   343,   650,   651,   346,
     652,   653,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   654,   655,   656,   657,   360,   361,   658,
     659,   364,   365,   660,   367,   368,   369,   661,   370,   371,
     372,   373,   374,   375,   662,   376,   377,   378,   663,   380,
     381,   382,   383,   664,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   665,   397,   398,
     666,   400,   401,   402,   667,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   668,   669,
     417,   418,   419,   420,   421,  2239,   670,   424,   425,   671,
     672,   427,   428,   673,   430,   674,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   675,   444,
     676,   677,   678,   446,   447,   679,   448,   680,   450,   451,
     452,   453,   454,   681,   455,   682,   683,   684,   685,   458,
     459,   686,   461,   687,   688,   463,   464,   689,   466,   467,
     468,   469,   470,   690,   691,   471,   472,   473,   692,   474,
     475,   476,   477,   693,   478,   479,   480,   481,   482,   694,
     695,   696,   485,   697,   487,   488,   489,   490,   491,   492,
     493,   698,   699,   494,   700,   701,   495,   496,   497,   498,
     499,   500,   702,   703,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   512,   513,   514,   515,   969,     0,   815,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,   560,     0,     0,     0,     0,   565,   129,   130,     0,
     131,   132,   133,   567,   135,   136,   137,   568,   569,   570,
     571,   572,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   576,   577,   155,     0,   156,
     157,   158,   159,   579,     0,   581,     0,   583,   163,   164,
     165,   166,   167,   584,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   587,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   589,   190,   191,   590,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   600,   221,   222,   223,
     224,   225,   601,  1347,   227,     0,   228,   229,   604,   231,
       0,   232,     0,   233,   607,     0,   609,   236,   237,   610,
     611,   240,     0,   241,     0,   614,   615,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   617,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   620,   621,   268,   269,   270,   271,   272,   622,
     623,     0,   625,     0,   276,   627,   628,   279,   629,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   632,   289,
     633,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     635,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   636,   637,   638,   323,   324,   325,   639,     0,   327,
     328,   641,   330,     0,   643,   332,   644,   334,   335,   336,
       0,   337,   338,  1348,     0,   339,   340,   341,     0,     0,
     342,   343,   650,   651,   346,   652,   653,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   658,   659,   364,   365,   660,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   663,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   666,   400,   401,   402,   667,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   669,   417,   418,   419,   420,   421,
     422,   670,   424,   425,     0,   672,   427,   428,   673,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   675,   444,   676,     0,     0,   446,   447,
       0,   448,   680,   450,   451,   452,   453,   454,     0,   455,
     682,   683,     0,     0,   458,   459,   686,   461,   687,  1349,
     463,   464,   689,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   694,   695,     0,   485,   697,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   512,   513,
     514,   515,   969,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     3,     4,     0,   560,     0,     0,     0,
       0,   565,   129,   130,     0,   131,   132,   133,   567,   135,
     136,   137,   568,   569,   570,   571,   572,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     576,   577,   155,     0,   156,   157,   158,   159,   579,     0,
     581,     0,   583,   163,   164,   165,   166,   167,   584,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     587,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   589,   190,   191,   590,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   600,   221,   222,   223,   224,   225,   601,     0,   227,
       0,   228,   229,   604,   231,     0,   232,     0,   233,   607,
       0,   609,   236,   237,   610,   611,   240,     0,   241,     0,
     614,   615,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   617,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   620,   621,   268,
     269,   270,   271,   272,   622,   623,     0,   625,     0,   276,
     627,   628,   279,   629,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   632,   289,   633,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   635,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   636,   637,   638,   323,
     324,   325,   639,     0,   327,   328,   641,   330,     0,   643,
     332,   644,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   650,   651,   346,
     652,   653,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   658,
     659,   364,   365,   660,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   663,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     666,   400,   401,   402,   667,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,   669,
     417,   418,   419,   420,   421,   422,   670,   424,   425,     0,
     672,   427,   428,   673,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   675,   444,
     676,     0,     0,   446,   447,     0,   448,   680,   450,   451,
     452,   453,   454,     0,   455,   682,   683,     0,     0,   458,
     459,   686,   461,   687,     0,   463,   464,   689,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   694,
     695,     0,   485,   697,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   702,   703,   704,   705,   706,   707,   708,   709,
     710,   711,   712,   512,   513,   514,   515,   116,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,   128,   129,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     785,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   786,     0,   787,     0,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   788,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,     0,   287,   288,   289,
     290,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   790,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   347,   792,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   793,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   795,     0,     0,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   796,   461,   797,     0,
     463,   464,   798,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   116,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,   128,   129,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
     161,     0,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,     0,   287,   288,   289,   290,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
     426,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,     0,     0,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,  1742,   156,
     157,   158,   159,   160,     0,     0,  1743,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,  1744,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,  1745,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  1746,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,  1747,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,  1748,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,  1742,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,  1744,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,  1745,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,  2319,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,  1747,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,  1748,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     3,     4,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,   550,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   551,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,   791,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     896,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,   791,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,   943,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,  1950,     0,     0,     0,     0,  1951,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,  1958,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,  1959,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
    1960,   448,     0,   450,  1961,   452,  1962,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,  1963,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   815,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,   822,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   823,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   824,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   825,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   826,   457,     0,     0,   827,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   859,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     891,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   894,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     898,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   931,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     959,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   962,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,  1005,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,  1028,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,   822,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   826,   457,     0,     0,   827,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  1305,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    1307,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  1310,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    1312,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,   549,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  2233,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,  1479,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1480,     0,     0,  -785,
       0,  1481,   129,   130,     0,   131,   132,   133,  1482,   135,
     136,   137,     0,  1483,  1484,  1485,  1486,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
    1487,  1488,   155,     0,   156,   157,   158,   159,     0,     0,
    1489,     0,  1490,   163,   164,   165,   166,   167,  1491,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1492,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1493,   190,   191,  1494,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,     0,   221,   222,   223,   224,   225,     0,     0,   227,
       0,   228,   229,  1495,   231,     0,   232,     0,   233,  1496,
       0,  1497,   236,   237,  -785,  1498,   240,     0,   241,     0,
       0,     0,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1499,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1500,     0,   268,
     269,   270,   271,   272,  1501,  1502,     0,  1503,     0,   276,
    1504,  1505,   279,  1506,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1507,   289,  1508,     0,   291,   292,   293,
     294,   295,   296,   297,   298,  1509,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1510,  1511,  1512,   323,
     324,   325,     0,     0,   327,   328,  1513,   330,     0,     0,
     332,  1514,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,  1515,   346,
    1516,     0,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,     0,
    1517,   364,   365,     0,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1518,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1519,   400,   401,   402,  1520,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1521,
     417,   418,   419,   420,   421,   422,  1522,   424,   425,     0,
    1523,   427,   428,  1524,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,  1525,   444,
       0,     0,     0,   446,   447,     0,   448,  1526,   450,   451,
     452,   453,   454,     0,   455,  1527,  1528,     0,     0,   458,
     459,     0,   461,     0,     0,   463,   464,  1529,   466,   467,
     468,   469,   470,  1530,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,     0,
    1531,     0,   485,  1532,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   523,     0,   549,     0,     0,     0,     0,     0,
       0,     0,     0,   512,   513,   514,   515,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    2974,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   837,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   838,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   839,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   840,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   841,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   955,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   839,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   841,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  1314,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    1325,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
       0,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    1854,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  2220,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,     0,   131,   132,   133,     0,   135,
     136,   137,   138,   139,     0,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,     0,
       0,     0,   162,   163,   164,   165,   166,   167,     0,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,     0,   227,
       0,   228,   229,   230,   231,     0,   232,     0,   233,     0,
       0,     0,   236,   237,   524,     0,   240,     0,   241,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
    2235,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
       0,     0,   287,     0,   289,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   525,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,     0,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,     0,   346,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   427,   428,   429,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   526,   444,
     445,     0,     0,   446,   447,     0,   448,     0,   450,   451,
     452,   453,   454,     0,   455,   456,   457,     0,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,   485,     0,   487,   488,   489,   490,   491,   492,
     493,     0,     0,   494,     0,     0,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,  1479,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,  1480,     0,     0,     0,     0,  1481,   129,   130,     0,
     131,   132,   133,  1482,   135,   136,   137,     0,  1483,  1484,
    1485,  1486,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,  1487,  1488,   155,     0,   156,
     157,   158,   159,     0,     0,  1489,     0,  1490,   163,   164,
     165,   166,   167,  1491,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,  1492,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,  1493,   190,   191,  1494,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
    1064,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,     0,   221,   222,   223,
     224,   225,     0,     0,   227,     0,   228,   229,  1495,   231,
       0,   232,     0,   233,  1496,     0,  1497,   236,   237,     0,
    1498,   240,     0,   241,     0,     0,     0,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,  1499,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,  1500,     0,   268,   269,   270,   271,   272,  1501,
    1502,     0,  1503,     0,   276,  1504,  1505,   279,  1506,   281,
     282,   283,   284,   285,   286,     0,     0,   287,  1507,   289,
    1508,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1509,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,  1510,  1511,  1512,   323,   324,   325,     0,     0,   327,
     328,  1513,   330,     0,     0,   332,  1514,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,  1515,   346,  1516,     0,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,     0,  1517,   364,   365,     0,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,  1518,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,  1519,   400,   401,   402,  1520,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,  1521,   417,   418,   419,   420,   421,
     422,  1522,   424,   425,     0,  1523,   427,   428,  1524,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,  1525,   444,     0,     0,     0,   446,   447,
       0,   448,  1526,   450,   451,   452,   453,   454,     0,   455,
    1527,  1528,     0,     0,   458,   459,     0,   461,     0,     0,
     463,   464,  1529,   466,   467,   468,   469,   470,  1530,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,     0,  1531,     0,   485,  1532,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,  1479,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   512,   513,
     514,   515,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,  1480,     0,     0,     0,     0,  1481,   129,   130,     0,
     131,   132,   133,  1482,   135,   136,   137,     0,  1483,  1484,
    1485,  1486,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,  1487,  1488,   155,     0,   156,
     157,   158,   159,     0,     0,  1489,     0,  1490,   163,   164,
     165,   166,   167,  1491,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,  1492,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,  1493,   190,   191,  1494,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
    1064,   208,   209,     0,   210,   211,   212,     0,  1836,   214,
     215,     0,   216,   217,   218,   219,     0,   221,   222,   223,
     224,   225,     0,     0,   227,     0,   228,   229,  1495,   231,
       0,   232,     0,   233,  1496,     0,  1497,   236,   237,     0,
    1498,   240,     0,   241,     0,     0,     0,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,  1499,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,  1500,     0,   268,   269,   270,   271,   272,  1501,
    1502,     0,  1503,     0,   276,  1504,  1505,   279,  1506,   281,
     282,   283,   284,   285,   286,     0,     0,   287,  1507,   289,
    1508,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    1509,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,  1510,  1511,  1512,   323,   324,   325,     0,     0,   327,
     328,  1513,   330,     0,     0,   332,  1514,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,  1515,   346,  1516,     0,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,     0,  1517,   364,   365,     0,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,  1518,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,  1519,   400,   401,   402,  1520,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,  1521,   417,   418,   419,   420,   421,
     422,  1522,   424,   425,     0,  1523,   427,   428,  1524,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,  1525,   444,     0,     0,     0,   446,   447,
       0,   448,  1526,   450,   451,   452,   453,   454,     0,   455,
    1527,  1528,     0,     0,   458,   459,     0,   461,     0,     0,
     463,   464,  1529,   466,   467,   468,   469,   470,  1530,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,     0,  1531,     0,   485,  1532,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,  3145,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   512,   513,
     514,   515,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,  2896,     0,     0,     0,     0,  2897,   129,   130,     0,
     131,   132,   133,  2898,   135,   136,   137,     0,  1483,  2899,
    1485,  1486,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,  1487,  1488,   155,     0,   156,
     157,   158,   159,     0,     0,  2900,     0,  2901,   163,   164,
     165,   166,   167,  2902,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,  2903,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,  1493,   190,   191,  1494,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
    1064,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,     0,   221,   222,   223,
     224,   225,     0,     0,   227,     0,   228,   229,  1495,   231,
       0,   232,     0,   233,  2904,     0,  2905,   236,   237,  2906,
    2907,   240,     0,   241,     0,     0,     0,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,  2908,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,  2909,     0,   268,   269,   270,   271,   272,  1501,
    1502,     0,  1503,     0,   276,  2910,  2911,   279,  2912,   281,
     282,   283,   284,   285,   286,     0,     0,   287,  2913,   289,
    2914,     0,   291,   292,   293,   294,   295,   296,   297,   298,
    3146,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,  1510,  2916,  1512,   323,   324,   325,     0,     0,   327,
     328,  2918,   330,     0,     0,   332,  1514,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,  2920,   346,  2921,     0,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,     0,  2922,   364,   365,     0,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,   377,   378,  1518,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,  2923,   400,   401,   402,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,  2924,   417,   418,   419,   420,   421,
     422,     0,   424,   425,     0,  2926,   427,   428,  1524,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,  3147,   444,     0,     0,     0,   446,   447,
       0,   448,  2928,   450,   451,   452,   453,   454,     0,   455,
    1527,  1528,     0,     0,   458,   459,     0,   461,     0,     0,
     463,   464,  2929,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,     0,  1531,     0,   485,  2931,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   523,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   512,   513,
     514,   515,     0,     0,     0,     0,   117,   118,   119,   120,
     121,   122,   123,   124,     0,   125,   126,   127,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,     0,
     131,   132,   133,     0,   135,   136,   137,   138,   139,     0,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,     0,     0,     0,   162,   163,   164,
     165,   166,   167,     0,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,     0,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,     0,   195,   196,   197,   198,   199,   200,
       0,     0,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,   209,     0,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,     0,   227,     0,   228,   229,   230,   231,
       0,   232,     0,   233,     0,     0,     0,   236,   237,   524,
       0,   240,     0,   241,     0,   242,   243,     0,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,     0,     0,   287,     0,   289,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     525,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,     0,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,     0,   346,     0,   348,   349,   350,   351,
     352,   353,   354,     0,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,     0,
     376,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   400,   401,   402,   403,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,     0,   417,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   427,   428,   429,   430,
       0,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   526,   444,   445,     0,     0,   446,   447,
       0,   448,     0,   450,   451,   452,   453,   454,     0,   455,
     456,   457,     0,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,   470,     0,     0,
     471,   472,   473,     0,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,     0,   485,     0,   487,
     488,   489,   490,   491,   492,   493,     0,     0,   494,     0,
       0,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,  1769,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,   118,   119,   120,   121,   122,   123,   124,     0,
     125,   126,   127,     0,     0,     0,  1480,     0,     0,     0,
       0,  1481,   129,   130,     0,   131,   132,   133,  1482,   135,
     136,   137,     0,  1483,  1484,  1485,  1486,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,   150,   151,   152,
    1487,  1488,   155,     0,   156,   157,   158,   159,     0,     0,
    1489,     0,  1490,   163,   164,   165,   166,   167,  1491,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,     0,
    1492,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,  1493,   190,   191,  1494,   193,     0,   194,     0,   195,
     196,   197,   198,   199,   200,     0,     0,   201,   202,   203,
     204,     0,     0,   205,   206,  1064,   208,   209,     0,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
     219,     0,   221,   222,   223,   224,   225,     0,     0,   227,
       0,   228,   229,  1495,   231,     0,   232,     0,   233,  1496,
       0,  1497,   236,   237,     0,  1498,   240,     0,   241,     0,
       0,     0,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,  1499,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,  1500,     0,   268,
     269,   270,   271,   272,  1501,  1502,     0,  1503,     0,   276,
    1504,  1505,   279,  1506,   281,   282,   283,   284,   285,   286,
       0,     0,   287,  1507,   289,  1508,     0,   291,   292,   293,
     294,   295,   296,   297,   298,     0,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,  1510,  1511,  1512,   323,
     324,   325,     0,     0,   327,   328,  1513,   330,     0,     0,
     332,  1514,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,  1515,   346,
    1516,     0,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,     0,
    1517,   364,   365,     0,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,     0,   376,   377,   378,  1518,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
    1519,   400,   401,   402,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,     0,  1521,
     417,   418,   419,   420,   421,   422,     0,   424,   425,     0,
    1523,   427,   428,  1524,   430,     0,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,     0,   444,
       0,     0,     0,   446,   447,     0,   448,  1526,   450,   451,
     452,   453,   454,     0,   455,  1527,  1528,     0,     0,   458,
     459,     0,   461,     0,     0,   463,   464,  1529,   466,   467,
     468,   469,   470,     0,     0,   471,   472,   473,     0,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,     0,
    1531,     0,   485,  1532,   487,   488,   489,   490,   491,   492,
     493,     0,     1,   494,     0,     0,   495,   496,   497,   498,
     499,   500,     2,     0,     3,     4,     0,     0,     0,     0,
       1,     0,     0,   512,   513,   514,   515,     0,     0,     0,
       2,     0,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     8,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,    11,     0,
     746,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       0,    13,     0,     0,     0,     0,    11,     0,   746,     0,
       0,     0,     0,     0,     0,     0,    14,    15,     0,    13,
       0,     0,     0,     0,     0,     0,     0,   747,     0,     0,
       0,     0,     0,    18,    14,    15,     0,     0,     0,     0,
       0,    19,     0,     0,     0,   747,     0,     0,     0,     0,
       0,    18,     0,     0,     0,     0,     0,    22,     0,    19,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    22,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,     0,     0,     0,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,    28,    29,     0,     0,     0,
       0,     0,    30,     0,     0,    31,     0,     0,     0,     0,
       0,     0,    27,    28,    29,     0,     0,     0,     0,     0,
      30,     0,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,    34,
       0,    33,     0,     0,     0,     0,    35,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,    34,     0,     0,
      37,     0,     0,     0,    35,     0,     0,     0,    36,     0,
       0,     0,    38,     0,     0,     0,    39,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,    39,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,    40,    43,     0,     0,     0,     0,
      44,     0,     0,     0,   748,     0,     0,    41,     0,     0,
       0,     0,     0,    43,     0,     0,    45,     0,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   749,     0,     0,     0,    46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47
};

static const yytype_int16 yycheck[] =
{
       7,   516,     0,    47,     0,    89,    90,     0,     0,    16,
     883,   895,     0,    87,     0,     0,    23,     0,     0,     0,
      23,   925,   835,   741,   809,   995,   858,  1226,  1239,  1037,
    1303,  1696,     7,  1225,   904,    20,   749,   977,   930,    16,
    1200,    91,    38,  1423,  1160,   986,  1213,  1658,    23,   986,
    1469,  1577,    20,    91,   960,   986,  1084,  2176,   986,  1279,
    2166,    17,  1800,  1992,  1202,   964,  1166,     0,     0,  2231,
     977,  1205,  2650,     0,  1611,  1612,    39,  2279,  2280,  2281,
      46,     0,    89,    90,     7,     0,    89,    90,    20,  2145,
       0,  2147,  1230,     0,     0,  2341,     0,     0,     0,     0,
      23,     0,    23,     0,  1328,   895,   102,   897,  1993,   899,
      35,     0,     0,     0,    89,    90,  1127,  2612,  2612,     0,
    2227,  1132,  1092,  2648,     0,  2111,     0,     0,  2165,  2664,
    2486,   749,  2671,   805,  1004,  2298,    26,   748,   810,   742,
    2568,     5,     0,     0,  2572,     5,     0,   110,  1822,  1825,
       0,  1716,   984,    13,    14,  1714,  2983,  1935,    63,  1968,
       3,   767,     5,     5,  1828,    22,    89,    90,    89,    90,
    1662,     5,  1981,     5,     5,    32,  2310,    34,    35,    13,
      14,    13,    14,     5,     5,     5,     5,     9,  2309,     5,
      47,     5,    13,    14,     9,    52,    63,     5,  1138,     5,
       9,     5,   987,     9,    61,    13,    14,    45,     5,  2316,
       5,    82,  1038,  2305,   878,  1058,  1059,     3,    75,    45,
      13,    14,    93,    13,    14,    55,    82,    84,     5,    86,
       5,     5,  1075,    74,     5,     5,     5,    93,  1246,    11,
     124,    98,   122,   100,    16,   171,   100,  1255,    34,    35,
     100,   119,   172,     4,   111,   104,   139,   873,     9,  1091,
    2367,  2368,  2824,  2370,   977,    90,     3,     4,     5,   126,
     127,   128,     9,  1143,  1214,    80,   122,  1217,  1218,    90,
     137,  3150,   190,  2870,   107,   171,   143,   802,    11,   180,
       4,   290,   993,    16,   151,     9,   153,   154,   287,     5,
     117,    53,   878,    11,   129,  2942,    63,    15,    16,  2969,
     167,   107,  1138,  2438,   171,   122,   988,   312,   129,   289,
     107,    40,  1438,    46,   183,   993,  2986,   168,  1000,  2531,
     137,   180,   212,   275,   119,   850,    30,    64,    46,   192,
     197,   171,  1615,    13,    38,    75,    30,    74,   312,    19,
     379,  3347,  1062,  1469,    38,  1522,   213,    80,  1961,  1962,
    1963,    31,  1194,   119,  3314,  2421,    11,   978,  1078,  3281,
      15,    16,    80,  2582,   192,    45,    46,  1190,  1191,   388,
     117,  2530,   239,  2532,   170,   161,   172,  1213,   416,   132,
     226,    30,   120,   430,   148,   106,  2134,   117,   120,    38,
    2978,  1905,   366,   356,   165,    30,  3482,  1311,   503,   249,
     295,  2989,  1285,    41,  3391,   509,   476,    30,  1555,  2581,
     503,   516,   516,   272,   176,   108,  2805,  1564,  2807,   108,
    2925,   514,  1936,   386,   274,   289,   272,  2556,   108,   289,
     500,   193,   479,   278,  3440,   199,   198,  3523,    13,    14,
     206,  1343,   357,  3280,   147,  2980,   175,   314,   315,   316,
      85,   237,   279,  1038,  3376,   322,   194,  3379,   325,    94,
     190,  2578,   194,  2580,  2683,   132,  1749,  1303,   337,  1180,
      63,   218,   307,   213,   236,   272,   365,   328,  1189,   518,
     357,  3441,  2478,   118,   279,   244,   307,   354,   126,   352,
    1528,  3478,   428,   240,   358,   514,   363,   366,   358,   451,
     286,  3148,   191,   240,   509,   514,   272,  3177,   274,   132,
     327,  3108,   379,     8,   217,   514,    11,   295,  1192,   386,
      15,    16,  3094,   390,    19,    20,    21,   355,   534,   250,
    3127,   284,   428,   400,   514,   509,  3415,  2681,  1154,   260,
    3377,  1167,   172,   389,   274,   412,  2677,   428,   393,   416,
     403,   404,   323,   454,  3476,   190,  1985,  2716,  2660,   244,
     454,   451,   428,   279,   370,   413,   425,   503,   203,   436,
    2509,   588,  1097,  1743,  1804,  2111,  2693,   413,   456,   472,
     516,   289,   449,   416,   514,   452,   421,  1429,   455,  2377,
     357,   166,   295,   460,   445,   451,   514,  2732,    33,  1327,
     421,   588,  2149,   518,  1332,   451,  1192,   274,  2183,   476,
    1338,   370,   476,  2182,  1897,  2434,   476,   284,   108,  3164,
    1443,  3010,  1345,   518,    59,   514,  1909,  2311,  1213,   391,
    1864,  1840,  2318,   500,  1487,  1488,  1459,   463,    59,  2175,
     514,   518,  1660,    40,   514,  3150,  3150,   514,   522,   517,
     517,   515,   522,   517,   478,   515,  1939,   517,  1879,  1512,
     512,  3099,   514,  1946,   516,  2339,  3104,  2169,   464,  2841,
     514,   478,   514,   514,   514,  2848,   500,   514,   308,   272,
     505,   506,   514,   514,   514,   514,  1522,  3053,   514,   448,
     514,  3279,   396,   500,   513,   749,   514,   512,   514,  1982,
     514,   516,   396,  1986,  1415,  1416,   800,   514,  3378,   514,
    1421,   514,  1554,  1555,   514,    30,  2972,  1345,  1303,  1572,
    1573,  1334,  1564,  1344,  1604,  1605,  1606,   514,   510,   514,
     514,  2014,   749,   514,   514,   514,  1578,  1415,  1416,  3288,
     518,   444,  3287,  1421,   505,   506,   800,   396,   454,  2961,
     171,    11,   476,   748,  1436,   514,   163,   415,   505,   506,
    1990,   265,   392,   448,   357,  1607,    11,   402,  2707,   517,
     405,   749,   789,   163,  1494,  2822,   500,   510,   175,  1615,
      11,   505,   506,   800,    15,    16,    46,   800,   848,   507,
     508,   509,   510,   386,  1514,   453,   291,   149,   509,   883,
     848,  3389,    82,   454,   789,   516,   748,     0,   514,  2422,
    2423,  2424,  2425,    93,   244,   800,   320,   132,   835,   836,
      80,    26,  1948,  1773,   177,   464,  3240,    32,  3242,   514,
    1550,  1849,  2828,  1783,   518,    80,  1786,   188,   189,  3374,
     230,   858,  3080,   274,  3082,  2784,  2741,   406,   200,  2744,
    2967,  2746,   507,   508,   509,   510,   789,   161,   789,  1985,
     868,     5,   868,   514,   271,   868,   868,   800,   514,   800,
     868,   551,   868,   868,  1768,   868,   868,   868,   856,  2627,
     853,  2629,  1014,   859,   784,   902,   903,   240,  1020,   906,
     244,   908,  1417,   314,   315,   316,   244,   244,  3433,  1627,
     873,  2135,   837,   838,  3318,   840,   108,   258,   259,   468,
    3415,  3415,   515,  1749,  3502,   518,    82,  1011,  1801,  1802,
    1803,  2875,   478,   244,  1018,   868,   868,    93,  1830,  2883,
    1880,   868,   137,   237,  3190,  1956,  2062,  1522,  3110,   868,
     370,  1741,  2478,   868,   500,   377,  1862,   964,   868,  2496,
    1866,   868,   868,  1869,   868,   868,   868,   868,   379,   868,
     977,   868,  1871,  1880,   930,  3203,   983,   984,  1768,   868,
     868,   868,   989,   352,  3090,   992,   993,   868,   995,   996,
     997,   998,   868,   978,   868,   868,   515,    26,  1788,   518,
       5,  1702,   274,  1793,  1011,   416,   226,   279,  1011,     4,
     132,  1018,    13,    14,     9,  1018,   501,   502,   503,  2399,
     505,   506,   507,   508,   509,   510,   370,   370,   448,  1036,
    1037,  1038,   370,   370,   375,   376,  1011,   159,   449,   515,
    1615,     6,   518,  1018,   377,    10,   978,  2320,  1092,   460,
    1057,  2151,   272,    18,  2154,  2254,  3340,  3341,  2796,   370,
     202,  1779,  2282,    74,   336,   161,  1784,   513,    33,  1076,
     166,  1897,    37,   743,   251,  3004,   342,   420,   524,   422,
    1087,  1088,  1089,  1909,  1091,  1092,  2612,  1094,  1011,  2205,
    1011,   416,   202,  3255,   514,  1018,    11,  1018,   293,   433,
      15,    16,   161,   514,   448,   448,   117,   166,   137,  3393,
     448,   448,  1944,  1939,     4,   381,  1123,  1094,   338,     9,
    1946,   513,   374,  1173,  1174,  2263,  1176,   132,    71,    72,
    3332,    46,   524,  1140,  1141,  1173,  1174,   448,  1176,   478,
    1887,   237,   514,     4,  1891,   512,     4,  1894,     9,   516,
     416,     9,   274,   466,   159,   350,  1982,   279,   342,   354,
    1986,   500,   284,   258,   259,    80,  1992,  1880,  1175,   389,
     514,  2141,  1179,  1180,  1749,   514,   514,   514,   237,   478,
    2453,   512,  1189,  1190,  1191,   516,   377,  1194,  2014,   859,
     286,   386,  2024,  2327,   512,   514,   514,   381,   516,  2333,
     466,   500,   171,   514,  1167,  1428,  1213,  1430,  1431,  1910,
    1911,  1912,  1913,  1914,  1915,   514,   514,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,   286,   166,   512,
    1019,   451,   416,   516,  1023,    13,    14,   515,   177,  1246,
     518,   514,  1910,  1911,  1912,  1913,  1914,  1915,  1255,   514,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,
     370,   514,   457,   274,   293,   514,  1229,  2099,   279,   274,
     171,   381,  1279,  2146,   279,  1009,    13,    14,     5,   284,
     375,   376,   466,   514,   505,   506,   507,   508,   509,   510,
     177,  2710,   514,  1027,    25,    26,  1303,  1031,    13,    14,
     515,   240,  2828,   518,  1302,   420,   416,   422,   837,   838,
    1302,   840,  1319,   435,  1302,   515,  1302,   328,   518,   507,
    2436,  1328,  1897,  2439,   446,   354,   515,   356,  2234,   518,
    2236,   500,  3494,   344,  1909,   823,   824,   825,  1345,  2612,
     132,   515,  1319,   514,   518,   314,   315,   316,   515,   515,
     514,   518,   518,   240,   171,  1362,   466,   386,   497,  1344,
    3479,  1368,  3481,   515,  1939,  1449,   518,   159,  1452,   515,
     514,  1946,   518,  1457,   313,    37,  1460,  1345,    37,   515,
     223,  1465,   518,   114,   515,  1362,   516,   518,   515,  3445,
     289,   518,    26,  2094,  2095,    26,  2595,  2210,    32,   126,
     127,    32,  2594,  3522,  2308,  3461,   497,  1982,  1415,  1416,
     379,  1986,  1344,   516,  1421,  2626,  1423,  1992,   420,  2579,
     422,  1428,  1429,  1430,  1431,   515,  2094,  2095,   518,   515,
     435,   370,   518,   512,   445,   514,  1443,  1444,   377,  2014,
     170,   446,  1449,   454,   171,  1452,  1449,   416,  1423,  1452,
    1457,  2643,  1459,  1460,  1457,  2483,  2484,  1460,  1465,  2593,
    3516,  2595,  1465,   515,   518,  3521,   518,    26,   515,   515,
      26,   518,   518,    32,  1449,   515,    32,  1452,   518,   514,
     449,   420,  1457,   422,   476,  1460,   478,   279,   515,  1159,
    1465,   460,   284,   515,  2320,  3233,   518,  3235,   515,   515,
    1423,   518,  1423,   137,   171,   515,   137,  2208,   518,   448,
     172,   515,    26,   172,   518,  1522,  2486,   420,    32,   422,
    2461,  2462,  2463,   294,  2461,  2462,  1449,   515,  1449,  1452,
    2461,  1452,  2460,   420,  1457,   422,  1457,  1460,   515,  1460,
     515,   518,  1465,   518,  1465,   514,   208,  1554,  1555,   208,
    2237,   515,  2239,    59,   518,  1551,  1563,  1564,  1551,   223,
     515,   448,   224,   518,  1571,   224,  1551,   514,  1551,  1551,
    1551,  1578,   234,   515,   515,   234,   518,   518,   137,   515,
     515,   137,   518,   518,   420,   417,   422,   314,   315,   316,
     505,   506,   507,   508,   509,   510,  1603,    13,    14,   515,
    1607,    26,   518,  1610,  2578,    40,  2580,    32,  1615,  1616,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  2891,    13,
      14,  1628,  1629,   137,  3150,    60,  1633,  2453,    13,    14,
    1637,  2349,  3243,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  2355,   435,  1651,   515,   497,  1624,   518,  1699,
     152,  1658,   379,  1660,   446,   515,    13,    14,   518,   293,
      40,  1699,   293,   390,   875,  1335,   877,  1337,    13,    14,
     350,   106,  1679,    13,    14,    13,    14,  2547,    13,    14,
      60,   152,  2842,  2509,   152,   412,    13,    14,   152,   416,
    2889,    13,    14,    13,    14,  1702,    13,    14,   152,   361,
      13,    14,   361,    13,    14,   416,  1713,  1714,    40,  1677,
      13,    14,   137,    13,    14,   466,   350,   374,   380,   350,
     354,   380,   449,   354,    13,    14,   106,    13,    14,   515,
     173,    13,    14,   460,   293,    13,    14,   293,    13,    14,
     365,   366,  1749,   365,   366,  2320,   365,   366,   514,   476,
     274,  1758,   386,  1760,  2965,   386,    40,  2570,  2925,   177,
    2633,   466,  2654,   365,   366,    89,   201,   262,   263,   152,
    2674,   375,   376,   500,   480,  3048,   459,   460,  3443,   293,
    2686,  1758,  3447,  1760,   202,   152,  2612,   514,   516,  2797,
     152,   350,   152,  1800,   350,   354,     8,  1804,   354,    11,
    1807,  1808,   245,    15,    16,  3456,  3457,    19,    20,    21,
    3488,  3489,  2513,  2514,  3194,   250,  1140,  1141,   352,   289,
     428,   201,   240,   457,    36,   260,   457,   386,   514,   171,
     386,   515,   514,   514,   418,   514,   350,   272,  3503,   299,
     354,   219,  1849,     8,   514,  2513,  2514,   224,   224,  1845,
      15,    16,   224,   514,    19,    20,    21,  1864,   296,    40,
     235,   514,     5,     5,  1871,  1872,   514,   324,   293,   304,
     250,   514,   386,  1880,   514,   514,   294,  3150,  2453,     5,
     260,  2707,   514,     5,     5,  1969,   514,     5,   148,  3415,
    1897,  1975,   272,     9,  1901,  1902,   514,  1904,   457,   342,
     514,   457,  1909,  1910,  1911,  1912,  1913,  1914,  1915,   477,
     301,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,
    1927,   356,   518,   518,   304,   104,  1933,  1934,   515,   354,
    1937,    40,  1939,   386,  2509,   166,   219,  1944,   381,  1946,
    2880,   166,   286,   457,    59,   284,   381,   235,   514,   173,
     428,   514,    93,   518,   428,    59,    59,   265,  2784,  1966,
     108,   386,  1969,   428,  1971,   400,  1969,  3347,  1975,  3161,
     428,   524,  1975,   416,   221,  1982,   356,   428,   428,  1986,
     476,  1988,   377,  1990,   152,  1992,  2892,  2893,   100,   274,
      40,   514,   514,   274,  1969,   274,   198,   274,   274,   152,
    1975,   381,   420,  2704,   422,   171,   516,  2014,    13,   221,
    3390,   515,   515,   171,   515,   515,   515,  2024,  2025,  2737,
     400,   245,   514,   466,   147,   518,   515,   445,  2729,   515,
     448,  3039,   457,   473,   224,   224,  2704,  2612,   161,   281,
     281,   514,   514,   166,   463,    39,  1969,   516,  1969,  3019,
     516,   782,  1975,   784,  1975,  2099,   518,  2064,     0,   514,
    3440,   472,  2069,  2070,     9,  2891,  3277,   514,   514,   514,
     514,   426,  2773,   514,  1744,   426,    11,   513,    20,   291,
     515,    23,   352,   814,  1754,   518,  1756,  2094,  2095,  1759,
     524,   518,  2099,   523,   217,  1765,    38,  1767,   426,  2925,
     514,   279,  3218,   428,   514,    47,  2113,   180,   839,  2116,
    1780,  2118,   171,   162,   237,  1785,   518,   147,   342,  1789,
    1790,  1791,  1792,   515,  1794,  1795,   291,  2134,  2135,   217,
     518,   161,  2707,   454,  2141,   265,   166,  2144,   389,   226,
     290,  2144,  3415,  2861,   518,   312,   180,    89,    90,    91,
     312,   219,   518,   514,  2161,   226,   515,   381,  2161,   226,
     102,   274,  2863,   286,   295,   466,   514,  2174,    40,  2144,
     333,   514,   295,   287,   152,   152,   152,   476,  3004,   152,
      40,   152,     3,   514,  2191,  2192,  2161,   217,    60,   274,
     289,     3,   416,   289,    40,  2863,    59,   171,    11,    40,
     166,  2208,   514,  2210,   515,   180,   515,   237,   515,  2784,
     515,   166,  2219,     3,    39,     3,   514,   514,   512,  3418,
     512,  2144,  3048,  2144,  3128,   428,   513,   428,   428,   428,
    2237,  2238,  2239,   523,   106,   515,     8,   171,  2161,    11,
    2161,   515,   466,    15,    16,   518,   977,    19,    20,    21,
     515,   497,   516,   515,   515,   986,   286,   497,   515,   515,
    2237,  2238,  2239,   515,   497,   295,   515,   428,   155,  2276,
    2314,   514,    40,    59,    46,  2282,   514,   514,   514,   249,
     514,    53,   473,   518,   503,   499,   290,  3000,   290,   501,
     502,   503,   451,   505,   506,   507,   508,   509,   510,    59,
     518,    59,  3003,   175,  1035,  2303,   243,   265,    80,   428,
     274,  2303,   152,  2320,   202,  2303,  2891,  2303,   514,   152,
     152,   444,   428,   428,  3150,   281,   428,   428,   281,   201,
     515,  2338,   514,    40,  2341,  3003,   501,   502,   503,   514,
     505,   506,   507,   508,   509,   510,   352,  3220,  2355,   518,
    2925,   515,   476,   289,  2361,   287,    40,   152,   279,   515,
     171,   515,   514,   514,  2341,    59,   515,   185,   515,   166,
    1101,    80,  3204,   512,  3206,  3245,   143,   515,   250,   515,
    1111,   515,   198,   515,  2361,   514,   171,   515,   260,   512,
     300,   524,  2399,   516,   514,   358,   290,   180,  1129,   152,
     272,   518,   439,  3216,   176,   515,   514,  1138,   515,   175,
      40,    40,    86,   454,   444,   171,   198,   515,   518,   514,
     514,   193,   515,   515,  2399,   515,   198,   516,   514,  3004,
     514,  2438,   304,   515,  3219,   518,  3406,  3222,   518,   514,
     475,     8,  2486,   515,    11,  3349,  2453,   513,    15,    16,
    2524,   147,    19,    20,    21,   515,   513,   515,   289,   515,
     515,   515,  2469,  2438,   236,   161,  3339,   518,  2475,  2476,
     166,   515,   460,  3048,  3358,  2519,  2399,    98,  2399,  2486,
     503,    59,   515,   515,   356,   476,  2156,   515,   515,   204,
    2497,   117,    40,  2500,   514,  2502,   226,    88,   191,   279,
     279,   516,  2509,  2510,   516,   516,  2513,  2514,   516,   381,
     428,  2518,  2519,  3214,   503,   516,   516,   516,  2525,   291,
    3333,   217,   428,   516,   516,   515,  2570,     8,   400,   516,
      11,   516,   516,  2540,    15,    16,   516,   516,    19,    20,
      21,   237,  2538,  2550,   516,  2538,     7,     8,  2544,   516,
     171,   516,    13,  2538,   516,  2538,  2538,  2538,    19,   516,
      40,   513,    23,  2570,    25,    26,   516,    24,   516,    30,
      31,    32,   513,   516,    35,  3150,   516,    38,    39,   274,
     107,    42,    40,   516,    45,    46,   516,   516,   516,  3415,
     286,   516,   534,   516,   516,   514,   516,   476,   515,   295,
     515,   514,  2609,   289,     9,  2612,  2613,   514,  2615,   351,
     514,   514,   335,   518,   515,    59,   518,   515,     8,   391,
    2627,    11,  2629,   198,    81,    15,    16,   513,    89,    90,
    1361,   198,  2609,   191,  1365,   518,  2613,   459,  2615,    91,
      97,   102,   515,   344,   514,    40,   107,   108,   109,   110,
     111,   152,   516,  2649,   221,  2653,    46,   515,   124,   152,
    2330,  2653,    40,    53,   515,  2653,   366,  2653,   366,  3387,
      40,   515,   514,    40,   309,   514,   454,   279,   514,   514,
    2676,   518,   248,  2679,   190,  2729,   514,   439,    74,   146,
      80,   454,   292,   314,   315,   316,    80,  2704,    74,   156,
    2707,     9,   368,    59,    93,   515,   515,   514,   513,   515,
     513,   168,   133,   272,   503,   289,   173,  2724,  2725,   439,
    2804,    40,  2729,   514,   291,  2732,   498,   292,   292,   501,
     502,   503,   459,   505,   506,   507,   508,   509,   510,   514,
     221,   515,   204,   289,   515,   202,   515,   289,   444,   386,
     515,   515,  2759,   122,   451,   145,   365,  2732,   379,    25,
     148,    36,   977,   297,   365,  2885,  2773,  2596,  1766,  2232,
    2609,  2778,  2779,  1678,  2818,  2275,  2783,  2784,  1237,  2302,
     783,  2788,   117,  1814,  2791,  2792,   176,   868,   245,  2796,
    2797,  2361,   249,  2800,  3000,   416,  3311,  2804,  2645,  3364,
    3471,  2804,  3121,   193,  2811,  3419,   748,   749,   198,  3428,
     291,  3464,  3179,  1200,  2238,   436,   512,  2225,  3417,   515,
     516,  2665,  2588,  2615,  3426,  3414,  2222,  2344,   449,  2804,
    1327,  2549,  1299,  1871,  1345,  3309,   171,  3247,  2548,   460,
    3415,  1038,  3390,  3343,  3493,  1365,   236,   789,  2855,  2538,
    2208,  2174,  1738,  1159,  1183,   476,  2863,  2420,   800,  1182,
    3399,  2191,   319,  1702,  1010,  1010,  3320,  3208,  1737,  1185,
      23,  2161,    74,  1980,  3043,  2882,   800,   334,    80,   500,
    2732,  2804,  2398,  2804,  2891,  2399,  2445,  3142,  3324,   789,
    1995,    93,  3323,   514,  1880,  2071,  1111,   988,  2476,  2175,
    2117,   291,  2026,  2573,  2574,  2114,   848,   986,   986,   986,
     367,  1444,   986,   370,  2073,   117,   986,   119,  2925,  2811,
    2493,   986,   986,  1138,   381,   986,   868,   384,  1677,   102,
    1988,  2601,    -1,    -1,   501,   502,   503,  1668,   505,   506,
     507,   508,   509,   510,    -1,   402,  2616,  2617,  2618,  2619,
    2620,  2621,  2622,  2623,  2624,  2625,    -1,    -1,    -1,   416,
      -1,    -1,    -1,    -1,  2971,  2972,   423,    -1,   303,    -1,
      -1,    -1,    -1,    -1,    -1,  3019,   433,    -1,    -1,   314,
     315,   316,   439,    -1,    -1,  2981,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3000,    -1,  2972,  3003,  3004,    -1,  1214,
      -1,   391,  1217,  1218,   206,    -1,    -1,    -1,    -1,   466,
      -1,    -1,  3019,    -1,    -1,    -1,  1213,    -1,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,  3039,    -1,    -1,    -1,   978,    -1,    -1,    -1,
      -1,  3048,    -1,    37,   379,    -1,  3053,    -1,    42,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3064,  3065,    -1,
      -1,  3068,    -1,  3070,    -1,  1796,    -1,    -1,    -1,  1011,
      -1,    -1,   274,    -1,   535,    -1,  1018,   279,  1809,   540,
      -1,   416,   543,  1814,    -1,    -1,    -1,    -1,  3095,    -1,
     551,    -1,    -1,    -1,  1038,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1303,   101,   498,    -1,
      -1,  1053,  3119,    -1,   449,   505,   506,   507,   508,   509,
     510,     8,    -1,  1065,    11,   460,   328,    -1,    15,    16,
      -1,    -1,    19,    20,    21,  1350,  1351,    -1,    -1,    -1,
      -1,   476,   344,  3150,    -1,    -1,    -1,    -1,    -1,  1880,
    1092,    -1,    -1,    -1,    -1,  1886,     8,    -1,    -1,    11,
     177,    -1,    -1,    15,    16,   500,    -1,    19,    20,    21,
    3166,  3167,    -1,    -1,    -1,    -1,    -1,    -1,   172,   514,
      -1,    -1,  3189,  3190,    36,   202,    -1,  3194,    -1,    -1,
      -1,    -1,  2862,    -1,    -1,    -1,    -1,  3204,    -1,  3206,
      -1,  3208,   177,    -1,    -1,  3212,    -1,  3214,    -1,  3216,
      -1,    -1,    -1,  3190,   208,    -1,    -1,    -1,    -1,  3194,
     993,  3228,    -1,   240,    -1,    -1,  3233,   202,  3235,    -1,
     224,  1173,  1174,    -1,  1176,     3,  3243,     5,    -1,    -1,
     234,    -1,    -1,   445,    -1,    -1,    -1,    -1,  3244,  3256,
    3246,    -1,   454,    -1,  3261,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,  1213,
      -1,  3194,    -1,  3194,   268,    -1,    -1,   294,    -1,  3256,
     741,   742,   743,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3286,    -1,    -1,    -1,    -1,   289,   313,    -1,    -1,    -1,
      68,    69,    -1,  3310,    -1,    -1,  3302,    -1,    -1,    -1,
    3306,   198,    -1,  3320,    -1,    -1,    -1,    -1,    -1,   294,
     314,   782,   783,   784,    -1,  1522,  3333,   321,   789,    -1,
     791,    -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,   800,
    3347,   109,   110,   804,   805,   113,   114,    -1,   809,   810,
      -1,    -1,    -1,   370,  1569,    -1,    -1,    -1,  3365,  1303,
     377,    -1,   823,   824,   825,    -1,  1581,   361,  1583,   221,
      -1,    -1,  3347,    -1,     0,    -1,   837,   838,    -1,   840,
      -1,    -1,    -1,  3390,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,   853,    -1,  1609,   370,    -1,    -1,   859,  3406,
      -1,    -1,  1344,   420,   291,   422,    -1,    -1,  3415,   870,
    3417,    -1,   873,    -1,    -1,  3390,  1189,    -1,  1615,   171,
     188,   189,   439,    -1,  3347,    -1,  3347,    -1,   445,    -1,
      -1,   448,    -1,  3440,    -1,    -1,  3432,    -1,    -1,   291,
    3417,    -1,    -1,    -1,    -1,   420,    -1,   422,  3455,  3456,
    3457,    -1,    -1,    -1,    -1,   449,    -1,    -1,    -1,    -1,
    3130,   922,   923,  3459,   439,  3440,    -1,  3390,    -1,  3390,
     445,    -1,    -1,   448,   100,  3482,   937,   938,   939,   940,
     941,  3151,  3152,    -1,   252,   253,   254,   255,   256,   257,
     258,   259,    -1,   954,   262,   263,    -1,    -1,  1713,  1714,
      -1,    -1,    -1,    -1,    -1,    -1,  3176,  1449,    -1,    -1,
    1452,    -1,    -1,  2244,    -1,  1457,  3523,  3440,  1460,  3440,
      -1,   147,    -1,  1465,    -1,    -1,   987,   988,    -1,   990,
      -1,    -1,   993,    -1,    -1,   161,    -1,    -1,   999,  1000,
     166,    -1,    -1,    -1,  1005,   171,    -1,    -1,    -1,    -1,
    1011,   303,  1749,    -1,   180,    -1,    -1,  1018,  1773,   185,
      -1,    -1,   314,   315,   316,  2296,    -1,  1028,  1783,    -1,
      -1,  1786,    -1,    -1,  1035,    -1,    -1,    -1,  1522,    -1,
      -1,    -1,    -1,  2314,  1045,    -1,    -1,    -1,    -1,     8,
      -1,   217,    11,     0,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,   375,   376,  1551,
      -1,   237,    -1,    -1,   501,   502,   503,    36,   505,   506,
     507,   508,   509,   510,  2355,    -1,    -1,   379,    -1,    -1,
      -1,  1038,  2363,    -1,  2365,  1096,    -1,    -1,  2369,    -1,
    2371,    -1,  1415,  1416,    -1,    -1,    -1,    -1,  1421,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
     286,    -1,    -1,   289,   416,  1880,    -1,    -1,    -1,   295,
      -1,  1615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1142,    -1,    -1,  1145,    -1,    -1,    -1,  1630,    -1,
      -1,    -1,    -1,   100,    81,    82,    -1,   449,  1159,  1160,
    1897,    -1,   470,   471,    -1,    -1,  1167,    -1,   460,   335,
      97,    -1,  1909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,   476,    -1,   494,   495,  1189,    -1,
      -1,    -1,   358,    -1,    -1,    -1,   151,    -1,  1199,  1200,
     147,  3411,  1939,    -1,    -1,    -1,    -1,    -1,   500,  1946,
      -1,  1212,    -1,    -1,   161,    -1,   171,  1699,    -1,   166,
      -1,    -1,   514,    -1,   171,    -1,  1038,    -1,  1229,    -1,
      -1,    -1,  1233,   180,    37,    -1,    -1,  1238,   185,    42,
      -1,    -1,    -1,    -1,  1999,  1982,   173,    -1,    -1,  1986,
     416,    -1,    -1,    -1,    -1,  1992,    -1,    -1,    -1,    -1,
      -1,    -1,   221,    -1,    -1,  1749,  1213,    -1,    -1,    -1,
     217,    -1,    -1,    13,    -1,   202,    -1,  2014,   444,    19,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,
     237,    31,    -1,    -1,    -1,  1296,    -1,  1298,   101,    40,
      -1,    -1,    -1,  1304,    -1,    45,    46,   473,    -1,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,  1318,   245,    60,
      -1,    -1,   249,    -1,    -1,    -1,  1327,    -1,    -1,    -1,
      -1,  1332,   291,  1334,  1335,    24,  1337,  1338,    -1,   286,
      -1,  2612,   289,  1656,    -1,    -1,   512,    -1,   295,   515,
     516,   517,    -1,    -1,  1836,    -1,  1303,    -1,    -1,   314,
     315,   316,    -1,  1845,  1365,   106,   107,    -1,   108,   172,
      -1,    -1,    -1,    -1,  2645,    42,   117,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   335,  1702,
      -1,     8,    81,  2148,    11,    -1,    -1,    -1,    15,    16,
      -1,  1213,    19,    20,    21,   208,    -1,    -1,    97,    -1,
      -1,   358,    -1,  1897,  1415,  1416,    -1,    -1,    -1,    36,
    1421,   224,  1423,    -1,   379,  1909,  2181,  2182,    -1,    -1,
      -1,   234,    -1,    -1,   175,  1436,    -1,  1438,  1439,    -1,
     107,    -1,   109,   370,   111,  1446,    -1,    -1,  1449,    -1,
      -1,  1452,    -1,    -1,   381,  1939,  1457,   146,    -1,  1460,
     201,   416,  1946,  2734,  1465,   268,  1467,   156,  1469,   416,
      -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,   173,    -1,    -1,  1969,    -1,   416,
      -1,  1303,    -1,  1975,   449,    -1,   423,   444,  1982,    -1,
      -1,    -1,  1986,    -1,    -1,   460,    55,   454,  1992,   250,
      -1,   314,   439,   202,    -1,    -1,    -1,    -1,   321,   260,
      -1,   476,    -1,   314,   315,   316,   473,    -1,   475,   476,
    2014,   272,    -1,   274,    -1,    -1,    -1,  2808,    -1,   466,
      -1,    -1,   501,   502,   503,   500,   505,   506,   507,   508,
     509,   510,    -1,   102,    -1,    -1,   245,    -1,   361,   514,
     249,    -1,    -1,   304,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,    -1,   123,  1522,  1577,   380,     8,    -1,
      -1,    11,    -1,  2320,    -1,    15,    16,  1588,   379,    -1,
      -1,    -1,   141,    -1,    -1,    -1,   145,  1910,  1911,  1912,
    1913,  1914,  1915,    -1,   221,  1918,  1919,  1920,  1921,  1922,
    1923,  1924,  1925,  1926,  1927,   356,    46,  2099,   167,    -1,
      -1,   170,    -1,    53,   313,   416,  1627,    -1,    -1,    -1,
     319,    -1,    -1,    -1,    -1,  2117,    -1,   186,    -1,    -1,
     381,   126,   127,    -1,    -1,   334,   449,    -1,    -1,     8,
      80,  2133,    11,    -1,    -1,    -1,    15,    16,   449,   400,
      -1,   402,  2144,    -1,   405,    -1,    -1,    -1,  1615,   460,
      -1,    -1,    -1,  1674,   291,  1676,    -1,  1678,   367,  2161,
      -1,   370,    -1,    -1,    -1,   476,   171,    46,  1689,  1690,
      -1,    -1,   381,    -1,    53,   384,    -1,    -1,    -1,    -1,
      -1,  1702,  2457,  2458,    -1,    -1,  2977,    -1,    -1,   500,
    1522,    -1,    -1,   402,    -1,   145,  2453,    -1,    -1,    -1,
      -1,    80,    -1,   514,    -1,    -1,  1727,   416,  1729,  3000,
     279,    -1,    -1,   422,   423,    -1,    -1,    -1,   287,    -1,
      -1,    -1,  1743,  1744,   433,    -1,   176,    -1,    -1,    -1,
     439,    -1,    -1,  1754,  1755,  1756,  1757,    -1,  1759,    -1,
     309,    -1,    -1,   193,  1765,    -1,  1767,    -1,   198,    -1,
      -1,    -1,  2509,   514,    -1,    -1,    -1,   466,  1779,  1780,
      -1,  2094,  2095,  1784,  1785,    -1,   145,   336,  1789,  1790,
    1791,  1792,    -1,  1794,  1795,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1749,  1615,    -1,    -1,   236,    -1,    -1,    -1,
    3081,   551,    -1,    -1,  1815,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,  1824,  1825,  1826,  1827,  1828,  1829,   314,
     315,   316,  2314,    -1,   193,    -1,  2320,  1038,    -1,   198,
      -1,    -1,  1843,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2612,  1859,    -1,
      -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,   535,    -1,
      -1,    -1,    -1,   540,    -1,  2612,   543,   236,    -1,  3150,
      -1,    -1,    -1,    -1,   501,   502,   503,   151,   505,   506,
     507,   508,   509,   510,   379,  2208,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,    -1,   171,    -1,  1910,
    1911,  1912,  1913,  1914,  1915,    -1,    -1,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,   412,    -1,    -1,
      -1,   416,   291,    -1,    37,    -1,    -1,  1749,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1948,    -1,    -1,
    1897,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1960,
      -1,   391,  1909,    -1,   449,    -1,    -1,    -1,  1969,  2453,
    2707,    -1,    -1,    -1,  1975,   460,    -1,    -1,    -1,  1980,
      -1,    -1,    -1,    -1,  1985,    -1,    -1,  2742,    -1,    -1,
      -1,   476,  1939,  1994,  1995,    -1,    -1,    -1,   101,  1946,
      -1,    -1,   742,   743,  2486,    -1,    -1,  3278,    -1,    -1,
      -1,    -1,  1213,    -1,    -1,   500,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2509,    -1,    -1,    -1,   514,
      -1,    -1,   391,    -1,    -1,  1982,    -1,  2519,    -1,  1986,
      -1,    -1,    -1,    -1,    -1,  1992,    -1,  2784,    -1,    -1,
     314,   315,   316,    -1,    -1,    -1,  2538,    -1,    -1,    -1,
      -1,  2062,  2544,    -1,    -1,  2066,    -1,  2014,   498,   172,
    2071,    -1,    -1,    -1,    -1,   505,   506,   507,   508,   509,
     510,    37,    -1,    -1,    -1,  1897,    42,    -1,  2570,    -1,
      -1,    -1,    -1,  2094,  2095,    -1,    -1,  1909,    -1,    -1,
      -1,    -1,  1303,    -1,    -1,   208,    -1,    -1,    -1,    -1,
    2111,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,   859,
      -1,   224,    -1,    -1,   791,  2880,    -1,  1939,  2612,    -1,
    2885,   234,    -1,    -1,  1946,    -1,    -1,    -1,    -1,   498,
      -1,    -1,    -1,  2144,  3415,   101,   505,   506,   507,   508,
     509,   510,   416,    -1,  2891,  2156,    -1,    -1,    -1,     0,
    2161,    -1,    -1,    -1,  2165,   268,    -1,  2649,    -1,    -1,
    1982,    -1,    -1,    -1,  1986,    -1,    -1,  2932,  2933,    -1,
    1992,  3452,    -1,    -1,    -1,   449,   289,    -1,  2925,    -1,
      -1,    -1,    -1,    -1,  2676,    -1,   460,  2679,    -1,    -1,
    2513,  2514,  2014,   870,  2205,    -1,    -1,  2208,    -1,    -1,
    2211,   314,   476,    -1,    -1,    -1,   172,    -1,   321,    -1,
      -1,    -1,    -1,  2707,   180,    -1,  2227,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2729,    -1,    -1,
     514,    -1,   208,    -1,    -1,   922,    -1,    -1,   361,   100,
      -1,    -1,    -1,    -1,    -1,  1005,    -1,  3004,   224,    -1,
     937,   938,   939,   940,    -1,    -1,    -1,   380,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1028,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2298,    -1,    -1,
    2784,    -1,    -1,  2304,    -1,    -1,   147,    -1,    -1,    -1,
      -1,  3048,   268,    -1,    -1,  2316,  2317,  2318,  2319,    -1,
     161,  1522,  2804,   990,    -1,   166,    -1,    -1,    -1,  2330,
     171,  2332,    -1,   289,  2335,    -1,  2818,    -1,  2339,   180,
      -1,    -1,  2343,    -1,   185,    -1,   449,    -1,  2349,    -1,
      -1,   454,    -1,    -1,    -1,    -1,  1096,    -1,   314,    -1,
      -1,    -1,    -1,    -1,    -1,   321,  2367,  2368,    -1,  2370,
      -1,    -1,    -1,  2320,    -1,    -1,   217,    -1,    -1,    -1,
      -1,    -1,    -1,  3138,  3139,    -1,    -1,    -1,    -1,    -1,
      -1,  2704,    -1,    -1,    -1,  3150,   237,    -1,  2399,    -1,
      -1,    -1,    -1,    -1,    -1,   361,    -1,  2891,    -1,    -1,
      -1,    -1,    -1,  3150,  1615,    -1,  2729,    -1,  2419,  1159,
    1160,    -1,    -1,    -1,   380,    -1,  2427,  2428,  2429,    -1,
      -1,    -1,    -1,    -1,    -1,  2436,    -1,  2438,  2439,     8,
      -1,  2925,    11,    -1,  2445,   286,    15,    16,   289,    -1,
      19,    20,    21,    -1,   295,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2478,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   449,   335,    -1,    -1,    46,   454,  2981,
      -1,    -1,    -1,    -1,    53,    -1,  2453,    -1,  2320,    -1,
      -1,    -1,  2513,  2514,    -1,    -1,    -1,   358,    -1,    -1,
    3004,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,  1199,    -1,    -1,    -1,    -1,  3019,    -1,    -1,
      -1,  2542,    -1,    -1,    -1,  1212,    -1,  2548,  1749,    -1,
    2863,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2509,  2564,  3048,    -1,  1233,  2568,    -1,    -1,
      -1,  2572,  2573,  2574,    -1,   416,    -1,  2578,  2579,  2580,
      -1,  2582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1334,  1335,   145,  1337,    -1,    -1,
    2601,    -1,  2603,   444,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   454,    -1,  2616,  2617,  2618,  2619,  2620,
    2621,  2622,  2623,  2624,  2625,    -1,    -1,   176,    -1,    -1,
      -1,  1298,   473,    -1,   475,   476,    -1,  1304,    -1,    -1,
      -1,  2453,    -1,     8,   193,    -1,    11,  2648,    -1,   198,
      15,    16,   221,    -1,  2655,    -1,    -1,    -1,    -1,    -1,
    3415,    -1,    -1,    -1,  2665,  2612,  3150,    -1,    -1,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,  3415,    -1,
      -1,    46,  2683,    -1,  3166,  3167,    -1,   236,    53,    -1,
    3003,    -1,  2693,    -1,    -1,    -1,  1897,  2509,  1438,    -1,
      -1,    -1,    -1,  2704,    -1,    -1,    -1,    -1,  1909,  2710,
      -1,    -1,    -1,    -1,    -1,    80,  2717,  2718,  2719,  2720,
      -1,    -1,   291,    -1,    -1,    -1,    -1,  1467,  2729,  1469,
      -1,  2732,    -1,    -1,    -1,  2736,  2737,    -1,  1939,    -1,
      -1,    -1,   291,    -1,  2745,  1946,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2707,    -1,  3244,    -1,  3246,    -1,    -1,    -1,    -1,    -1,
      -1,  2772,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1446,
     145,  1982,    -1,    -1,    -1,  1986,    -1,    -1,    -1,    -1,
      -1,  1992,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2612,  2802,    -1,  2804,  3286,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,  2014,    -1,    -1,    -1,  2818,    -1,    -1,
    3302,  2822,    -1,    -1,  3306,    -1,    -1,  2828,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,  2784,    -1,    -1,
      -1,  2842,   391,    -1,    -1,    -1,    -1,  2848,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2861,  2862,  2863,    -1,    -1,    -1,    -1,    -1,  2869,    -1,
      -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,  2886,    -1,    15,    16,    -1,
      -1,    -1,    -1,    -1,    -1,  2707,    -1,    -1,    -1,    -1,
      -1,  3214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,   291,    -1,    -1,    -1,
      -1,  3415,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,  2891,    -1,    -1,    -1,    -1,   498,
    3432,    -1,    80,    -1,    -1,    -1,   505,   506,   507,   508,
     509,   510,    -1,  2964,    -1,    -1,  2967,    -1,    -1,    -1,
      -1,    -1,  2784,    -1,    -1,    -1,    -1,  3459,  2925,  2980,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1729,
      -1,    -1,    -1,    -1,    -1,  2996,    -1,    -1,    -1,    -1,
      -1,    -1,  3003,    -1,  1744,    -1,    -1,    -1,    -1,  1676,
      -1,  1678,    -1,    -1,  1754,    -1,  1756,   145,    -1,  1759,
      -1,    -1,  1689,    -1,    -1,  1765,   391,  1767,  3029,    -1,
       8,    -1,    -1,    11,  3035,    -1,    -1,    15,    16,    -1,
    1780,    -1,  3043,    -1,    -1,  1785,    -1,    -1,   176,  1789,
    1790,  1791,  1792,    -1,  1794,  1795,    -1,  3004,    -1,    -1,
    1727,    -1,    -1,    -1,    -1,   193,    -1,    -1,    46,    -1,
     198,    -1,    -1,    -1,    -1,    53,  3077,    -1,    -1,  2891,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      26,    -1,    -1,    -1,    -1,    -1,    32,    -1,  3099,    -1,
      -1,  3048,    80,  3104,    40,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,  2925,    -1,    -1,    -1,    -1,    -1,  2320,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,  3130,
      -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
    3151,  3152,    -1,    -1,    -1,    -1,    -1,  1824,  1825,  1826,
    1827,    -1,  1829,   291,    -1,    -1,    -1,    -1,    -1,  3170,
     106,  3172,    -1,    -1,    -1,  3176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3191,    -1,  3004,  3194,    -1,    -1,    -1,    -1,   176,   835,
     836,   137,    -1,  3150,    -1,    -1,    -1,    -1,  1948,    -1,
      -1,    -1,    -1,  3214,    -1,   193,    -1,  3218,  3219,    -1,
     198,  3222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3048,    -1,    -1,    -1,
    1980,    -1,    -1,    -1,    -1,  1985,  3247,    -1,    -1,    -1,
      -1,    -1,  2453,  3254,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,   391,    -1,   201,   902,    -1,    -1,    -1,
     906,    -1,   908,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1960,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2509,    -1,
      -1,    -1,    -1,   291,   250,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2062,  3324,   260,    -1,    -1,    -1,   964,    -1,
      -1,  2071,    -1,    -1,    -1,    -1,   272,    -1,  3150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3347,   983,    -1,    -1,
      -1,    -1,    -1,   989,    -1,    -1,   992,   293,    -1,   995,
     996,   997,   998,    -1,    -1,    -1,    -1,    -1,   304,    -1,
     498,    -1,    -1,  3374,    -1,    -1,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,  3387,  3388,    -1,  3390,
    3391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3399,    -1,
    1036,  1037,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3411,  2612,    -1,   391,   350,    -1,  2156,    -1,   354,    -1,
     356,  1057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3433,    -1,    -1,    -1,    -1,    68,    69,  3440,
    1076,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
     386,  1087,  1088,  1089,    -1,  1091,  1092,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,  2205,    -1,    -1,  3415,    -1,
      -1,  2211,    -1,    -1,    -1,    -1,    -1,  3478,   109,   110,
      -1,    -1,   113,   114,    -1,    -1,    -1,  1123,    -1,    -1,
      -1,    -1,  3493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1140,  1141,  2707,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,   457,    -1,    -1,    -1,    -1,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,    -1,    -1,  1175,
      -1,    -1,    -1,  1179,  1180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1190,  1191,    -1,   188,   189,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,  2784,    -1,    -1,    -1,    -1,    -1,    -1,
    2330,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,  3415,    -1,    -1,    -1,    46,    -1,    -1,
    1246,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,  1255,
      -1,   252,   253,   254,   255,   256,   257,   258,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,  2304,    -1,    -1,
      -1,    80,    -1,  1279,    -1,    -1,     8,    -1,    -1,    11,
    2317,  2318,  2319,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,  2332,    -1,    -1,  2335,    -1,
      -1,    -1,    -1,    -1,    36,    -1,  2343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
    2891,    53,    -1,    -1,    -1,    -1,  2436,    -1,    -1,  2439,
      -1,    -1,    -1,    -1,    -1,  2445,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,  2925,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1368,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,   375,   376,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,
    2427,  2428,  2429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1428,    -1,  1430,  1431,    -1,   236,    -1,    -1,
      -1,    -1,    -1,  3004,    -1,    -1,    -1,  1443,  1444,    -1,
      -1,    -1,    -1,    -1,   176,   109,   110,    -1,    -1,   113,
     114,    -1,    -1,  1459,    -1,    -1,    -1,    -1,  2568,    -1,
      -1,   193,  2572,  2573,  2574,   274,   198,    -1,   277,   470,
     471,    -1,    -1,    -1,    -1,    -1,    -1,  3048,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,   221,
     222,  2601,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   236,    -1,  2616,  2617,  2618,  2619,
    2620,  2621,  2622,  2623,  2624,  2625,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,    -1,  2564,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1563,    -1,   291,
      -1,    -1,   294,    -1,    -1,  1571,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3150,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,    -1,   262,   263,
    2710,    -1,    -1,    -1,  1610,    -1,    -1,    -1,    -1,    -1,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  2655,    -1,
      -1,    -1,  1628,  1629,    -1,    -1,  2736,  1633,    -1,    -1,
      -1,  1637,    -1,    -1,  1640,  1641,  1642,  1643,  1644,  1645,
    1646,  1647,  1648,    -1,    -1,  1651,    -1,    -1,    -1,    -1,
      -1,    26,  1658,    -1,  1660,    -1,    -1,    32,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1679,    -1,    -1,    -1,    -1,    -1,    -1,
    2717,  2718,  2719,  2720,    -1,    60,    -1,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,    -1,    -1,  1713,  1714,    -1,
      -1,   375,   376,    -1,    -1,   524,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2862,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1800,    -1,    -1,    -1,  1804,    -1,
      -1,  1807,  1808,    -1,    -1,     3,   470,   471,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   201,    -1,    -1,    -1,
     494,   495,  2869,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,  1849,  3415,    -1,    -1,    -1,    46,    -1,
     514,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1871,  1872,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,   260,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1901,  1902,   272,  1904,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,   293,    -1,
      -1,    -1,    -1,    -1,    -1,  3035,    -1,  1933,  1934,   304,
      -1,  1937,    36,  3043,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1966,    -1,    -1,    -1,    -1,  1971,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   350,    80,    -1,   176,   354,
      -1,   356,  1988,    -1,  1990,    -1,    -1,    -1,    -1,  3099,
      -1,    -1,    -1,    -1,  3104,   193,    -1,    -1,    -1,    -1,
     198,    -1,   993,    -1,    -1,    -1,   381,    -1,    -1,    -1,
      -1,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2025,
    3130,    -1,    -1,   221,   222,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,  3151,  3152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2064,    -1,
      -1,    -1,    -1,  2069,  2070,    -1,  3176,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,   274,    -1,    -1,   277,
      -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,   291,   198,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2113,  3218,    -1,
    2116,    -1,  2118,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,  1112,    -1,    -1,    -1,    -1,    -1,    -1,  2134,    -1,
      -1,    -1,   236,  3170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3191,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1155,    -1,    -1,    -1,  2174,    -1,
     274,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2191,  2192,   291,    -1,    -1,
     294,    -1,    -1,   391,    -1,    -1,    -1,    -1,  1189,    -1,
      -1,    -1,    -1,    -1,  2210,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2219,    -1,    -1,    -1,  3254,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3285,  1240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2276,    -1,    -1,    -1,    -1,    -1,  2282,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,  1284,    -1,    -1,    -1,    -1,  1289,    -1,
     498,  3411,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
    1341,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,  1366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,   498,    -1,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
    1411,    -1,  1413,    -1,  1415,  1416,    -1,  1418,    -1,    -1,
    1421,    -1,    -1,  1424,    -1,    -1,  1427,    -1,    -1,    -1,
      -1,  1432,    -1,    -1,  1435,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,  2469,    -1,    -1,    -1,    -1,    -1,  2475,
    2476,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
    2486,    -1,    -1,    -1,  1475,    -1,    46,    -1,    -1,    -1,
      -1,  2497,    -1,    53,  2500,     8,  2502,    -1,    11,    -1,
      -1,    -1,    15,    16,  2510,    -1,    19,    20,    21,    -1,
      -1,    -1,  2518,  2519,   176,    -1,    -1,    -1,    -1,  2525,
      80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    46,  2540,    -1,   198,    -1,    -1,    -1,
      53,    -1,    -1,    -1,  2550,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,  2570,    -1,    -1,    80,  1559,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1585,  1586,  1587,    -1,    -1,    -1,
    1591,    -1,    -1,    -1,  1595,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,    -1,    -1,   277,   176,    -1,    -1,    -1,
      -1,  2627,    -1,  2629,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,   193,    -1,    -1,    -1,    -1,   198,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,   176,    -1,    -1,  1657,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,   198,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,  1696,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,   274,    36,    -1,   277,  2724,  2725,
      -1,  1712,    -1,   236,    -1,    46,  1717,    -1,    -1,   391,
      -1,   291,    53,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1734,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2759,    -1,    -1,    -1,    -1,    -1,    80,
      -1,   274,    -1,    -1,   277,    -1,    -1,  2773,    -1,    -1,
      -1,    -1,  2778,  2779,    -1,    -1,    -1,  2783,   291,    -1,
      -1,   294,  2788,    -1,    -1,  2791,  2792,    -1,    -1,    -1,
    2796,  2797,    -1,    -1,  2800,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,  2855,
      -1,    -1,    -1,   515,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,  2882,   198,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,  1899,    -1,
      -1,    -1,    -1,    -1,    -1,   236,  1907,  1908,    -1,  1910,
    1911,  1912,  1913,  1914,  1915,    -1,    -1,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,   274,    -1,   515,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2971,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3019,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3039,    -1,    -1,    -1,  2028,    -1,    -1,
    2031,    -1,    -1,     8,    -1,    -1,    11,  3053,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,  3064,  3065,
      -1,    -1,  3068,    -1,  3070,    -1,    -1,    -1,    -1,    -1,
     391,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,  2077,    -1,    53,  3095,
    2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,    -1,    -1,
      -1,    -1,    -1,  2094,  2095,    -1,  2097,  2098,    -1,    -1,
      -1,    -1,    -1,  3119,    -1,    80,    -1,    -1,  2109,    -1,
      -1,  2112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2120,
    2121,  2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2155,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,
     501,   502,   503,  3189,   505,   506,   507,   508,   509,   510,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3208,    -1,    -1,    -1,  3212,    -1,    -1,    -1,
    3216,   176,    -1,    -1,    -1,    -1,    -1,  2208,    -1,    -1,
      -1,    -1,  3228,    -1,    -1,    -1,    -1,  3233,   193,  3235,
      -1,    -1,    -1,   198,    -1,    -1,    -1,  3243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3261,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2287,  2288,    -1,    -1,
      -1,    -1,    -1,    -1,  3310,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,  3320,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,  3333,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,  3365,
      -1,  2352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,  2374,  2375,  2376,    -1,    53,  2379,  2380,
    2381,  2382,  2383,  2384,    -1,    -1,    -1,  2388,  2389,  2390,
    2391,  2392,  2393,  2394,  2395,  2396,  2397,    -1,    -1,    -1,
       8,  2402,  2403,    11,    80,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,  2430,
      -1,    -1,    -1,    -1,  2435,    -1,    -1,    -1,    46,  3455,
    3456,  3457,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3482,  2468,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2487,    -1,    -1,  2490,
    2491,    -1,    -1,    -1,    -1,    -1,    -1,  2498,  2499,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,  3523,    -1,    -1,
      -1,  2512,  2513,  2514,  2515,    -1,  2517,   193,    -1,    -1,
    2521,    -1,   198,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
     515,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,  2575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
     198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,
      -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   221,   222,   291,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   274,    -1,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,  2680,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,     8,
      -1,    -1,    11,  2704,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2760,
      -1,  2762,    -1,    -1,    -1,    -1,    -1,  2768,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,  2777,    -1,    -1,  2780,
      -1,  2782,    -1,   391,    -1,  2786,    -1,    -1,  2789,  2790,
      -1,    -1,  2793,  2794,    -1,    -1,    -1,    -1,    -1,    -1,
    2801,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  2810,
      15,    16,    -1,    -1,    19,    20,    21,    -1,   176,    -1,
      -1,    -1,   498,    -1,  2825,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,   193,    -1,    -1,    -1,   515,
     198,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2863,   221,   222,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,   236,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   221,   222,    -1,    -1,   274,    -1,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3002,  3003,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3027,  3028,    -1,    -1,
      -1,   236,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3052,    -1,    -1,    -1,  3056,    -1,  3058,  3059,  3060,
      -1,    -1,  3063,    -1,    -1,  3066,  3067,    -1,    -1,   274,
      -1,    -1,   277,    -1,  3075,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,   291,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3116,    -1,    -1,    -1,    -1,
      -1,  3122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3135,    -1,    -1,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3168,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,  3196,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3230,
    3231,  3232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,  3307,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3325,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3335,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3360,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3386,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,  3430,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,  3485,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,    -1,   505,
     506,   507,    -1,    -1,    -1,    -1,   512,    -1,   514,    -1,
      -1,    -1,    -1,   519,   520,   521,   522,    -1,   524,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,    -1,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,    -1,    -1,    -1,   512,    -1,
     514,    -1,    -1,    -1,    -1,   519,   520,   521,   522,    -1,
     524,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
     132,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
     512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,   521,
     522,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,    -1,    -1,   500,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
     512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,
     522,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,   515,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,   522,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,    -1,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,    -1,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,    -1,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,   506,   507,    -1,     3,
       4,     5,   512,    -1,   514,     9,    -1,    -1,    -1,   519,
     520,   521,   522,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,    -1,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,    -1,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,   506,   507,    -1,     3,     4,     5,     6,     7,
     514,     9,    -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,
       9,    -1,    -1,    -1,   512,    -1,   514,    -1,    -1,    -1,
      -1,   519,   520,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,   184,    -1,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
      -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,    -1,    -1,   446,   447,   448,
      -1,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,    -1,   514,    -1,    -1,    -1,    -1,
     519,   520,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,    -1,
     220,    -1,    -1,   223,    -1,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,    -1,   235,    -1,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,    -1,   275,   276,    -1,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,   291,   292,   293,    -1,   295,   296,   297,   298,    -1,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,    -1,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,    -1,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,    -1,
     465,   466,   467,   468,   469,   470,   471,    -1,    -1,   474,
      -1,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
     515,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,    -1,
      -1,   291,   292,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,    -1,   446,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,    -1,   474,    -1,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,    -1,     3,
     500,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,    -1,   290,   291,   292,   293,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,   431,   432,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
      -1,    -1,   446,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
     474,    -1,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,    -1,     3,   500,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     514,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,   290,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,    -1,   417,   418,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,    -1,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,    -1,   417,
     418,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,    -1,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,   171,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,     3,    -1,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,   171,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
      -1,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,   210,   211,   212,   213,   214,   215,   216,    -1,
     218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,    -1,   275,   276,    -1,
     278,    -1,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,   297,
     298,    -1,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,   431,   432,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,    -1,    -1,   446,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,    -1,   465,   466,   467,
     468,   469,   470,   471,    -1,    -1,   474,    -1,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
       3,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,   171,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,   210,   211,   212,
     213,   214,   215,   216,    -1,   218,    -1,   220,    -1,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,    -1,   275,   276,    -1,   278,    -1,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,    -1,    -1,   291,   292,
     293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,   431,   432,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,    -1,    -1,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
     463,    -1,   465,   466,   467,   468,   469,   470,   471,    -1,
      -1,   474,    -1,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,    -1,     3,   500,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    15,    16,    -1,   514,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,    -1,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,   497,    -1,     3,    -1,
     501,   502,   503,     8,   505,   506,   507,   508,   509,   510,
      15,    16,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,   210,   211,   212,   213,   214,
     215,   216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,    -1,
     275,   276,    -1,   278,    -1,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,
      -1,   296,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,   431,   432,   433,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,    -1,
      -1,   446,   447,   448,    -1,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,   463,    -1,
     465,   466,   467,   468,   469,   470,   471,    -1,    -1,   474,
      -1,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,    -1,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
      -1,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,    -1,
      53,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
       8,    -1,    -1,    11,   176,    -1,    53,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    36,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,   176,    -1,    53,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   236,   198,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,   274,   236,   198,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,    -1,   221,   222,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   236,    -1,   277,    -1,   193,    -1,    -1,    -1,
      -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,
     274,    -1,    -1,   277,    -1,   193,    -1,    -1,    -1,   236,
     198,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   236,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,   515,   391,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,   498,    -1,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    36,    -1,
      -1,    -1,   515,   391,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,    -1,    -1,
      -1,   515,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,   506,
     507,   508,   509,   510,    36,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
      -1,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    36,    -1,    -1,    -1,   515,    80,    -1,
      -1,    -1,    -1,    46,     8,    -1,    -1,    11,   176,    -1,
      53,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
     198,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,   176,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,   274,    -1,    -1,   277,
      -1,   193,    -1,    -1,    -1,    -1,   198,    36,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,   294,    46,    -1,    -1,
      -1,    -1,    -1,   176,    53,    -1,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   236,   198,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,   274,   236,   198,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   236,    -1,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,    -1,    -1,   277,   193,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    -1,   505,   506,   507,
     508,   509,   510,    -1,    -1,    -1,    -1,   515,   391,    -1,
      -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,
     503,    -1,   505,   506,   507,   508,   509,   510,    -1,    -1,
     513,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,    -1,   513,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,   513,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,    -1,
      -1,   223,    -1,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,    -1,   275,   276,    -1,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,    -1,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,   210,   211,   212,   213,   214,   215,   216,
      -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,    -1,   275,   276,
      -1,   278,    -1,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,    -1,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,   431,   432,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,    -1,    -1,   446,
     447,   448,    -1,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,    -1,   474,    -1,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
     202,   203,   204,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,    -1,   417,   418,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,    -1,    -1,   446,   447,   448,    -1,   450,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,    -1,    -1,     8,    -1,
      -1,    11,    -1,   505,   506,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,    -1,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    46,    -1,   126,    -1,    -1,    -1,
      -1,    53,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,   176,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,
      -1,    -1,    36,    -1,    -1,   166,    80,    -1,    -1,    -1,
     171,    -1,    46,    -1,    -1,   176,    -1,    -1,    -1,    53,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,   236,   198,    -1,    -1,
      -1,    -1,    -1,   165,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,   274,   236,   198,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,   221,
     222,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   236,    -1,   277,    -1,    -1,   193,
      -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,
     291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,   193,
      -1,    -1,   236,    -1,   198,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,
      -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,   323,   236,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   454,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   498,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      36,    -1,    -1,    -1,    40,    -1,    -1,   391,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   498,    -1,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
     176,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,   198,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   171,     8,    -1,    -1,    11,   176,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,   274,    -1,
      -1,   277,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,
      -1,    36,    -1,    -1,    -1,   291,    -1,    -1,   294,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,   274,   198,    -1,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   294,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,   391,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,   236,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,   274,    53,    -1,   277,    -1,    -1,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,   291,
      -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,   505,
     506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,   498,
      -1,    -1,   501,   502,   503,    -1,   505,   506,   507,   508,
     509,   510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,   236,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   274,    53,   498,   277,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,   291,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,     8,    -1,    -1,    11,    -1,   176,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
     198,    36,    -1,    -1,   424,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,   198,    -1,   274,    -1,   498,   277,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    -1,    -1,   291,    -1,    -1,   294,   221,   222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,   236,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     274,    53,    -1,   277,    -1,    -1,    -1,    -1,   193,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,   291,    -1,    -1,
     294,    -1,    -1,    -1,    -1,    -1,    -1,     8,    80,    -1,
      11,    -1,    -1,    -1,    15,    16,   221,   222,    19,    20,
      21,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,     8,    -1,
      -1,    11,    -1,    -1,   176,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
     498,    -1,    -1,   501,   502,   503,    46,   505,   506,   507,
     508,   509,   510,    53,    -1,    -1,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,    -1,   274,    -1,   498,   277,    -1,   501,   502,   503,
      -1,   505,   506,   507,   508,   509,   510,    -1,    -1,   291,
     221,   222,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,
     291,    -1,    -1,   498,    -1,    -1,   501,   502,   503,    -1,
     505,   506,   507,   508,   509,   510,    -1,    -1,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,   501,
     502,   503,    -1,   505,   506,   507,   508,   509,   510,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,
     501,   502,   503,    -1,   505,   506,   507,   508,   509,   510,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,     5,    -1,    -1,    -1,   498,    -1,
      -1,   501,   502,   503,    -1,   505,   506,   507,   508,   509,
     510,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,   168,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,   168,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,   290,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,   290,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    -1,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,    -1,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,    -1,    -1,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,    -1,
     321,   322,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,    -1,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
      -1,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,    -1,   275,   276,    -1,   278,    -1,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
      -1,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,   432,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,    -1,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,    -1,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,    -1,    -1,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,    -1,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,    -1,   321,   322,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,    -1,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,    -1,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,    -1,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,    -1,    -1,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,    -1,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,    -1,   321,   322,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,    -1,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,    -1,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,    -1,    -1,   275,
     276,   277,   278,    -1,    -1,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,    -1,   299,   300,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,    -1,   321,   322,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,    -1,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,   414,   415,
      -1,   417,   418,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,    -1,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,    -1,   461,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,    -1,   184,    -1,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,   210,   211,   212,   213,   214,   215,
     216,    -1,   218,    -1,   220,    -1,    -1,   223,    -1,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,    -1,   275,
     276,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
     296,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,    -1,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,    -1,   359,   360,    -1,   362,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,    -1,    -1,
     446,   447,   448,    -1,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,   474,    -1,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    -1,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,    -1,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,    -1,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,   184,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,    -1,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,    -1,    -1,
     281,   282,   283,   284,   285,    -1,   287,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,   296,   297,    -1,   299,   300,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,    -1,    -1,   318,   319,    -1,
     321,   322,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
      -1,    -1,    -1,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
     431,    -1,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,    -1,    -1,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,    -1,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    22,   474,    -1,    -1,   477,   478,   479,   480,
     481,   482,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,
      22,    -1,    -1,   494,   495,   496,   497,    -1,    -1,    -1,
      32,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,   111,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,   143,   126,   127,    -1,    -1,    -1,    -1,
      -1,   151,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,
      -1,   143,    -1,    -1,    -1,    -1,    -1,   167,    -1,   151,
      -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,   171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   239,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   314,   315,   316,    -1,    -1,    -1,
      -1,    -1,   322,    -1,    -1,   325,    -1,    -1,    -1,    -1,
      -1,    -1,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,   325,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   354,    -1,    -1,    -1,    -1,    -1,    -1,   379,
      -1,   363,    -1,    -1,    -1,    -1,   386,    -1,    -1,    -1,
     390,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,
     400,    -1,    -1,    -1,   386,    -1,    -1,    -1,   390,    -1,
      -1,    -1,   412,    -1,    -1,    -1,   416,    -1,   400,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     412,    -1,    -1,    -1,   416,    -1,   436,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   449,
      -1,    -1,    -1,    -1,   436,   455,    -1,    -1,    -1,    -1,
     460,    -1,    -1,    -1,   464,    -1,    -1,   449,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,   476,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,   500,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   143,   151,
     153,   154,   167,   171,   197,   213,   239,   314,   315,   316,
     322,   325,   354,   363,   379,   386,   390,   400,   412,   416,
     436,   449,   452,   455,   460,   476,   500,   514,   526,   527,
     528,   529,   530,   537,   548,   549,   550,   553,   554,   556,
     567,   585,   633,   643,   646,   649,   653,   655,   658,   659,
     663,   669,   671,   675,   682,   686,   687,   688,   695,   700,
     716,   719,   720,   723,   725,   726,   727,   728,   730,   732,
     733,   737,   790,   791,   957,   959,   960,   961,   966,   969,
     975,   976,   977,   981,   430,   479,   958,   202,   370,   381,
     416,   466,   108,   191,   551,   958,     3,    22,    23,    24,
      25,    26,    27,    28,    29,    31,    32,    33,    42,    43,
      44,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    59,    60,    61,    62,    63,    64,    67,
      68,    69,    70,    71,    72,    73,    75,    76,    77,    78,
      79,    81,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    94,    95,    96,    97,    98,    99,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   118,   120,   121,   122,   123,   124,
     125,   128,   129,   130,   131,   134,   135,   136,   137,   138,
     140,   141,   142,   144,   145,   146,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   160,   162,   163,
     164,   165,   167,   169,   170,   172,   173,   174,   175,   176,
     177,   179,   181,   182,   183,   184,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   199,   200,
     201,   202,   203,   204,   205,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   218,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   233,   234,   235,
     236,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   275,   276,   277,
     278,   280,   281,   282,   283,   284,   285,   287,   288,   291,
     292,   293,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     329,   330,   331,   332,   333,   334,   336,   337,   338,   339,
     340,   341,   342,   343,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   391,   392,   393,   394,
     395,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   414,   415,   417,   418,
     419,   420,   421,   422,   423,   425,   426,   427,   430,   431,
     432,   433,   434,   436,   437,   438,   439,   440,   441,   442,
     443,   446,   447,   448,   450,   451,   452,   453,   455,   456,
     457,   458,   459,   460,   461,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   474,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   560,   636,   637,   638,
     866,   946,   950,     3,   175,   246,   409,   555,   560,   636,
     289,   958,    55,   171,   514,   580,   177,   240,   294,   313,
     370,   420,   422,   439,   445,   448,   631,   651,   694,     5,
      30,   325,   560,   561,   945,     3,    30,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    45,    49,    53,    54,
      55,    56,    57,    58,    65,    66,    71,    72,    74,    79,
      80,    81,    82,    83,    89,    93,   100,   101,   108,   112,
     115,   117,   119,   126,   127,   132,   133,   139,   143,   147,
     152,   158,   159,   161,   164,   166,   168,   170,   171,   172,
     175,   176,   178,   180,   181,   182,   185,   193,   198,   206,
     208,   209,   215,   216,   217,   218,   219,   221,   222,   224,
     231,   232,   234,   236,   237,   246,   267,   268,   269,   273,
     274,   277,   279,   280,   282,   286,   289,   290,   294,   295,
     298,   299,   301,   302,   314,   315,   316,   317,   320,   321,
     324,   328,   335,   339,   344,   358,   361,   365,   379,   380,
     387,   390,   391,   394,   396,   409,   411,   412,   413,   416,
     418,   424,   426,   427,   428,   429,   432,   434,   435,   438,
     444,   445,   449,   454,   460,   461,   462,   464,   472,   473,
     475,   476,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   566,   636,   640,   642,    24,    81,    97,
     146,   156,   168,   173,   202,   245,   249,   319,   334,   367,
     370,   381,   384,   402,   416,   422,   423,   433,   439,   466,
     651,   664,   665,   668,   958,   945,   100,   137,   464,   514,
     529,   530,   537,   553,   554,   567,   585,   633,   643,   646,
     653,   655,   658,   659,   663,   671,   678,   682,   688,   695,
     716,   719,   720,   723,   725,   957,   959,   961,   966,   969,
     975,   981,   108,    75,   213,    66,    79,    81,   158,   231,
     280,   290,   302,   320,   366,   411,   432,   434,   438,   460,
     514,   559,   560,   561,   726,   791,   793,   795,   805,   812,
     813,   866,   868,   869,   108,     5,   560,   562,   717,   717,
     560,   945,    30,   177,   240,   385,   426,   430,   560,   967,
     968,   979,   958,    30,   132,   746,   747,   177,   240,   370,
     385,   426,   970,   971,   979,   958,   560,   725,   737,   980,
     560,   812,   416,   743,   559,   172,   514,   963,   514,   342,
     738,   739,   945,   738,   726,   727,   975,     0,   517,   464,
     676,   122,   212,   451,   147,   217,   295,   444,   749,   750,
     795,   795,   726,   728,   730,   518,    30,   426,   430,   725,
     980,   191,   559,   945,   191,   559,   191,   812,   191,   559,
     274,   562,   512,   516,   563,   564,   514,    81,    82,    97,
     108,   173,   202,   245,   249,   370,   381,   402,   416,   423,
     439,   466,   558,   108,   725,   559,   420,   422,   420,   422,
     352,   191,   559,   559,   173,   245,   342,   381,   416,   466,
     644,   377,   202,    30,   945,   191,   566,   251,   433,   107,
     416,   416,   466,   374,   377,   191,   560,   666,   952,   191,
     942,   945,   191,   945,   514,   674,   294,   422,   678,     3,
     460,   636,   640,   679,   681,   682,   684,   685,   676,   560,
     562,   555,   717,   514,   514,   166,   514,   726,   813,   514,
     514,   559,   514,   514,   171,   514,   514,   514,   514,   726,
     791,   795,   805,   507,   563,    40,   560,   806,   807,   806,
     379,   518,   729,    37,    42,   101,   172,   208,   224,   234,
     268,   314,   321,   361,   380,   449,   809,   807,    40,   560,
     806,   808,   500,   817,   562,   171,   503,   514,   514,   721,
     968,   968,   968,   497,   223,   516,   289,     4,     6,     7,
       8,     9,    10,    39,    54,    56,    57,    65,    71,    72,
      83,   112,   115,   117,   136,   152,   159,   164,   181,   182,
     215,   216,   218,   246,   267,   269,   274,   279,   282,   291,
     339,   365,   394,   426,   427,   435,   461,   498,   505,   506,
     507,   512,   514,   519,   520,   521,   522,   560,   562,   726,
     780,   829,   832,   835,   836,   837,   839,   840,   841,   842,
     844,   845,   860,   862,   863,   864,   865,   866,   867,   869,
     870,   885,   886,   897,   919,   924,   932,   933,   934,   946,
     947,   948,   931,   933,   970,   970,   562,   970,   497,   171,
     428,   503,   516,   563,   660,   812,     3,   170,   172,   464,
     682,   962,   964,   170,   965,   860,   903,   904,   738,   518,
     514,   954,   515,   515,   515,   528,   559,   171,   294,   703,
     660,    30,   132,   744,   744,    59,   744,   161,   166,   237,
     286,   755,   757,   758,   783,   785,   786,   787,   180,   289,
     454,   289,   749,   750,   514,   417,   978,   497,   223,   152,
      26,    32,   137,   293,   350,   354,   386,   457,   542,   545,
     546,   350,   152,    40,    60,   106,   201,   250,   260,   272,
     304,   350,   356,   381,   386,   400,   531,   534,   545,   152,
     350,   386,   545,   152,   350,   386,   545,   152,    40,   552,
     860,   925,   565,   566,   564,     3,    30,    37,    42,    49,
      55,    81,    83,    89,   101,   132,   170,   172,   175,   176,
     193,   208,   221,   222,   224,   234,   236,   246,   268,   277,
     299,   301,   321,   361,   380,   391,   409,   418,   438,   462,
     464,   515,   636,   641,   860,   906,   907,   949,   955,   860,
     416,   466,   374,   559,   560,   515,   514,   620,   370,   631,
     651,   274,   647,    40,   466,   191,   559,   191,   559,   635,
     191,   559,   191,   559,   191,   560,   650,    89,   691,   152,
     480,    90,   129,   307,   421,   191,   560,   152,   516,   953,
      63,   357,   518,   667,   152,   518,   667,   152,   289,   672,
     673,   860,   955,   352,   515,   518,     4,   159,   289,   435,
     505,   506,   533,   536,   562,   677,   679,   680,   683,   948,
     678,   428,   514,   575,   579,   171,   860,   904,   514,     3,
      68,    69,   109,   110,   113,   114,   188,   189,   252,   253,
     254,   255,   256,   257,   258,   259,   262,   263,   375,   376,
     470,   471,   494,   495,   562,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,   857,   858,   909,   910,   807,
     808,   860,   559,   860,   911,   505,   506,   560,   861,   862,
     886,   897,   913,   514,   860,   903,   914,   860,    58,   171,
     232,   429,   860,   904,   917,   860,   515,   561,   514,   418,
     763,   764,   764,   746,   747,   795,   219,   741,    37,   224,
     380,   809,   224,   299,   810,   795,   810,   224,   809,   514,
     224,   810,   148,   199,   797,   224,   764,   514,   561,   514,
     764,   296,   560,   562,   718,   860,   972,   974,   906,     3,
      37,    42,    49,    54,    55,    56,    57,    71,    72,    81,
      83,    89,   101,   112,   115,   164,   170,   172,   176,   193,
     208,   215,   216,   218,   221,   222,   224,   234,   236,   246,
     267,   268,   269,   277,   282,   299,   301,   321,   339,   361,
     365,   380,   387,   391,   394,   409,   418,   426,   427,   438,
     444,   461,   464,   636,   639,   823,   825,   826,   828,   830,
     832,   834,   836,   837,   838,   840,   841,   844,   845,   908,
     951,    40,   235,   560,   514,   512,   726,   463,   843,   860,
     923,   843,   843,   514,   514,   831,   831,   324,   726,   514,
     833,   522,    71,    72,   843,   860,   831,   514,   514,   478,
     500,   514,   846,   514,   846,   860,   860,   860,   148,   935,
     936,   860,   904,   905,   726,   860,   903,     9,   566,   561,
     887,   888,   889,   516,   563,   926,   563,   514,   562,   514,
     514,   562,   948,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    21,    36,    40,    46,    53,    80,   176,   193,
     198,   221,   222,   236,   274,   277,   291,   294,   391,   498,
     501,   502,   503,   505,   506,   507,   508,   509,   510,   895,
     896,   897,   899,   929,   477,   871,   301,   860,   518,   741,
     514,   562,   741,     3,   117,   240,   533,   562,   845,   973,
     104,   974,   974,   560,    40,   560,   515,   518,   676,   518,
     515,   739,   942,   943,    40,   954,   660,   192,   352,   219,
     386,   728,   728,    30,   751,   752,   860,    59,   728,   745,
     163,   271,   771,   226,   272,   338,   389,   451,     4,     9,
      30,   766,   860,   505,   506,   767,   768,   860,   862,   783,
     784,   758,   757,   755,   756,   166,   786,   284,   788,    59,
     734,   735,   736,   798,   861,   933,   933,   755,   783,   904,
     235,   559,    74,    82,    93,   168,   191,   328,   445,   560,
     602,   612,   627,    82,    93,   724,    93,   724,   514,   428,
     514,   600,   244,   448,   600,    93,   518,   428,   559,     3,
     828,   533,    59,   535,   533,   533,   106,   250,   260,    59,
     428,   476,   500,   532,   265,   370,   532,   534,   812,    93,
     428,   724,   370,   559,   428,   370,   551,   560,   575,   513,
     524,   906,   906,   907,   518,   749,   750,    13,    14,   221,
      90,   129,   307,   421,   221,   428,   428,   560,   619,   624,
     476,   578,   559,   342,   381,   416,   466,   644,   377,   152,
     100,   585,   648,   653,   688,   981,   144,   825,   559,   274,
     531,   654,   274,   514,   620,    40,   274,   620,   274,   514,
     645,   274,   198,   652,   191,   560,   614,   692,   566,   152,
     171,   670,   666,   565,   516,   952,   942,   945,   945,   952,
     515,   518,    13,   678,   684,     4,   948,     4,   948,   562,
     566,   577,   584,    55,   102,   123,   141,   145,   167,   170,
     186,   279,   287,   309,   336,   581,   718,    40,   515,   860,
     515,   171,   518,   515,   317,   912,   515,   861,   861,    11,
      15,    16,    19,    20,    21,   198,   221,   291,   501,   502,
     503,   505,   506,   507,   508,   509,   510,   897,   861,   515,
     814,   815,   868,   166,   171,   915,   916,   518,   515,    40,
     917,   904,   917,   917,   171,   515,    40,   806,   514,   943,
       4,     9,   560,   759,   761,   762,   933,   931,   177,   240,
     416,   420,   422,   448,   559,   742,   473,   818,   795,   224,
     795,   289,   454,   811,   795,   224,   933,   795,   281,   281,
     514,   795,   561,   819,   820,   514,   561,   819,   518,   515,
     518,   516,   514,   828,   514,   514,   516,    39,   827,   514,
     847,   848,   849,   850,   851,   852,   853,   854,   855,   856,
     857,   858,   859,   515,   518,   831,   567,   659,   695,   722,
     725,   959,   904,   905,   514,   472,   920,   921,   860,   905,
     948,   860,   890,   891,   892,   893,   843,   843,     8,    15,
      16,    19,    20,    21,   501,   502,   503,   505,   506,   507,
     508,   509,   510,   560,   895,   900,   515,   904,   426,   426,
     948,   948,   514,   560,   352,   940,   166,   513,   515,   518,
     524,   518,   523,   507,   564,   904,   948,   860,   859,   859,
     825,   860,   860,   860,   860,   860,   860,   860,   860,     5,
     566,   956,   426,    45,   413,   930,   952,   860,   860,   514,
     726,   918,   132,   159,   274,   279,   284,   435,   446,   860,
     279,   514,   860,   428,    53,   176,   193,   198,   236,   391,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
      30,    38,   396,   894,   512,   516,   928,   180,   162,   872,
     365,   514,   886,   934,   171,   792,   906,   792,   514,   562,
     560,   559,   962,   548,   559,   860,   518,   515,   249,   274,
     740,   454,   662,   559,   697,   514,   560,   702,   712,   713,
     715,    41,   126,   753,   518,   454,   753,   265,   728,   365,
     366,   505,   506,   768,   770,   862,   389,   226,   290,   312,
     312,   518,   509,     4,   769,   948,   769,   365,   366,   770,
     559,   941,   278,   393,   789,   514,   943,   944,   518,   180,
     454,   198,   180,   219,   784,   756,   515,   350,   545,   514,
     191,   612,   945,   226,   274,   226,   454,   514,   605,   824,
     825,   945,   560,   191,   945,   191,   560,    26,   137,   386,
     541,   544,   566,   596,   610,   945,   566,   604,   623,   945,
     542,   945,   350,   386,   531,   545,   533,   952,   945,   533,
     952,   945,   533,   350,   386,   545,   945,   945,   945,   945,
     350,   386,   545,   945,   945,   562,   506,   860,   925,   749,
     749,   749,   462,   907,   192,   355,   748,   860,   860,   279,
     557,   562,   279,   557,   560,   333,   574,   515,   518,   287,
     171,   428,   569,   647,   466,   559,   559,   635,   559,   559,
     650,   559,   294,   631,   514,   726,   514,   152,   152,   236,
     560,   602,   612,   615,   618,   628,   630,   476,   478,   607,
     151,   725,   152,   476,   693,   152,   515,   906,    40,   152,
       3,   514,   274,   289,   560,     3,   667,   565,   667,   289,
     667,   672,   860,   575,   507,   514,   533,   576,   683,   865,
     515,   518,    40,   573,   562,   573,   274,   279,   336,   573,
      59,   573,   825,   515,   860,   860,   860,   915,   825,   861,
     861,   861,   861,   861,   861,   132,   274,   284,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   515,   518,
      40,   816,   860,   860,   916,   915,   825,   515,   515,   515,
     904,   825,   943,   515,   312,   509,   312,   366,   509,   514,
     514,   741,   420,   422,   420,   422,   559,   743,   743,   743,
     860,   180,   772,   811,   795,   860,   514,   795,   166,   514,
     561,   802,   811,   825,   515,   518,   819,   515,   972,     3,
     908,    39,   827,   560,   822,   822,     3,   512,   512,   948,
     428,   428,   428,   428,   825,   515,   513,   904,   860,   139,
     921,   922,   515,   515,   515,   524,   518,   523,   516,   515,
     515,   497,   497,   515,   515,   943,   514,   860,   937,   560,
     860,   860,   887,   936,   515,   515,   515,   497,   861,   861,
     145,   904,   171,   132,   159,   279,   284,   435,   446,   514,
     145,   900,   860,   413,   930,   860,   918,   860,   428,   514,
     726,   860,   925,   565,   514,   514,   155,   873,   793,   794,
     818,   749,   818,   948,   859,   954,   954,   249,   514,   794,
     473,   661,    40,    59,   698,   708,   715,   926,   518,   792,
     503,   499,   754,   752,   291,   895,   898,   754,     4,   948,
     770,   290,   451,   767,   518,   243,   943,   734,    59,   933,
     514,   561,    59,   265,   428,   860,   274,   627,   514,   152,
     514,   605,   202,   624,   625,   586,    40,   175,   595,   621,
     586,    26,   137,   354,   356,   386,   538,   539,   540,   546,
     547,   152,   667,   152,   667,   596,   610,   596,   515,   518,
     562,   589,   503,   516,   515,   518,   428,   370,    93,   428,
     724,   370,   428,   428,   428,   370,   552,   524,   513,   524,
     748,   748,   748,   907,   281,   281,   515,   514,   568,     3,
     403,   404,   562,   583,   619,   574,   559,   654,   514,    40,
     620,   645,   652,   647,   352,   416,   562,   656,   657,   624,
     559,   559,   635,   559,   515,   518,   287,   600,   287,   289,
     599,   945,   476,   634,   559,   600,    40,   559,   515,   416,
     860,   650,   584,   152,   559,   670,   952,   571,   582,   683,
     577,   562,   562,   279,   624,   507,   624,   562,   507,   624,
     562,   515,   515,   916,   171,   132,   284,   514,   817,   814,
     514,   515,   515,   515,   560,   759,   818,   743,   743,   743,
     743,   559,   559,   559,    59,   185,   781,   811,   943,   514,
     799,   800,   801,   863,   946,   943,   166,    80,   821,   820,
     515,   515,   512,   825,   515,   518,   515,   948,   513,   948,
     515,   848,   850,   851,   852,   851,   852,   852,   515,   424,
     860,   143,   860,   890,   900,   846,   846,   515,   860,   937,
     938,   939,    40,   198,   515,   940,   859,   860,    36,    36,
     860,   515,   860,   171,   514,   908,   860,   515,   145,   861,
     861,   145,   145,   860,   860,   513,   524,   514,   927,   750,
     473,   860,   300,   877,   518,   772,   748,   772,   515,   722,
     860,   358,   706,   560,   265,   320,   117,   303,   514,   696,
     725,   515,   518,   702,   661,   860,   163,   230,   514,   754,
     290,   559,   515,   944,   180,   726,   727,   933,   944,   945,
     945,   515,   152,   625,   612,   625,   586,   614,   518,   515,
     119,   206,   272,   274,   611,   514,    33,    59,   632,   621,
      74,    80,    93,   117,   119,   206,   274,   279,   328,   344,
     445,   454,   591,   592,   606,   175,   117,   190,   274,   600,
     532,   107,   117,   175,   274,   402,   405,   534,   600,   386,
     540,   439,   945,   560,   544,     3,    37,    42,    49,    55,
      81,    83,    89,   101,   170,   172,   175,   176,   193,   208,
     221,   222,   224,   234,   236,   246,   268,   273,   277,   291,
     299,   301,   321,   361,   380,   387,   391,   409,   418,   438,
     444,   464,   505,   506,   533,   562,   587,   626,   636,   642,
     825,   898,   949,   566,   623,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   575,   925,   925,   515,   515,
     515,   749,   107,   370,   516,   532,   583,   514,   618,   725,
     693,    40,   514,   631,   191,   559,   515,   518,   515,   654,
     514,    40,   609,   607,   615,    86,   674,   107,   272,   620,
     725,   645,   725,   652,   515,   614,   454,   690,   667,   515,
     518,   624,   861,   171,   514,   908,   819,   515,   518,   515,
     772,   559,   559,   559,   559,    30,   103,   181,   364,   514,
     773,   774,   775,   776,   777,   778,   779,   860,   860,   475,
     874,   515,   862,   901,   902,   198,   180,   796,   800,   514,
     515,   802,   803,   804,   952,   827,   948,   827,   560,   827,
     513,   513,   860,   518,   515,   560,   860,   862,   860,   860,
     860,   908,   515,   860,    36,    36,   860,   860,   145,   515,
     506,   925,   515,   906,   515,   860,   515,   514,   560,   878,
     781,   515,   781,   562,   515,   932,   460,   415,   453,   707,
     560,   701,   711,   289,   704,   503,   715,   706,   900,    59,
     515,   515,   459,   460,   731,   586,   612,   515,   515,   476,
     617,   120,   194,   204,   119,   456,   860,   117,    40,   514,
     952,   945,   861,   120,   194,   119,   279,   226,   559,   617,
      88,   632,   191,   279,   533,   860,   632,   279,   505,   506,
     536,   560,   825,   667,   667,     3,   246,   409,   949,   953,
     503,   428,   428,   513,   513,   748,   515,   515,   560,   575,
     454,   570,   572,   624,   515,   634,    40,   416,   860,   584,
     416,   274,   514,   562,   693,   618,   151,   725,   149,   200,
     599,   122,   137,   327,   634,   107,   693,   476,   982,    40,
     514,   289,   560,   689,   514,   582,   861,   908,   515,   515,
       9,   351,   765,   781,   514,   388,   514,   515,   518,   560,
     875,   876,   335,   782,   518,   515,   514,   561,    59,   515,
     906,   198,   515,   803,   513,   825,   937,   513,   191,   515,
     860,   860,   860,   524,   513,   524,   515,   515,   560,   879,
     874,   562,   874,   518,   459,   926,   515,   518,    91,   706,
     860,   515,   944,   944,   344,   617,   514,   608,   586,   515,
     190,   514,   860,   274,   592,   617,   620,   945,    40,   152,
     821,   953,   509,   587,   945,   945,   515,   532,   124,   515,
     607,   725,   725,   515,   559,   152,    40,   515,   945,   634,
      30,    85,    94,   118,   190,   203,   402,   405,   603,   603,
     366,   366,    40,    64,    74,   240,   416,   860,   584,   559,
     514,   560,   705,   714,   868,   515,   515,   514,   874,   904,
     514,   904,   775,    40,   518,   860,   454,   760,   862,   933,
     943,   807,   749,   514,   807,   860,   925,   925,   309,   880,
     782,   782,   725,   303,   725,   701,   289,   514,   699,   559,
     586,   566,   613,   616,   406,   468,   593,   594,   514,   588,
     860,   515,   248,   629,   190,   454,   543,   509,   439,   575,
     562,   693,   599,   982,   514,   559,   725,   607,   674,   725,
      74,   292,    74,   725,   515,   690,   860,    80,   709,   515,
     518,   709,     9,   782,   515,   774,   515,   878,   876,   368,
     515,   748,   933,   513,   513,   513,    59,   749,   760,   760,
     707,    93,   714,   133,   620,   503,   515,   518,   531,   515,
     272,   601,   172,   308,   392,   289,   597,   598,   622,   588,
     860,   439,    40,   514,   982,   599,   634,   982,   292,   292,
     514,   515,   952,   710,   952,   693,   705,   710,   515,   760,
     515,   762,   515,   515,   903,   183,   337,   366,   881,   459,
     945,   515,   275,   451,   629,   587,   616,   515,   594,   204,
     122,   451,   289,   622,   289,   597,   725,   714,   709,   753,
     818,   753,    53,   104,   441,   860,   882,   883,   882,   882,
     515,   725,   818,   386,   598,    63,   272,   357,   386,   590,
     590,   982,   515,   710,   754,   754,   883,   365,   165,   323,
     165,   323,   148,   884,   884,   884,   713,   586,    25,   117,
     279,   693,   753,    36,   104,   180,   272,   425,   818,   818,
     754,   883,   365,   297
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   525,   526,   527,   527,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   537,   537,   537,   537,
     537,   537,   537,   537,   538,   538,   539,   539,   540,   540,
     540,   540,   541,   541,   542,   542,   542,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,   542,   542,   542,
     542,   542,   542,   543,   543,   544,   544,   544,   544,   545,
     545,   546,   547,   547,   547,   658,   658,   658,   658,   559,
     559,   560,   560,   560,   561,   561,   562,   563,   563,   564,
     565,   566,   566,   566,   566,   723,   723,   723,   723,   723,
     723,   723,   723,   723,   723,   723,   723,   723,   724,   724,
     695,   696,   696,   696,   696,   696,   697,   697,   698,   698,
     698,   699,   699,   699,   700,   700,   701,   702,   702,   703,
     703,   703,   704,   704,   704,   705,   705,   705,   706,   706,
     707,   707,   708,   708,   709,   709,   710,   710,   711,   711,
     712,   712,   713,   713,   714,   714,   715,   655,   655,   655,
     656,   656,   657,   657,   719,   719,   719,   653,   653,   653,
     654,   654,   649,   649,   649,   650,   650,   651,   651,   651,
     652,   652,   671,   671,   671,   672,   672,   673,   673,   674,
     674,   530,   530,   531,   531,   532,   532,   532,   533,   533,
     533,   533,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   535,   535,   536,   536,
     536,   669,   669,   670,   670,   957,   957,   957,   957,   957,
     957,   958,   958,   958,   960,   585,   585,   585,   586,   586,
     587,   587,   587,   587,   587,   587,   588,   588,   589,   590,
     590,   590,   590,   590,   591,   591,   591,   591,   592,   592,
     592,   592,   592,   592,   592,   592,   593,   593,   594,   594,
     595,   595,   595,   596,   597,   598,   598,   598,   598,   598,
     599,   599,   599,   599,   600,   601,   601,   602,   602,   603,
     603,   603,   603,   603,   603,   603,   603,   604,   604,   605,
     606,   606,   606,   606,   607,   607,   607,   607,   608,   609,
     609,   609,   610,   611,   611,   611,   611,   611,   611,   612,
     612,   613,   613,   614,   615,   615,   615,   616,   616,   617,
     617,   618,   618,   618,   619,   620,   620,   621,   621,   622,
     623,   623,   623,   623,   624,   624,   625,   625,   626,   626,
     626,   627,   627,   627,   627,   627,   627,   628,   628,   629,
     629,   629,   629,   630,   631,   631,   631,   631,   631,   631,
     631,   631,   632,   632,   663,   663,   663,   663,   663,   663,
     664,   664,   664,   664,   664,   664,   664,   664,   664,   664,
     664,   664,   664,   664,   664,   664,   664,   664,   665,   665,
     665,   665,   665,   665,   666,   666,   667,   667,   667,   668,
     668,   668,   643,   643,   643,   643,   643,   643,   644,   644,
     645,   645,   959,   567,   567,   567,   568,   568,   568,   569,
     569,   570,   570,   571,   571,   572,   572,   573,   573,   574,
     574,   575,   575,   576,   576,   576,   576,   576,   576,   577,
     578,   578,   579,   579,   580,   580,   581,   581,   581,   581,
     581,   581,   581,   581,   581,   581,   581,   581,   581,   581,
     581,   581,   582,   583,   583,   583,   583,   583,   584,   584,
     725,   725,   726,   726,   726,   727,   727,   727,   727,   727,
     727,   727,   727,   728,   728,   729,   729,   730,   730,   730,
     730,   730,   730,   730,   730,   730,   730,   730,   730,   730,
     730,   730,   730,   730,   730,   730,   731,   731,   732,   732,
     733,   733,   734,   734,   734,   735,   735,   736,   736,   737,
     737,   737,   738,   738,   739,   740,   740,   740,   741,   741,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   743,
     743,   744,   744,   744,   745,   746,   746,   747,   747,   748,
     748,   748,   749,   749,   750,   750,   751,   751,   752,   752,
     753,   753,   753,   754,   754,   754,   755,   755,   755,   755,
     756,   756,   757,   757,   757,   757,   758,   758,   759,   759,
     759,   759,   759,   759,   760,   760,   761,   761,   762,   762,
     762,   762,   763,   764,   764,   765,   765,   766,   766,   766,
     766,   766,   767,   768,   768,   768,   769,   769,   770,   770,
     771,   771,   772,   772,   772,   773,   773,   774,   774,   775,
     775,   775,   775,   775,   776,   777,   778,   779,   780,   780,
     781,   781,   782,   782,   783,   783,   784,   784,   785,   785,
     786,   787,   787,   787,   787,   788,   788,   789,   789,   789,
     790,   790,   791,   791,   792,   792,   793,   793,   794,   794,
     795,   795,   795,   795,   795,   795,   795,   795,   795,   795,
     796,   796,   797,   797,   797,   798,   798,   799,   799,   800,
     800,   801,   801,   802,   802,   803,   804,   804,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   806,
     806,   806,   806,   807,   807,   808,   808,   808,   808,   808,
     809,   809,   809,   809,   809,   809,   810,   810,   811,   811,
     812,   812,   812,   812,   813,   813,   814,   815,   815,   816,
     816,   817,   817,   818,   818,   819,   819,   820,   821,   821,
     822,   822,   823,   823,   824,   824,   825,   825,   825,   825,
     825,   825,   825,   825,   825,   825,   826,   826,   827,   827,
     827,   828,   828,   828,   828,   828,   828,   828,   829,   829,
     829,   829,   830,   831,   831,   832,   832,   832,   832,   832,
     832,   832,   832,   832,   832,   832,   833,   833,   834,   834,
     835,   835,   836,   837,   838,   838,   839,   839,   840,   841,
     842,   842,   842,   842,   842,   842,   843,   843,   844,   844,
     844,   844,   845,   846,   846,   846,   847,   847,   848,   848,
     849,   849,   850,   850,   851,   851,   852,   852,   853,   853,
     854,   854,   855,   855,   856,   856,   857,   857,   858,   858,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     859,   859,   859,   859,   859,   859,   859,   859,   859,   859,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     860,   860,   860,   860,   860,   860,   860,   860,   860,   860,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   862,   862,   862,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   864,   864,   864,   864,   864,   864,   865,   866,   866,
     866,   866,   866,   866,   867,   867,   868,   868,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   870,   870,   871,   871,   872,   872,   872,   873,
     873,   874,   874,   875,   875,   876,   877,   877,   877,   878,
     879,   879,   880,   880,   881,   881,   881,   881,   882,   882,
     883,   883,   883,   883,   883,   884,   884,   884,   884,   884,
     885,   885,   886,   886,   887,   888,   888,   889,   889,   890,
     891,   891,   892,   892,   893,   893,   894,   894,   894,   895,
     895,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   897,   897,   898,   898,   899,
     899,   899,   899,   899,   899,   899,   899,   900,   900,   901,
     901,   902,   902,   903,   903,   904,   904,   905,   905,   906,
     906,   907,   907,   907,   908,   908,   909,   909,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   911,   911,   912,   913,   913,   914,   914,   914,
     914,   914,   914,   915,   916,   917,   917,   917,   918,   918,
     919,   920,   920,   921,   922,   922,   923,   923,   924,   924,
     564,   564,   564,   564,   925,   925,   926,   926,   927,   927,
     927,   928,   928,   928,   928,   928,   929,   929,   930,   930,
     931,   931,   932,   932,   933,   933,   934,   934,   934,   935,
     935,   936,   936,   937,   938,   938,   939,   939,   940,   940,
     940,   941,   941,   942,   942,   943,   943,   944,   944,   945,
     946,   946,   947,   947,   947,   947,   947,   947,   947,   947,
     947,   947,   947,   947,   947,   947,   948,   949,   949,   949,
     950,   950,   950,   951,   951,   951,   952,   952,   953,   953,
     954,   954,   955,   956,   956,   720,   721,   721,   722,   722,
     722,   722,   722,   646,   646,   646,   647,   647,   648,   648,
     648,   648,   688,   688,   689,   690,   690,   691,   691,   692,
     692,   693,   693,   694,   694,   529,   529,   529,   529,   529,
     529,   554,   554,   555,   555,   556,   556,   557,   557,   558,
     558,   558,   558,   558,   558,   558,   558,   558,   558,   558,
     558,   558,   558,   558,   558,   558,   558,   686,   686,   687,
     675,   675,   675,   675,   676,   676,   677,   677,   677,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   679,
     679,   679,   680,   680,   681,   681,   682,   682,   683,   683,
     683,   683,   684,   685,   685,   969,   969,   969,   969,   970,
     970,   970,   970,   971,   971,   972,   973,   973,   973,   973,
     973,   973,   973,   974,   974,   716,   716,   716,   716,   716,
     717,   717,   718,   718,   961,   961,   961,   961,   961,   962,
     962,   962,   962,   962,   963,   963,   964,   964,   965,   965,
     659,   659,   660,   660,   660,   661,   661,   662,   662,   548,
     548,   549,   549,   550,   550,   550,   551,   551,   552,   552,
     966,   966,   966,   966,   967,   967,   968,   968,   968,   975,
     975,   975,   975,   975,   975,   975,   975,   976,   976,   977,
     977,   978,   978,   979,   979,   980,   980,   553,   981,   981,
     981,   981,   981,   982,   982,   982,   982,   633,   633,   633,
     634,   634,   634,   635,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     6,     4,     6,
       4,     6,     4,     6,     1,     2,     3,     2,     1,     3,
       2,     3,     1,     3,     2,     5,     3,     6,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     1,     0,     2,     3,     2,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     6,     6,     8,     6,     8,
       6,     8,     6,     8,     8,    10,     8,    10,     1,     0,
       9,     1,     4,     4,     7,     2,     1,     3,     2,     2,
       0,     4,     3,     0,     1,     0,     2,     3,     5,     2,
       2,     0,     8,     5,     0,     5,     5,     7,     2,     0,
       1,     1,     1,     3,     2,     0,     1,     0,     1,     3,
       1,     3,     1,     2,     1,     3,     2,     6,     8,     5,
       1,     0,     1,     3,     2,     4,     5,     5,     8,     7,
       1,     0,     8,    11,    10,     0,     1,     0,     1,     1,
       0,     2,     3,     9,    12,     1,     3,     1,     3,     3,
       0,     4,     6,     1,     2,     1,     1,     0,     1,     2,
       2,     1,     2,     2,     1,     2,     3,     2,     2,     2,
       2,     3,     3,     3,     1,     3,     1,     0,     1,     2,
       2,     5,     7,     0,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     0,     2,     9,    12,    11,     0,     2,
       1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
       2,     3,     5,     3,     2,     5,     1,     1,     1,     0,
       5,     7,     5,     2,     3,     1,     1,     2,     2,     0,
       3,     4,     4,     0,     3,     2,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       1,     2,     2,     2,     2,     2,     2,     0,     3,     3,
       3,     0,     1,     2,     1,     2,     2,     2,     2,     3,
       4,     1,     3,     1,     1,     1,     1,     3,     1,     2,
       0,     1,     2,     0,     1,     3,     0,     2,     0,     3,
       3,     1,     5,     3,     1,     3,     1,     2,     1,     4,
       5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
       2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
       1,     0,     1,     2,     6,     4,     6,     4,     6,     8,
       1,     1,     1,     1,     2,     1,     2,     1,     2,     1,
       1,     1,     1,     3,     3,     3,     3,     1,     2,     2,
       1,     3,     1,     1,     1,     3,     1,     1,     0,     1,
       1,     1,     8,    11,    10,     7,    10,     9,     1,     1,
       2,     3,     8,    11,     9,     7,     0,     3,     3,     1,
       1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
       0,     1,     3,     1,     1,     1,     3,     1,     0,     2,
       2,     0,     2,     0,     1,     0,     1,     1,     1,     3,
       3,     1,     1,     3,     3,     3,     3,     3,     3,     4,
       3,     2,     1,     1,     1,     1,     3,     1,     1,     3,
       1,     1,     3,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,     3,     0,    11,    11,    10,
      12,     1,     2,     5,     4,     4,     4,     4,     7,     5,
       4,     7,     6,     9,     9,     4,     1,     1,     1,     1,
       1,     1,     1,     5,     1,     1,     3,     1,     2,     2,
       2,     3,     1,     3,     7,     1,     2,     0,     2,     0,
       3,     3,     4,     4,     4,     4,     3,     2,     1,     1,
       0,     1,     1,     0,     2,     1,     5,     1,     0,     2,
       2,     0,     1,     0,     3,     5,     1,     3,     4,     3,
       1,     1,     0,     2,     2,     0,     2,     2,     1,     1,
       1,     0,     2,     4,     5,     4,     2,     3,     2,     2,
       2,     2,     1,     2,     3,     0,     1,     0,     5,     1,
       4,     6,     2,     1,     0,     4,     0,     1,     1,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     3,     3,     0,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     2,     4,     4,     5,     1,     1,
       2,     0,     2,     0,     1,     3,     1,     0,     1,     2,
       3,     2,     4,     2,     3,     2,     0,     1,     2,     0,
       4,     5,     1,     2,     2,     0,     1,     3,     1,     2,
       3,     3,     3,     3,     3,     3,     1,     4,     9,     9,
       3,     0,     2,     2,     0,     5,     3,     1,     3,     5,
       3,     1,     2,     1,     3,     5,     1,     2,     3,     4,
       5,     4,     5,     4,     6,     5,     4,     5,     5,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     1,     5,     5,     5,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,
       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     4,     6,     1,     4,     3,     5,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     1,     1,
       2,     2,     3,     1,     2,     4,     1,     1,     2,     2,
       4,     1,     1,     3,     1,     4,     1,     3,     3,     6,
       7,     9,     7,     7,     5,     1,     1,     1,     5,     6,
       6,     4,     4,     4,     4,     6,     5,     5,     5,     4,
       6,     4,     7,     9,     5,     0,     5,     4,     0,     1,
       0,     2,     0,     1,     3,     3,     2,     2,     0,     6,
       1,     0,     3,     0,     3,     3,     3,     0,     1,     4,
       2,     2,     2,     2,     2,     3,     2,     2,     3,     0,
       4,     3,     1,     5,     3,     1,     3,     1,     2,     3,
       1,     3,     1,     2,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     4,     1,
       4,     1,     2,     1,     2,     1,     2,     1,     3,     1,
       3,     1,     2,     1,     3,     1,     2,     1,     0,     1,
       3,     1,     3,     3,     1,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
       3,     5,     7,     7,     1,     0,     0,     2,     0,     2,
       3,     3,     3,     5,     7,     7,     0,     2,     1,     0,
       1,     0,     1,     3,     1,     2,     3,     2,     1,     4,
       2,     1,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,
       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
       8,     3,     2,     1,     0,     6,     6,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     2,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     1,     4,     6,     3,
       2,     4,     3,     5,     1,     0,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     1,     1,     1,     3,     5,
       1,     1,     1,     1,     3,     2,     2,     3,     4,     5,
       1,     1,     1,     1,     4,     6,     5,     4,     6,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     0,
       7,     3,     1,     2,     3,     2,     0,     2,     0,     2,
       4,     5,     8,     2,     3,     5,     1,     0,     2,     0,
       2,     3,     3,     3,     1,     1,     1,     2,     3,     2,
       2,     2,     2,     3,     4,     3,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     3,     2,     9,    12,
      11,    12,    14,     3,     4,     4,     0,     7,    10,     9,
       2,     3,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 501 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 517 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 529 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* stmt: %empty  */
#line 578 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 20507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 20869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 21509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 21515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 21521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 21601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 21607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 22268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 22280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 22286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 22364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 22370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 22376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 22382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 22388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 22448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 22463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_generic_opt_arg: '*'  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: struct_expr  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: %empty  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 127 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* opt_oids: WITH OIDS  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* opt_oids: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 143 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* copy_opt_list: %empty  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* opt_binary: BINARY  */
#line 150 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* opt_binary: %empty  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_item: BINARY  */
#line 159 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* copy_opt_item: OIDS  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: FREEZE  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: CSV  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: HEADER_P  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: FORCE QUOTE columnList  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: FORCE QUOTE '*'  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: PARTITION BY columnList  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: PARTITION BY '*'  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: FORCE NULL_P columnList  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: ENCODING Sconst  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_file_name: Sconst  */
#line 231 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_file_name: STDIN  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_file_name: STDOUT  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: IDENT '.' ColId  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 22988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: IDENT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 242 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 246 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 23251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 304 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 23415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* pivot_column_entry: b_expr  */
#line 387 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 393 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_entry: single_pivot_value  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_list_internal: pivot_column_entry  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_list: pivot_column_list_internal  */
#line 408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* pivot_column_list: pivot_column_list_internal ','  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* with_clause: WITH cte_list  */
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* with_clause: WITH_LA cte_list  */
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* with_clause: WITH RECURSIVE cte_list  */
#line 438 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 23499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* cte_list: common_table_expr  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* cte_list: cte_list ',' common_table_expr  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 452 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 23525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* opt_materialized: MATERIALIZED  */
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 23531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* opt_materialized: NOT MATERIALIZED  */
#line 465 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* opt_materialized: %empty  */
#line 466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 23543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* into_clause: INTO OptTempTableName  */
#line 471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* into_clause: %empty  */
#line 481 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 23623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: TABLE qualified_name  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* OptTempTableName: qualified_name  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_table: TABLE  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_table: %empty  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* all_or_distinct: ALL  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* all_or_distinct: DISTINCT  */
#line 548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* all_or_distinct: %empty  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* by_name: BY NAME_P  */
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* distinct_clause: DISTINCT  */
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_all_clause: ALL  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_all_clause: %empty  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_ignore_nulls: %empty  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_sort_clause: sort_clause  */
#line 576 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_sort_clause: %empty  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* sort_clause: ORDER BY sortby_list  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* sortby_list: sortby  */
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sortby_list: sortby_list ',' sortby  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 603 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_asc_desc: ASC_P  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_asc_desc: DESC_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_asc_desc: %empty  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 628 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_nulls_order: %empty  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_limit: limit_clause offset_clause  */
#line 633 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_limit: offset_clause limit_clause  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_limit: limit_clause  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_limit: offset_clause  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_select_limit: select_limit  */
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* opt_select_limit: %empty  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* limit_clause: LIMIT select_limit_value  */
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* offset_clause: OFFSET select_offset_value  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* sample_count: FCONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* sample_count: ICONST '%'  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_count: FCONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: ICONST PERCENT  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_count: ICONST ROWS  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sample_clause: %empty  */
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_sample_func: ColId  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* opt_sample_func: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* tablesample_entry: sample_count  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_tablesample_clause: tablesample_clause  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_tablesample_clause: %empty  */
#line 754 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 759 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_repeatable_clause: %empty  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit_value: a_expr  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_limit_value: ALL  */
#line 766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit_value: a_expr '%'  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: FCONST PERCENT  */
#line 773 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_limit_value: ICONST PERCENT  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_offset_value: a_expr  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_fetch_first_value: c_expr  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_fetch_first_value: '+' I_or_F_const  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* select_fetch_first_value: '-' I_or_F_const  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* I_or_F_const: Iconst  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* I_or_F_const: FCONST  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* row_or_rows: ROW  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* row_or_rows: ROWS  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* first_or_next: FIRST_P  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* first_or_next: NEXT  */
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_clause: GROUP_P BY ALL  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 24164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_clause: %empty  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_list: group_by_item  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_by_list: group_by_list ',' group_by_item  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_list_opt_comma: group_by_list  */
#line 857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_list_opt_comma: group_by_list ','  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_item: a_expr  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_item: empty_grouping_set  */
#line 863 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_item: cube_clause  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: rollup_clause  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* group_by_item: grouping_sets_clause  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* empty_grouping_set: '(' ')'  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 24232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* grouping_or_grouping_id: GROUPING  */
#line 904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* grouping_or_grouping_id: GROUPING_ID  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 24268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* having_clause: HAVING a_expr  */
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* having_clause: %empty  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* qualify_clause: QUALIFY a_expr  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* qualify_clause: %empty  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_clause: for_locking_items  */
#line 919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* for_locking_clause: FOR READ_P ONLY  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_for_locking_clause: for_locking_clause  */
#line 924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_for_locking_clause: %empty  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_items: for_locking_item  */
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* for_locking_items: for_locking_items for_locking_item  */
#line 930 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_strength: FOR UPDATE  */
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 24346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 946 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 24352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_strength: FOR SHARE  */
#line 947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* for_locking_strength: FOR KEY SHARE  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 24364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* locked_rels_list: OF qualified_name_list  */
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* locked_rels_list: %empty  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_nowait_or_skip: NOWAIT  */
#line 958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 24382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 959 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* opt_nowait_or_skip: %empty  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 24394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* values_clause_opt_comma: values_clause  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* values_clause_opt_comma: values_clause ','  */
#line 985 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* from_clause: FROM from_list_opt_comma  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* from_clause: %empty  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* from_list: table_ref  */
#line 1003 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_list: from_list ',' table_ref  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_list_opt_comma: from_list  */
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* from_list_opt_comma: from_list ','  */
#line 1009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 24535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: joined_table  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 24543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 24552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1074 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1084 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 24580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_pivot_group_by: %empty  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 24592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_include_nulls: %empty  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 24610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_header: d_expr  */
#line 1123 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_value_list: pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* unpivot_header: ColIdOrString  */
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1161 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* unpivot_value_list: unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: '(' joined_table ')'  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1311 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1326 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* alias_clause: AS ColIdOrString  */
#line 1351 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* alias_clause: ColId  */
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_alias_clause: alias_clause  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_alias_clause: %empty  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* func_alias_clause: alias_clause  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* func_alias_clause: %empty  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_type: FULL join_outer  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_type: LEFT join_outer  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* join_type: RIGHT join_outer  */
#line 1405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* join_type: SEMI  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_type: ANTI  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 25032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_type: INNER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_outer: OUTER_P  */
#line 1412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_outer: %empty  */
#line 1413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 25056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* join_qual: ON a_expr  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* relation_expr: qualified_name  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* relation_expr: qualified_name '*'  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 25084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* relation_expr: ONLY qualified_name  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* func_table: func_expr_windowless opt_ordinality  */
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 25136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 25142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* rowsfrom_list: rowsfrom_item  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_col_def_list: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 25172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_ordinality: %empty  */
#line 1522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* where_clause: WHERE a_expr  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* where_clause: %empty  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* TableFuncElementList: TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 25206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_collate_clause: COLLATE any_name  */
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_collate_clause: %empty  */
#line 1572 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 25246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* colid_type_list: ColId Typename  */
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_Typename: Typename  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_Typename: %empty  */
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: SimpleTypename opt_array_bounds  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 25283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 25293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 25302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 25312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: SimpleTypename ARRAY  */
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 25331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: qualified_typename  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 25350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 25372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* qualified_typename: IDENT '.' IDENT  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 25378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 25396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_array_bounds: %empty  */
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 25402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* SimpleTypename: GenericType  */
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* SimpleTypename: Numeric  */
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* SimpleTypename: Bit  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* SimpleTypename: Character  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* SimpleTypename: ConstDatetime  */
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SimpleTypename: ConstInterval opt_interval  */
#line 1680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* ConstTypename: Numeric  */
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* ConstTypename: ConstBit  */
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* ConstTypename: ConstCharacter  */
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* ConstTypename: ConstDatetime  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* GenericType: type_name_token opt_type_modifiers  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* opt_type_modifiers: %empty  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: INT_P  */
#line 1740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: INTEGER  */
#line 1745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: SMALLINT  */
#line 1750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* Numeric: BIGINT  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Numeric: REAL  */
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: FLOAT_P opt_float  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: DOUBLE_P PRECISION  */
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Numeric: DEC opt_type_modifiers  */
#line 1781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Numeric: BOOLEAN_P  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_float: '(' Iconst ')'  */
#line 1800 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 25624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* opt_float: %empty  */
#line 1821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 25632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Bit: BitWithLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Bit: BitWithoutLength  */
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* ConstBit: BitWithLength  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* ConstBit: BitWithoutLength  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* BitWithoutLength: BIT opt_varying  */
#line 1867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* Character: CharacterWithLength  */
#line 1888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* Character: CharacterWithoutLength  */
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* ConstCharacter: CharacterWithLength  */
#line 1898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* ConstCharacter: CharacterWithoutLength  */
#line 1902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* CharacterWithoutLength: character  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* character: CHARACTER opt_varying  */
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* character: CHAR_P opt_varying  */
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* character: VARCHAR  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* character: NATIONAL CHARACTER opt_varying  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* character: NATIONAL CHAR_P opt_varying  */
#line 1941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* character: NCHAR opt_varying  */
#line 1943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_varying: VARYING  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* opt_varying: %empty  */
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* ConstDatetime: TIME opt_timezone  */
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* ConstInterval: INTERVAL  */
#line 1993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* opt_timezone: %empty  */
#line 2002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: year_keyword  */
#line 2043 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_interval: month_keyword  */
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_interval: day_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_interval: hour_keyword  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_interval: minute_keyword  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_interval: second_keyword  */
#line 2053 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_interval: millisecond_keyword  */
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: microsecond_keyword  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* opt_interval: week_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 25936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_interval: decade_keyword  */
#line 2061 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 25942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_interval: century_keyword  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 25948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_interval: millennium_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 25954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* opt_interval: year_keyword TO month_keyword  */
#line 2067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_interval: day_keyword TO hour_keyword  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_interval: day_keyword TO minute_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_interval: day_keyword TO second_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_interval: hour_keyword TO second_keyword  */
#line 2095 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* opt_interval: minute_keyword TO second_keyword  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* opt_interval: %empty  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: c_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr TYPECAST Typename  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr COLLATE any_name  */
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 26061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: '+' a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: '-' a_expr  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr '+' a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr '-' a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr '*' a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr '/' a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr '%' a_expr  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr '^' a_expr  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr POWER_OF a_expr  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr '<' a_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr '>' a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr '=' a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr qual_Op a_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: qual_Op a_expr  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr qual_Op  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr AND a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr OR a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: NOT a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: NOT_LA a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 26199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr GLOB a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr LIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr ILIKE a_expr  */
#line 2242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 26268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2254 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 26277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 26288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 26312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 26324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr IS NULL_P  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr ISNULL  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr IS NOT NULL_P  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr NOT NULL_P  */
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr NOTNULL  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 26408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 26416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: row OVERLAPS row  */
#line 2361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 26436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr IS TRUE_P  */
#line 2377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr IS FALSE_P  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr IS UNKNOWN  */
#line 2409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 26496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 26588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* a_expr: a_expr IN_P in_expr  */
#line 2473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 26612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 26638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 26664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* a_expr: DEFAULT  */
#line 2533 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: c_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr TYPECAST Typename  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: '+' b_expr  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: '-' b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr '+' b_expr  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr '-' b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr '*' b_expr  */
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: b_expr '/' b_expr  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr '%' b_expr  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: b_expr '^' b_expr  */
#line 2603 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: b_expr POWER_OF b_expr  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr '<' b_expr  */
#line 2607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* b_expr: b_expr '>' b_expr  */
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* b_expr: b_expr '=' b_expr  */
#line 2611 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* b_expr: b_expr qual_Op b_expr  */
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* b_expr: qual_Op b_expr  */
#line 2621 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* b_expr: b_expr qual_Op  */
#line 2623 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* c_expr: row  */
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* d_expr: columnref  */
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* d_expr: AexprConst  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* d_expr: '#' ICONST  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* d_expr: '$' ColLabel  */
#line 2679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2682 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* d_expr: list_comprehension  */
#line 2686 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* d_expr: ARRAY select_with_parens  */
#line 2690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* d_expr: case_expr  */
#line 2706 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* d_expr: select_with_parens  */
#line 2708 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* d_expr: select_with_parens indirection  */
#line 2719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* d_expr: EXISTS select_with_parens  */
#line 2743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* indirection_expr: '?'  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 27058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* indirection_expr: PARAM  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* indirection_expr: '(' a_expr ')'  */
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* indirection_expr: struct_expr  */
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* indirection_expr: func_expr  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_application: func_name '(' ')'  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 27131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 27166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2845 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 27181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 27233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr: func_expr_common_subexpr  */
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* func_expr_windowless: func_application  */
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 27261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 27267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2939 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 27273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 27333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 27368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 27376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 27387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 27400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* within_group_clause: %empty  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 27443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* filter_clause: %empty  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* export_clause: EXPORT_STATE  */
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 27455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* export_clause: %empty  */
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* window_clause: WINDOW window_definition_list  */
#line 3063 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* window_clause: %empty  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* window_definition_list: window_definition  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 27479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 27485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* window_definition: ColId AS window_specification  */
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 27495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* over_clause: OVER window_specification  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 27501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* over_clause: OVER ColId  */
#line 3085 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 27518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* over_clause: %empty  */
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 27524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 27542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_existing_window_name: ColId  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* opt_existing_window_name: %empty  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 27554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* opt_partition_clause: %empty  */
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 27602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_frame_clause: %empty  */
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* frame_extent: frame_bound  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 27637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* frame_bound: CURRENT_P ROW  */
#line 3259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* frame_bound: a_expr PRECEDING  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* frame_bound: a_expr FOLLOWING  */
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_window_exclusion_clause: %empty  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* qualified_row: ROW '(' ')'  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* row: qualified_row  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* row: '(' expr_list ',' a_expr ')'  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* dict_arguments: dict_arg  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* dict_arguments_opt_comma: dict_arguments  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* map_arg: a_expr ':' a_expr  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* map_arguments: map_arg  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* map_arguments: map_arguments ',' map_arg  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* map_arguments_opt_comma: map_arguments  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* map_arguments_opt_comma: map_arguments ','  */
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* opt_map_arguments_opt_comma: %empty  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* sub_type: ANY  */
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* sub_type: SOME  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* sub_type: ALL  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* all_Op: Op  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* all_Op: MathOp  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* MathOp: '+'  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* MathOp: '-'  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* MathOp: '*'  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* MathOp: '/'  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* MathOp: INTEGER_DIVISION  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* MathOp: '%'  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* MathOp: '^'  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* MathOp: POWER_OF  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* MathOp: '<'  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* MathOp: '>'  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* MathOp: '='  */
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* MathOp: LESS_EQUALS  */
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* MathOp: GREATER_EQUALS  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* MathOp: NOT_EQUALS  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* qual_Op: Op  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* qual_all_Op: all_Op  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* subquery_Op: all_Op  */
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* subquery_Op: LIKE  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 28035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* subquery_Op: NOT_LA LIKE  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 28041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* subquery_Op: GLOB  */
#line 3406 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 28047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* subquery_Op: NOT_LA GLOB  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 28053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* subquery_Op: ILIKE  */
#line 3410 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 28059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* subquery_Op: NOT_LA ILIKE  */
#line 3412 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 28065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* any_operator: all_Op  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* any_operator: ColId '.' any_operator  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 28077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* c_expr_list: c_expr  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* c_expr_list_opt_comma: c_expr_list  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* expr_list: a_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* expr_list: expr_list ',' a_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* expr_list_opt_comma: expr_list  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* expr_list_opt_comma: expr_list ','  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 28141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* opt_expr_list_opt_comma: %empty  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 28157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* func_arg_list: func_arg_expr  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 28173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* func_arg_expr: a_expr  */
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 28207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* type_list: Typename  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* type_list: type_list ',' Typename  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* extract_list: extract_arg FROM a_expr  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 28227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* extract_list: %empty  */
#line 3533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* extract_arg: IDENT  */
#line 3540 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* extract_arg: year_keyword  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* extract_arg: month_keyword  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 28251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* extract_arg: day_keyword  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 28257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* extract_arg: hour_keyword  */
#line 3544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* extract_arg: minute_keyword  */
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* extract_arg: second_keyword  */
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* extract_arg: millisecond_keyword  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* extract_arg: microsecond_keyword  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* extract_arg: week_keyword  */
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* extract_arg: decade_keyword  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 28299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* extract_arg: century_keyword  */
#line 3551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 28305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* extract_arg: millennium_keyword  */
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* extract_arg: Sconst  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* overlay_placing: PLACING a_expr  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* position_list: b_expr IN_P b_expr  */
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 28345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* position_list: %empty  */
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* substr_list: a_expr substr_from substr_for  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* substr_list: a_expr substr_for substr_from  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 28368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* substr_list: a_expr substr_from  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 28376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* substr_list: a_expr substr_for  */
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 28395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* substr_list: expr_list  */
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 28403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* substr_list: %empty  */
#line 3631 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 28409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* substr_from: FROM a_expr  */
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* substr_for: FOR a_expr  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 28427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* trim_list: FROM expr_list_opt_comma  */
#line 3642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* trim_list: expr_list_opt_comma  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* in_expr: select_with_parens  */
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 28450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 28456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* when_clause_list: when_clause  */
#line 3677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* when_clause_list: when_clause_list when_clause  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 28494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* case_default: ELSE a_expr  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* case_default: %empty  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* case_arg: a_expr  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* case_arg: %empty  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* columnref: ColId  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* columnref: ColId indirection  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 28534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* indirection_el: '[' a_expr ']'  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 28571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3736 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_slice_bound: a_expr  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_slice_bound: %empty  */
#line 3747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* opt_indirection: %empty  */
#line 3752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* opt_indirection: opt_indirection indirection_el  */
#line 3753 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_func_arguments: %empty  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 28613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_func_arguments: '(' ')'  */
#line 3758 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 28619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 28638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* extended_indirection_el: '[' a_expr ']'  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3788 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 28675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3797 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 28687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_extended_indirection: %empty  */
#line 3812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 28693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* opt_target_list_opt_comma: %empty  */
#line 3830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* target_list: target_el  */
#line 3834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* target_list: target_list ',' target_el  */
#line 3835 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* target_list_opt_comma: target_list  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* target_list_opt_comma: target_list ','  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* target_el: a_expr AS ColLabelOrString  */
#line 3844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* target_el: a_expr IDENT  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* target_el: a_expr  */
#line 3868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3877 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* except_list: EXCLUDE ColId  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* opt_except_list: except_list  */
#line 3881 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* opt_except_list: %empty  */
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* replace_list_el: a_expr AS ColId  */
#line 3885 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* replace_list: replace_list_el  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* replace_list: replace_list ',' replace_list_el  */
#line 3890 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* replace_list_opt_comma: replace_list  */
#line 3894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* replace_list_opt_comma: replace_list ','  */
#line 3895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3898 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* opt_replace_list: REPLACE replace_list_el  */
#line 3899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* opt_replace_list: %empty  */
#line 3900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* qualified_name_list: qualified_name  */
#line 3910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3911 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* name_list: name  */
#line 3916 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* name_list: name_list ',' name  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* name_list_opt_comma: name_list  */
#line 3923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* name_list_opt_comma: name_list ','  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* name: ColIdOrString  */
#line 3932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* func_name: function_name_token  */
#line 3944 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* func_name: ColId indirection  */
#line 3947 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* AexprConst: Iconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* AexprConst: FCONST  */
#line 3962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* AexprConst: Sconst opt_indirection  */
#line 3966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* AexprConst: BCONST  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* AexprConst: XCONST  */
#line 3982 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* AexprConst: func_name Sconst  */
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* AexprConst: ConstTypename Sconst  */
#line 4036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 29026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 29034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 29050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* AexprConst: TRUE_P  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 29058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* AexprConst: FALSE_P  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 29066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AexprConst: NULL_P  */
#line 4060 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 29074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* Iconst: ICONST  */
#line 4065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* type_function_name: IDENT  */
#line 4082 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* type_function_name: unreserved_keyword  */
#line 4083 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* type_function_name: type_func_name_keyword  */
#line 4084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* function_name_token: IDENT  */
#line 4087 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* function_name_token: unreserved_keyword  */
#line 4088 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* function_name_token: func_name_keyword  */
#line 4089 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* type_name_token: IDENT  */
#line 4092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* type_name_token: unreserved_keyword  */
#line 4093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* type_name_token: type_name_keyword  */
#line 4094 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* any_name: ColId  */
#line 4097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* any_name: ColId attrs  */
#line 4098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 29146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* attrs: '.' attr_name  */
#line 4102 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* attrs: attrs '.' attr_name  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_name_list: %empty  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* ColLabelOrString: ColLabel  */
#line 4116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* ColLabelOrString: SCONST  */
#line 4117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 29206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 29290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 29296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 29368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 29374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 29392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 29404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 29410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 29416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 29481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 29528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 29540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 29552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 29564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* comment_on_type_any_name: TABLE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 29570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* comment_on_type_any_name: SEQUENCE  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 29576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* comment_on_type_any_name: FUNCTION  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* comment_on_type_any_name: MACRO  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 29588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* comment_on_type_any_name: MACRO TABLE  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 29594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* comment_on_type_any_name: VIEW  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* comment_on_type_any_name: DATABASE  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* comment_on_type_any_name: MATERIALIZED VIEW  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 29612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* comment_on_type_any_name: INDEX  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 29618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* comment_on_type_any_name: COLLATION  */
#line 40 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 29624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* comment_on_type_any_name: CONVERSION_P  */
#line 41 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 29630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* comment_on_type_any_name: SCHEMA  */
#line 42 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 29636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* comment_on_type_any_name: STATISTICS  */
#line 43 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* comment_on_type_any_name: TEXT_P SEARCH PARSER  */
#line 44 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 29648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* comment_on_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 45 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 29654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* comment_on_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 46 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 29660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* comment_on_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 47 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 29666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* comment_on_type_any_name: TYPE_P  */
#line 48 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 29672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 29748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 29759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 29783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 29789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 29807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 29827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 29835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 30040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 30057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 30069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 30093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 30105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 30117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 30129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 30141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 30165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 30331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 30345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 30353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 30364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 30375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 30387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 30399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 30492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 30498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 30510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 30519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 30567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 30630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 30685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 30703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 30709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 30767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 30809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 30821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 30827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30920 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
