/* A Bison parser, made by GNU Bison 3.6.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.6.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeParamRefCast(int number, int location, PGTypeName *tpname);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 237 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token kinds.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    YYEMPTY = -2,
    YYEOF = 0,                     /* "end of file"  */
    YYerror = 256,                 /* error  */
    YYUNDEF = 257,                 /* "invalid token"  */
    IDENT = 258,                   /* IDENT  */
    FCONST = 259,                  /* FCONST  */
    SCONST = 260,                  /* SCONST  */
    BCONST = 261,                  /* BCONST  */
    XCONST = 262,                  /* XCONST  */
    Op = 263,                      /* Op  */
    ICONST = 264,                  /* ICONST  */
    PARAM = 265,                   /* PARAM  */
    TYPECAST = 266,                /* TYPECAST  */
    DOT_DOT = 267,                 /* DOT_DOT  */
    COLON_EQUALS = 268,            /* COLON_EQUALS  */
    EQUALS_GREATER = 269,          /* EQUALS_GREATER  */
    LESS_EQUALS = 270,             /* LESS_EQUALS  */
    GREATER_EQUALS = 271,          /* GREATER_EQUALS  */
    NOT_EQUALS = 272,              /* NOT_EQUALS  */
    ABORT_P = 273,                 /* ABORT_P  */
    ABSOLUTE_P = 274,              /* ABSOLUTE_P  */
    ACCESS = 275,                  /* ACCESS  */
    ACTION = 276,                  /* ACTION  */
    ADD_P = 277,                   /* ADD_P  */
    ADMIN = 278,                   /* ADMIN  */
    AFTER = 279,                   /* AFTER  */
    AGGREGATE = 280,               /* AGGREGATE  */
    ALL = 281,                     /* ALL  */
    ALSO = 282,                    /* ALSO  */
    ALTER = 283,                   /* ALTER  */
    ALWAYS = 284,                  /* ALWAYS  */
    ANALYSE = 285,                 /* ANALYSE  */
    ANALYZE = 286,                 /* ANALYZE  */
    AND = 287,                     /* AND  */
    ANY = 288,                     /* ANY  */
    ARRAY = 289,                   /* ARRAY  */
    AS = 290,                      /* AS  */
    ASC_P = 291,                   /* ASC_P  */
    ASSERTION = 292,               /* ASSERTION  */
    ASSIGNMENT = 293,              /* ASSIGNMENT  */
    ASYMMETRIC = 294,              /* ASYMMETRIC  */
    AT = 295,                      /* AT  */
    ATTACH = 296,                  /* ATTACH  */
    ATTRIBUTE = 297,               /* ATTRIBUTE  */
    AUTHORIZATION = 298,           /* AUTHORIZATION  */
    BACKWARD = 299,                /* BACKWARD  */
    BEFORE = 300,                  /* BEFORE  */
    BEGIN_P = 301,                 /* BEGIN_P  */
    BETWEEN = 302,                 /* BETWEEN  */
    BIGINT = 303,                  /* BIGINT  */
    BINARY = 304,                  /* BINARY  */
    BIT = 305,                     /* BIT  */
    BOOLEAN_P = 306,               /* BOOLEAN_P  */
    BOTH = 307,                    /* BOTH  */
    BY = 308,                      /* BY  */
    CACHE = 309,                   /* CACHE  */
    CALL_P = 310,                  /* CALL_P  */
    CALLED = 311,                  /* CALLED  */
    CASCADE = 312,                 /* CASCADE  */
    CASCADED = 313,                /* CASCADED  */
    CASE = 314,                    /* CASE  */
    CAST = 315,                    /* CAST  */
    CATALOG_P = 316,               /* CATALOG_P  */
    CHAIN = 317,                   /* CHAIN  */
    CHAR_P = 318,                  /* CHAR_P  */
    CHARACTER = 319,               /* CHARACTER  */
    CHARACTERISTICS = 320,         /* CHARACTERISTICS  */
    CHECK_P = 321,                 /* CHECK_P  */
    CHECKPOINT = 322,              /* CHECKPOINT  */
    CLASS = 323,                   /* CLASS  */
    CLOSE = 324,                   /* CLOSE  */
    CLUSTER = 325,                 /* CLUSTER  */
    COALESCE = 326,                /* COALESCE  */
    COLLATE = 327,                 /* COLLATE  */
    COLLATION = 328,               /* COLLATION  */
    COLUMN = 329,                  /* COLUMN  */
    COLUMNS = 330,                 /* COLUMNS  */
    COMMENT = 331,                 /* COMMENT  */
    COMMENTS = 332,                /* COMMENTS  */
    COMMIT = 333,                  /* COMMIT  */
    COMMITTED = 334,               /* COMMITTED  */
    CONCURRENTLY = 335,            /* CONCURRENTLY  */
    CONFIGURATION = 336,           /* CONFIGURATION  */
    CONFLICT = 337,                /* CONFLICT  */
    CONNECTION = 338,              /* CONNECTION  */
    CONSTRAINT = 339,              /* CONSTRAINT  */
    CONSTRAINTS = 340,             /* CONSTRAINTS  */
    CONTENT_P = 341,               /* CONTENT_P  */
    CONTINUE_P = 342,              /* CONTINUE_P  */
    CONVERSION_P = 343,            /* CONVERSION_P  */
    COPY = 344,                    /* COPY  */
    COST = 345,                    /* COST  */
    CREATE_P = 346,                /* CREATE_P  */
    CROSS = 347,                   /* CROSS  */
    CSV = 348,                     /* CSV  */
    CUBE = 349,                    /* CUBE  */
    CURRENT_P = 350,               /* CURRENT_P  */
    CURRENT_CATALOG = 351,         /* CURRENT_CATALOG  */
    CURRENT_DATE = 352,            /* CURRENT_DATE  */
    CURRENT_ROLE = 353,            /* CURRENT_ROLE  */
    CURRENT_SCHEMA = 354,          /* CURRENT_SCHEMA  */
    CURRENT_TIME = 355,            /* CURRENT_TIME  */
    CURRENT_TIMESTAMP = 356,       /* CURRENT_TIMESTAMP  */
    CURRENT_USER = 357,            /* CURRENT_USER  */
    CURSOR = 358,                  /* CURSOR  */
    CYCLE = 359,                   /* CYCLE  */
    DATA_P = 360,                  /* DATA_P  */
    DATABASE = 361,                /* DATABASE  */
    DAY_P = 362,                   /* DAY_P  */
    DEALLOCATE = 363,              /* DEALLOCATE  */
    DEC = 364,                     /* DEC  */
    DECIMAL_P = 365,               /* DECIMAL_P  */
    DECLARE = 366,                 /* DECLARE  */
    DEFAULT = 367,                 /* DEFAULT  */
    DEFAULTS = 368,                /* DEFAULTS  */
    DEFERRABLE = 369,              /* DEFERRABLE  */
    DEFERRED = 370,                /* DEFERRED  */
    DEFINER = 371,                 /* DEFINER  */
    DELETE_P = 372,                /* DELETE_P  */
    DELIMITER = 373,               /* DELIMITER  */
    DELIMITERS = 374,              /* DELIMITERS  */
    DEPENDS = 375,                 /* DEPENDS  */
    DESC_P = 376,                  /* DESC_P  */
    DESCRIBE = 377,                /* DESCRIBE  */
    DETACH = 378,                  /* DETACH  */
    DICTIONARY = 379,              /* DICTIONARY  */
    DISABLE_P = 380,               /* DISABLE_P  */
    DISCARD = 381,                 /* DISCARD  */
    DISTINCT = 382,                /* DISTINCT  */
    DO = 383,                      /* DO  */
    DOCUMENT_P = 384,              /* DOCUMENT_P  */
    DOMAIN_P = 385,                /* DOMAIN_P  */
    DOUBLE_P = 386,                /* DOUBLE_P  */
    DROP = 387,                    /* DROP  */
    EACH = 388,                    /* EACH  */
    ELSE = 389,                    /* ELSE  */
    ENABLE_P = 390,                /* ENABLE_P  */
    ENCODING = 391,                /* ENCODING  */
    ENCRYPTED = 392,               /* ENCRYPTED  */
    END_P = 393,                   /* END_P  */
    ENUM_P = 394,                  /* ENUM_P  */
    ESCAPE = 395,                  /* ESCAPE  */
    EVENT = 396,                   /* EVENT  */
    EXCEPT = 397,                  /* EXCEPT  */
    EXCLUDE = 398,                 /* EXCLUDE  */
    EXCLUDING = 399,               /* EXCLUDING  */
    EXCLUSIVE = 400,               /* EXCLUSIVE  */
    EXECUTE = 401,                 /* EXECUTE  */
    EXISTS = 402,                  /* EXISTS  */
    EXPLAIN = 403,                 /* EXPLAIN  */
    EXPORT_P = 404,                /* EXPORT_P  */
    EXTENSION = 405,               /* EXTENSION  */
    EXTERNAL = 406,                /* EXTERNAL  */
    EXTRACT = 407,                 /* EXTRACT  */
    FALSE_P = 408,                 /* FALSE_P  */
    FAMILY = 409,                  /* FAMILY  */
    FETCH = 410,                   /* FETCH  */
    FILTER = 411,                  /* FILTER  */
    FIRST_P = 412,                 /* FIRST_P  */
    FLOAT_P = 413,                 /* FLOAT_P  */
    FOLLOWING = 414,               /* FOLLOWING  */
    FOR = 415,                     /* FOR  */
    FORCE = 416,                   /* FORCE  */
    FOREIGN = 417,                 /* FOREIGN  */
    FORWARD = 418,                 /* FORWARD  */
    FREEZE = 419,                  /* FREEZE  */
    FROM = 420,                    /* FROM  */
    FULL = 421,                    /* FULL  */
    FUNCTION = 422,                /* FUNCTION  */
    FUNCTIONS = 423,               /* FUNCTIONS  */
    GENERATED = 424,               /* GENERATED  */
    GLOB = 425,                    /* GLOB  */
    GLOBAL = 426,                  /* GLOBAL  */
    GRANT = 427,                   /* GRANT  */
    GRANTED = 428,                 /* GRANTED  */
    GROUP_P = 429,                 /* GROUP_P  */
    GROUPING = 430,                /* GROUPING  */
    HANDLER = 431,                 /* HANDLER  */
    HAVING = 432,                  /* HAVING  */
    HEADER_P = 433,                /* HEADER_P  */
    HOLD = 434,                    /* HOLD  */
    HOUR_P = 435,                  /* HOUR_P  */
    IDENTITY_P = 436,              /* IDENTITY_P  */
    IF_P = 437,                    /* IF_P  */
    ILIKE = 438,                   /* ILIKE  */
    IMMEDIATE = 439,               /* IMMEDIATE  */
    IMMUTABLE = 440,               /* IMMUTABLE  */
    IMPLICIT_P = 441,              /* IMPLICIT_P  */
    IMPORT_P = 442,                /* IMPORT_P  */
    IN_P = 443,                    /* IN_P  */
    INCLUDING = 444,               /* INCLUDING  */
    INCREMENT = 445,               /* INCREMENT  */
    INDEX = 446,                   /* INDEX  */
    INDEXES = 447,                 /* INDEXES  */
    INHERIT = 448,                 /* INHERIT  */
    INHERITS = 449,                /* INHERITS  */
    INITIALLY = 450,               /* INITIALLY  */
    INLINE_P = 451,                /* INLINE_P  */
    INNER_P = 452,                 /* INNER_P  */
    INOUT = 453,                   /* INOUT  */
    INPUT_P = 454,                 /* INPUT_P  */
    INSENSITIVE = 455,             /* INSENSITIVE  */
    INSERT = 456,                  /* INSERT  */
    INSTEAD = 457,                 /* INSTEAD  */
    INT_P = 458,                   /* INT_P  */
    INTEGER = 459,                 /* INTEGER  */
    INTERSECT = 460,               /* INTERSECT  */
    INTERVAL = 461,                /* INTERVAL  */
    INTO = 462,                    /* INTO  */
    INVOKER = 463,                 /* INVOKER  */
    IS = 464,                      /* IS  */
    ISNULL = 465,                  /* ISNULL  */
    ISOLATION = 466,               /* ISOLATION  */
    JOIN = 467,                    /* JOIN  */
    KEY = 468,                     /* KEY  */
    LABEL = 469,                   /* LABEL  */
    LANGUAGE = 470,                /* LANGUAGE  */
    LARGE_P = 471,                 /* LARGE_P  */
    LAST_P = 472,                  /* LAST_P  */
    LATERAL_P = 473,               /* LATERAL_P  */
    LEADING = 474,                 /* LEADING  */
    LEAKPROOF = 475,               /* LEAKPROOF  */
    LEFT = 476,                    /* LEFT  */
    LEVEL = 477,                   /* LEVEL  */
    LIKE = 478,                    /* LIKE  */
    LIMIT = 479,                   /* LIMIT  */
    LISTEN = 480,                  /* LISTEN  */
    LOAD = 481,                    /* LOAD  */
    LOCAL = 482,                   /* LOCAL  */
    LOCALTIME = 483,               /* LOCALTIME  */
    LOCALTIMESTAMP = 484,          /* LOCALTIMESTAMP  */
    LOCATION = 485,                /* LOCATION  */
    LOCK_P = 486,                  /* LOCK_P  */
    LOCKED = 487,                  /* LOCKED  */
    LOGGED = 488,                  /* LOGGED  */
    MACRO = 489,                   /* MACRO  */
    MAPPING = 490,                 /* MAPPING  */
    MATCH = 491,                   /* MATCH  */
    MATERIALIZED = 492,            /* MATERIALIZED  */
    MAXVALUE = 493,                /* MAXVALUE  */
    METHOD = 494,                  /* METHOD  */
    MINUTE_P = 495,                /* MINUTE_P  */
    MINVALUE = 496,                /* MINVALUE  */
    MODE = 497,                    /* MODE  */
    MONTH_P = 498,                 /* MONTH_P  */
    MOVE = 499,                    /* MOVE  */
    NAME_P = 500,                  /* NAME_P  */
    NAMES = 501,                   /* NAMES  */
    NATIONAL = 502,                /* NATIONAL  */
    NATURAL = 503,                 /* NATURAL  */
    NCHAR = 504,                   /* NCHAR  */
    NEW = 505,                     /* NEW  */
    NEXT = 506,                    /* NEXT  */
    NO = 507,                      /* NO  */
    NONE = 508,                    /* NONE  */
    NOT = 509,                     /* NOT  */
    NOTHING = 510,                 /* NOTHING  */
    NOTIFY = 511,                  /* NOTIFY  */
    NOTNULL = 512,                 /* NOTNULL  */
    NOWAIT = 513,                  /* NOWAIT  */
    NULL_P = 514,                  /* NULL_P  */
    NULLIF = 515,                  /* NULLIF  */
    NULLS_P = 516,                 /* NULLS_P  */
    NUMERIC = 517,                 /* NUMERIC  */
    OBJECT_P = 518,                /* OBJECT_P  */
    OF = 519,                      /* OF  */
    OFF = 520,                     /* OFF  */
    OFFSET = 521,                  /* OFFSET  */
    OIDS = 522,                    /* OIDS  */
    OLD = 523,                     /* OLD  */
    ON = 524,                      /* ON  */
    ONLY = 525,                    /* ONLY  */
    OPERATOR = 526,                /* OPERATOR  */
    OPTION = 527,                  /* OPTION  */
    OPTIONS = 528,                 /* OPTIONS  */
    OR = 529,                      /* OR  */
    ORDER = 530,                   /* ORDER  */
    ORDINALITY = 531,              /* ORDINALITY  */
    OUT_P = 532,                   /* OUT_P  */
    OUTER_P = 533,                 /* OUTER_P  */
    OVER = 534,                    /* OVER  */
    OVERLAPS = 535,                /* OVERLAPS  */
    OVERLAY = 536,                 /* OVERLAY  */
    OVERRIDING = 537,              /* OVERRIDING  */
    OWNED = 538,                   /* OWNED  */
    OWNER = 539,                   /* OWNER  */
    PARALLEL = 540,                /* PARALLEL  */
    PARSER = 541,                  /* PARSER  */
    PARTIAL = 542,                 /* PARTIAL  */
    PARTITION = 543,               /* PARTITION  */
    PASSING = 544,                 /* PASSING  */
    PASSWORD = 545,                /* PASSWORD  */
    PLACING = 546,                 /* PLACING  */
    PLANS = 547,                   /* PLANS  */
    POLICY = 548,                  /* POLICY  */
    POSITION = 549,                /* POSITION  */
    PRAGMA_P = 550,                /* PRAGMA_P  */
    PRECEDING = 551,               /* PRECEDING  */
    PRECISION = 552,               /* PRECISION  */
    PREPARE = 553,                 /* PREPARE  */
    PREPARED = 554,                /* PREPARED  */
    PRESERVE = 555,                /* PRESERVE  */
    PRIMARY = 556,                 /* PRIMARY  */
    PRIOR = 557,                   /* PRIOR  */
    PRIVILEGES = 558,              /* PRIVILEGES  */
    PROCEDURAL = 559,              /* PROCEDURAL  */
    PROCEDURE = 560,               /* PROCEDURE  */
    PROGRAM = 561,                 /* PROGRAM  */
    PUBLICATION = 562,             /* PUBLICATION  */
    QUOTE = 563,                   /* QUOTE  */
    RANGE = 564,                   /* RANGE  */
    READ_P = 565,                  /* READ_P  */
    REAL = 566,                    /* REAL  */
    REASSIGN = 567,                /* REASSIGN  */
    RECHECK = 568,                 /* RECHECK  */
    RECURSIVE = 569,               /* RECURSIVE  */
    REF = 570,                     /* REF  */
    REFERENCES = 571,              /* REFERENCES  */
    REFERENCING = 572,             /* REFERENCING  */
    REFRESH = 573,                 /* REFRESH  */
    REINDEX = 574,                 /* REINDEX  */
    RELATIVE_P = 575,              /* RELATIVE_P  */
    RELEASE = 576,                 /* RELEASE  */
    RENAME = 577,                  /* RENAME  */
    REPEATABLE = 578,              /* REPEATABLE  */
    REPLACE = 579,                 /* REPLACE  */
    REPLICA = 580,                 /* REPLICA  */
    RESET = 581,                   /* RESET  */
    RESTART = 582,                 /* RESTART  */
    RESTRICT = 583,                /* RESTRICT  */
    RETURNING = 584,               /* RETURNING  */
    RETURNS = 585,                 /* RETURNS  */
    REVOKE = 586,                  /* REVOKE  */
    RIGHT = 587,                   /* RIGHT  */
    ROLE = 588,                    /* ROLE  */
    ROLLBACK = 589,                /* ROLLBACK  */
    ROLLUP = 590,                  /* ROLLUP  */
    ROW = 591,                     /* ROW  */
    ROWS = 592,                    /* ROWS  */
    RULE = 593,                    /* RULE  */
    SAVEPOINT = 594,               /* SAVEPOINT  */
    SCHEMA = 595,                  /* SCHEMA  */
    SCHEMAS = 596,                 /* SCHEMAS  */
    SCROLL = 597,                  /* SCROLL  */
    SEARCH = 598,                  /* SEARCH  */
    SECOND_P = 599,                /* SECOND_P  */
    SECURITY = 600,                /* SECURITY  */
    SELECT = 601,                  /* SELECT  */
    SEQUENCE = 602,                /* SEQUENCE  */
    SEQUENCES = 603,               /* SEQUENCES  */
    SERIALIZABLE = 604,            /* SERIALIZABLE  */
    SERVER = 605,                  /* SERVER  */
    SESSION = 606,                 /* SESSION  */
    SESSION_USER = 607,            /* SESSION_USER  */
    SET = 608,                     /* SET  */
    SETOF = 609,                   /* SETOF  */
    SETS = 610,                    /* SETS  */
    SHARE = 611,                   /* SHARE  */
    SHOW = 612,                    /* SHOW  */
    SIMILAR = 613,                 /* SIMILAR  */
    SIMPLE = 614,                  /* SIMPLE  */
    SKIP = 615,                    /* SKIP  */
    SMALLINT = 616,                /* SMALLINT  */
    SNAPSHOT = 617,                /* SNAPSHOT  */
    SOME = 618,                    /* SOME  */
    SQL_P = 619,                   /* SQL_P  */
    STABLE = 620,                  /* STABLE  */
    STANDALONE_P = 621,            /* STANDALONE_P  */
    START = 622,                   /* START  */
    STATEMENT = 623,               /* STATEMENT  */
    STATISTICS = 624,              /* STATISTICS  */
    STDIN = 625,                   /* STDIN  */
    STDOUT = 626,                  /* STDOUT  */
    STORAGE = 627,                 /* STORAGE  */
    STRICT_P = 628,                /* STRICT_P  */
    STRIP_P = 629,                 /* STRIP_P  */
    SUBSCRIPTION = 630,            /* SUBSCRIPTION  */
    SUBSTRING = 631,               /* SUBSTRING  */
    SYMMETRIC = 632,               /* SYMMETRIC  */
    SYSID = 633,                   /* SYSID  */
    SYSTEM_P = 634,                /* SYSTEM_P  */
    TABLE = 635,                   /* TABLE  */
    TABLES = 636,                  /* TABLES  */
    TABLESAMPLE = 637,             /* TABLESAMPLE  */
    TABLESPACE = 638,              /* TABLESPACE  */
    TEMP = 639,                    /* TEMP  */
    TEMPLATE = 640,                /* TEMPLATE  */
    TEMPORARY = 641,               /* TEMPORARY  */
    TEXT_P = 642,                  /* TEXT_P  */
    THEN = 643,                    /* THEN  */
    TIME = 644,                    /* TIME  */
    TIMESTAMP = 645,               /* TIMESTAMP  */
    TO = 646,                      /* TO  */
    TRAILING = 647,                /* TRAILING  */
    TRANSACTION = 648,             /* TRANSACTION  */
    TRANSFORM = 649,               /* TRANSFORM  */
    TREAT = 650,                   /* TREAT  */
    TRIGGER = 651,                 /* TRIGGER  */
    TRIM = 652,                    /* TRIM  */
    TRUE_P = 653,                  /* TRUE_P  */
    TRUNCATE = 654,                /* TRUNCATE  */
    TRUSTED = 655,                 /* TRUSTED  */
    TYPE_P = 656,                  /* TYPE_P  */
    TYPES_P = 657,                 /* TYPES_P  */
    UNBOUNDED = 658,               /* UNBOUNDED  */
    UNCOMMITTED = 659,             /* UNCOMMITTED  */
    UNENCRYPTED = 660,             /* UNENCRYPTED  */
    UNION = 661,                   /* UNION  */
    UNIQUE = 662,                  /* UNIQUE  */
    UNKNOWN = 663,                 /* UNKNOWN  */
    UNLISTEN = 664,                /* UNLISTEN  */
    UNLOGGED = 665,                /* UNLOGGED  */
    UNTIL = 666,                   /* UNTIL  */
    UPDATE = 667,                  /* UPDATE  */
    USER = 668,                    /* USER  */
    USING = 669,                   /* USING  */
    VACUUM = 670,                  /* VACUUM  */
    VALID = 671,                   /* VALID  */
    VALIDATE = 672,                /* VALIDATE  */
    VALIDATOR = 673,               /* VALIDATOR  */
    VALUE_P = 674,                 /* VALUE_P  */
    VALUES = 675,                  /* VALUES  */
    VARCHAR = 676,                 /* VARCHAR  */
    VARIADIC = 677,                /* VARIADIC  */
    VARYING = 678,                 /* VARYING  */
    VERBOSE = 679,                 /* VERBOSE  */
    VERSION_P = 680,               /* VERSION_P  */
    VIEW = 681,                    /* VIEW  */
    VIEWS = 682,                   /* VIEWS  */
    VOLATILE = 683,                /* VOLATILE  */
    WHEN = 684,                    /* WHEN  */
    WHERE = 685,                   /* WHERE  */
    WHITESPACE_P = 686,            /* WHITESPACE_P  */
    WINDOW = 687,                  /* WINDOW  */
    WITH = 688,                    /* WITH  */
    WITHIN = 689,                  /* WITHIN  */
    WITHOUT = 690,                 /* WITHOUT  */
    WORK = 691,                    /* WORK  */
    WRAPPER = 692,                 /* WRAPPER  */
    WRITE_P = 693,                 /* WRITE_P  */
    XML_P = 694,                   /* XML_P  */
    XMLATTRIBUTES = 695,           /* XMLATTRIBUTES  */
    XMLCONCAT = 696,               /* XMLCONCAT  */
    XMLELEMENT = 697,              /* XMLELEMENT  */
    XMLEXISTS = 698,               /* XMLEXISTS  */
    XMLFOREST = 699,               /* XMLFOREST  */
    XMLNAMESPACES = 700,           /* XMLNAMESPACES  */
    XMLPARSE = 701,                /* XMLPARSE  */
    XMLPI = 702,                   /* XMLPI  */
    XMLROOT = 703,                 /* XMLROOT  */
    XMLSERIALIZE = 704,            /* XMLSERIALIZE  */
    XMLTABLE = 705,                /* XMLTABLE  */
    YEAR_P = 706,                  /* YEAR_P  */
    YES_P = 707,                   /* YES_P  */
    ZONE = 708,                    /* ZONE  */
    NOT_LA = 709,                  /* NOT_LA  */
    NULLS_LA = 710,                /* NULLS_LA  */
    WITH_LA = 711,                 /* WITH_LA  */
    POSTFIXOP = 712,               /* POSTFIXOP  */
    UMINUS = 713                   /* UMINUS  */
  };
  typedef enum yytokentype yytoken_kind_t;
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 788 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_LESS_EQUALS = 15,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 16,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 17,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 18,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 19,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 20,                    /* ACCESS  */
  YYSYMBOL_ACTION = 21,                    /* ACTION  */
  YYSYMBOL_ADD_P = 22,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 23,                     /* ADMIN  */
  YYSYMBOL_AFTER = 24,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 25,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 26,                       /* ALL  */
  YYSYMBOL_ALSO = 27,                      /* ALSO  */
  YYSYMBOL_ALTER = 28,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 29,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 30,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 31,                   /* ANALYZE  */
  YYSYMBOL_AND = 32,                       /* AND  */
  YYSYMBOL_ANY = 33,                       /* ANY  */
  YYSYMBOL_ARRAY = 34,                     /* ARRAY  */
  YYSYMBOL_AS = 35,                        /* AS  */
  YYSYMBOL_ASC_P = 36,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 37,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 38,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 39,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 40,                        /* AT  */
  YYSYMBOL_ATTACH = 41,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 42,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 43,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 44,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 45,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 46,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 47,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 48,                    /* BIGINT  */
  YYSYMBOL_BINARY = 49,                    /* BINARY  */
  YYSYMBOL_BIT = 50,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 51,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 52,                      /* BOTH  */
  YYSYMBOL_BY = 53,                        /* BY  */
  YYSYMBOL_CACHE = 54,                     /* CACHE  */
  YYSYMBOL_CALL_P = 55,                    /* CALL_P  */
  YYSYMBOL_CALLED = 56,                    /* CALLED  */
  YYSYMBOL_CASCADE = 57,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 58,                  /* CASCADED  */
  YYSYMBOL_CASE = 59,                      /* CASE  */
  YYSYMBOL_CAST = 60,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 61,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 62,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 63,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 64,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 65,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 66,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 67,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 68,                     /* CLASS  */
  YYSYMBOL_CLOSE = 69,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 70,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 71,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 72,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 73,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 74,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 75,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 76,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 77,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 78,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 79,                 /* COMMITTED  */
  YYSYMBOL_CONCURRENTLY = 80,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 81,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 82,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 83,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 84,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 85,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 86,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 87,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 88,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 89,                      /* COPY  */
  YYSYMBOL_COST = 90,                      /* COST  */
  YYSYMBOL_CREATE_P = 91,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 92,                     /* CROSS  */
  YYSYMBOL_CSV = 93,                       /* CSV  */
  YYSYMBOL_CUBE = 94,                      /* CUBE  */
  YYSYMBOL_CURRENT_P = 95,                 /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 96,           /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 97,              /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 98,              /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 99,            /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 100,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 101,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 102,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DEALLOCATE = 108,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 109,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 110,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 111,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 112,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 113,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 114,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 115,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 116,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 117,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 118,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 119,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 120,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 121,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 122,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 123,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 124,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 125,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 126,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 127,                 /* DISTINCT  */
  YYSYMBOL_DO = 128,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 129,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 130,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 131,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 132,                     /* DROP  */
  YYSYMBOL_EACH = 133,                     /* EACH  */
  YYSYMBOL_ELSE = 134,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 135,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 136,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 137,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 138,                    /* END_P  */
  YYSYMBOL_ENUM_P = 139,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 140,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 141,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 142,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 143,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 144,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 145,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 146,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 147,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 148,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 149,                 /* EXPORT_P  */
  YYSYMBOL_EXTENSION = 150,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 151,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 152,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 153,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 154,                   /* FAMILY  */
  YYSYMBOL_FETCH = 155,                    /* FETCH  */
  YYSYMBOL_FILTER = 156,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 157,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 158,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 159,                /* FOLLOWING  */
  YYSYMBOL_FOR = 160,                      /* FOR  */
  YYSYMBOL_FORCE = 161,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 162,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 163,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 164,                   /* FREEZE  */
  YYSYMBOL_FROM = 165,                     /* FROM  */
  YYSYMBOL_FULL = 166,                     /* FULL  */
  YYSYMBOL_FUNCTION = 167,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 168,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 169,                /* GENERATED  */
  YYSYMBOL_GLOB = 170,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 171,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 172,                    /* GRANT  */
  YYSYMBOL_GRANTED = 173,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 174,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 175,                 /* GROUPING  */
  YYSYMBOL_HANDLER = 176,                  /* HANDLER  */
  YYSYMBOL_HAVING = 177,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 178,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 179,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 180,                   /* HOUR_P  */
  YYSYMBOL_IDENTITY_P = 181,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 182,                     /* IF_P  */
  YYSYMBOL_ILIKE = 183,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 184,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 185,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 186,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 187,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 188,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 189,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 190,                /* INCREMENT  */
  YYSYMBOL_INDEX = 191,                    /* INDEX  */
  YYSYMBOL_INDEXES = 192,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 193,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 194,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 195,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 196,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 197,                  /* INNER_P  */
  YYSYMBOL_INOUT = 198,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 199,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 200,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 201,                   /* INSERT  */
  YYSYMBOL_INSTEAD = 202,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 203,                    /* INT_P  */
  YYSYMBOL_INTEGER = 204,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 205,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 206,                 /* INTERVAL  */
  YYSYMBOL_INTO = 207,                     /* INTO  */
  YYSYMBOL_INVOKER = 208,                  /* INVOKER  */
  YYSYMBOL_IS = 209,                       /* IS  */
  YYSYMBOL_ISNULL = 210,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 211,                /* ISOLATION  */
  YYSYMBOL_JOIN = 212,                     /* JOIN  */
  YYSYMBOL_KEY = 213,                      /* KEY  */
  YYSYMBOL_LABEL = 214,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 215,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 216,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 217,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 218,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 219,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 220,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 221,                     /* LEFT  */
  YYSYMBOL_LEVEL = 222,                    /* LEVEL  */
  YYSYMBOL_LIKE = 223,                     /* LIKE  */
  YYSYMBOL_LIMIT = 224,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 225,                   /* LISTEN  */
  YYSYMBOL_LOAD = 226,                     /* LOAD  */
  YYSYMBOL_LOCAL = 227,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 228,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 229,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 230,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 231,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 232,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 233,                   /* LOGGED  */
  YYSYMBOL_MACRO = 234,                    /* MACRO  */
  YYSYMBOL_MAPPING = 235,                  /* MAPPING  */
  YYSYMBOL_MATCH = 236,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 237,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 238,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 239,                   /* METHOD  */
  YYSYMBOL_MINUTE_P = 240,                 /* MINUTE_P  */
  YYSYMBOL_MINVALUE = 241,                 /* MINVALUE  */
  YYSYMBOL_MODE = 242,                     /* MODE  */
  YYSYMBOL_MONTH_P = 243,                  /* MONTH_P  */
  YYSYMBOL_MOVE = 244,                     /* MOVE  */
  YYSYMBOL_NAME_P = 245,                   /* NAME_P  */
  YYSYMBOL_NAMES = 246,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 247,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 248,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 249,                    /* NCHAR  */
  YYSYMBOL_NEW = 250,                      /* NEW  */
  YYSYMBOL_NEXT = 251,                     /* NEXT  */
  YYSYMBOL_NO = 252,                       /* NO  */
  YYSYMBOL_NONE = 253,                     /* NONE  */
  YYSYMBOL_NOT = 254,                      /* NOT  */
  YYSYMBOL_NOTHING = 255,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 256,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 257,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 258,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 259,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 260,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 261,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 262,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 263,                 /* OBJECT_P  */
  YYSYMBOL_OF = 264,                       /* OF  */
  YYSYMBOL_OFF = 265,                      /* OFF  */
  YYSYMBOL_OFFSET = 266,                   /* OFFSET  */
  YYSYMBOL_OIDS = 267,                     /* OIDS  */
  YYSYMBOL_OLD = 268,                      /* OLD  */
  YYSYMBOL_ON = 269,                       /* ON  */
  YYSYMBOL_ONLY = 270,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 271,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 272,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 273,                  /* OPTIONS  */
  YYSYMBOL_OR = 274,                       /* OR  */
  YYSYMBOL_ORDER = 275,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 276,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 277,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 278,                  /* OUTER_P  */
  YYSYMBOL_OVER = 279,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 280,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 281,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 282,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 283,                    /* OWNED  */
  YYSYMBOL_OWNER = 284,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 285,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 286,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 287,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 288,                /* PARTITION  */
  YYSYMBOL_PASSING = 289,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 290,                 /* PASSWORD  */
  YYSYMBOL_PLACING = 291,                  /* PLACING  */
  YYSYMBOL_PLANS = 292,                    /* PLANS  */
  YYSYMBOL_POLICY = 293,                   /* POLICY  */
  YYSYMBOL_POSITION = 294,                 /* POSITION  */
  YYSYMBOL_PRAGMA_P = 295,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 296,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 297,                /* PRECISION  */
  YYSYMBOL_PREPARE = 298,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 299,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 300,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 301,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 302,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 303,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 304,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 305,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 306,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 307,              /* PUBLICATION  */
  YYSYMBOL_QUOTE = 308,                    /* QUOTE  */
  YYSYMBOL_RANGE = 309,                    /* RANGE  */
  YYSYMBOL_READ_P = 310,                   /* READ_P  */
  YYSYMBOL_REAL = 311,                     /* REAL  */
  YYSYMBOL_REASSIGN = 312,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 313,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 314,                /* RECURSIVE  */
  YYSYMBOL_REF = 315,                      /* REF  */
  YYSYMBOL_REFERENCES = 316,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 317,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 318,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 319,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 320,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 321,                  /* RELEASE  */
  YYSYMBOL_RENAME = 322,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 323,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 324,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 325,                  /* REPLICA  */
  YYSYMBOL_RESET = 326,                    /* RESET  */
  YYSYMBOL_RESTART = 327,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 328,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 329,                /* RETURNING  */
  YYSYMBOL_RETURNS = 330,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 331,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 332,                    /* RIGHT  */
  YYSYMBOL_ROLE = 333,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 334,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 335,                   /* ROLLUP  */
  YYSYMBOL_ROW = 336,                      /* ROW  */
  YYSYMBOL_ROWS = 337,                     /* ROWS  */
  YYSYMBOL_RULE = 338,                     /* RULE  */
  YYSYMBOL_SAVEPOINT = 339,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 340,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 341,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 342,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 343,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 344,                 /* SECOND_P  */
  YYSYMBOL_SECURITY = 345,                 /* SECURITY  */
  YYSYMBOL_SELECT = 346,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 347,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 348,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 349,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 350,                   /* SERVER  */
  YYSYMBOL_SESSION = 351,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 352,             /* SESSION_USER  */
  YYSYMBOL_SET = 353,                      /* SET  */
  YYSYMBOL_SETOF = 354,                    /* SETOF  */
  YYSYMBOL_SETS = 355,                     /* SETS  */
  YYSYMBOL_SHARE = 356,                    /* SHARE  */
  YYSYMBOL_SHOW = 357,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 358,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 359,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 360,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 361,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 362,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 363,                     /* SOME  */
  YYSYMBOL_SQL_P = 364,                    /* SQL_P  */
  YYSYMBOL_STABLE = 365,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 366,             /* STANDALONE_P  */
  YYSYMBOL_START = 367,                    /* START  */
  YYSYMBOL_STATEMENT = 368,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 369,               /* STATISTICS  */
  YYSYMBOL_STDIN = 370,                    /* STDIN  */
  YYSYMBOL_STDOUT = 371,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 372,                  /* STORAGE  */
  YYSYMBOL_STRICT_P = 373,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 374,                  /* STRIP_P  */
  YYSYMBOL_SUBSCRIPTION = 375,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 376,                /* SUBSTRING  */
  YYSYMBOL_SYMMETRIC = 377,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 378,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 379,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 380,                    /* TABLE  */
  YYSYMBOL_TABLES = 381,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 382,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 383,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 384,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 385,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 386,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 387,                   /* TEXT_P  */
  YYSYMBOL_THEN = 388,                     /* THEN  */
  YYSYMBOL_TIME = 389,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 390,                /* TIMESTAMP  */
  YYSYMBOL_TO = 391,                       /* TO  */
  YYSYMBOL_TRAILING = 392,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 393,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 394,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 395,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 396,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 397,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 398,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 399,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 400,                  /* TRUSTED  */
  YYSYMBOL_TYPE_P = 401,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 402,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 403,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 404,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 405,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 406,                    /* UNION  */
  YYSYMBOL_UNIQUE = 407,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 408,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 409,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 410,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 411,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 412,                   /* UPDATE  */
  YYSYMBOL_USER = 413,                     /* USER  */
  YYSYMBOL_USING = 414,                    /* USING  */
  YYSYMBOL_VACUUM = 415,                   /* VACUUM  */
  YYSYMBOL_VALID = 416,                    /* VALID  */
  YYSYMBOL_VALIDATE = 417,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 418,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 419,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 420,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 421,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 422,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 423,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 424,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 425,                /* VERSION_P  */
  YYSYMBOL_VIEW = 426,                     /* VIEW  */
  YYSYMBOL_VIEWS = 427,                    /* VIEWS  */
  YYSYMBOL_VOLATILE = 428,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 429,                     /* WHEN  */
  YYSYMBOL_WHERE = 430,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 431,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 432,                   /* WINDOW  */
  YYSYMBOL_WITH = 433,                     /* WITH  */
  YYSYMBOL_WITHIN = 434,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 435,                  /* WITHOUT  */
  YYSYMBOL_WORK = 436,                     /* WORK  */
  YYSYMBOL_WRAPPER = 437,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 438,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 439,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 440,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 441,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 442,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 443,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 444,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 445,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 446,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 447,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 448,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 449,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 450,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 451,                   /* YEAR_P  */
  YYSYMBOL_YES_P = 452,                    /* YES_P  */
  YYSYMBOL_ZONE = 453,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 454,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 455,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 456,                  /* WITH_LA  */
  YYSYMBOL_457_ = 457,                     /* '<'  */
  YYSYMBOL_458_ = 458,                     /* '>'  */
  YYSYMBOL_459_ = 459,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 460,                /* POSTFIXOP  */
  YYSYMBOL_461_ = 461,                     /* '+'  */
  YYSYMBOL_462_ = 462,                     /* '-'  */
  YYSYMBOL_463_ = 463,                     /* '*'  */
  YYSYMBOL_464_ = 464,                     /* '/'  */
  YYSYMBOL_465_ = 465,                     /* '%'  */
  YYSYMBOL_466_ = 466,                     /* '^'  */
  YYSYMBOL_UMINUS = 467,                   /* UMINUS  */
  YYSYMBOL_468_ = 468,                     /* '['  */
  YYSYMBOL_469_ = 469,                     /* ']'  */
  YYSYMBOL_470_ = 470,                     /* '('  */
  YYSYMBOL_471_ = 471,                     /* ')'  */
  YYSYMBOL_472_ = 472,                     /* '.'  */
  YYSYMBOL_473_ = 473,                     /* ';'  */
  YYSYMBOL_474_ = 474,                     /* ','  */
  YYSYMBOL_475_ = 475,                     /* '?'  */
  YYSYMBOL_476_ = 476,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 477,                 /* $accept  */
  YYSYMBOL_stmtblock = 478,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 479,                /* stmtmulti  */
  YYSYMBOL_stmt = 480,                     /* stmt  */
  YYSYMBOL_LoadStmt = 481,                 /* LoadStmt  */
  YYSYMBOL_file_name = 482,                /* file_name  */
  YYSYMBOL_CreateSchemaStmt = 483,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 484,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 485,              /* schema_stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 486,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_VacuumStmt = 487,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 488,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 489,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 490,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 491,               /* opt_freeze  */
  YYSYMBOL_CreateSeqStmt = 492,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 493,            /* OptSeqOptList  */
  YYSYMBOL_CreateFunctionStmt = 494,       /* CreateFunctionStmt  */
  YYSYMBOL_PragmaStmt = 495,               /* PragmaStmt  */
  YYSYMBOL_CallStmt = 496,                 /* CallStmt  */
  YYSYMBOL_AlterSeqStmt = 497,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 498,               /* SeqOptList  */
  YYSYMBOL_opt_with = 499,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 500,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 501,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 502,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 503,             /* SignedIconst  */
  YYSYMBOL_RenameStmt = 504,               /* RenameStmt  */
  YYSYMBOL_opt_column = 505,               /* opt_column  */
  YYSYMBOL_ExplainStmt = 506,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 507,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 508,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 509,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 510,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 511, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 512,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 513,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 514,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 515,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 516,      /* explain_option_name  */
  YYSYMBOL_SelectStmt = 517,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 518,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 519,         /* select_no_parens  */
  YYSYMBOL_select_clause = 520,            /* select_clause  */
  YYSYMBOL_simple_select = 521,            /* simple_select  */
  YYSYMBOL_with_clause = 522,              /* with_clause  */
  YYSYMBOL_cte_list = 523,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 524,        /* common_table_expr  */
  YYSYMBOL_into_clause = 525,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 526,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 527,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 528,          /* all_or_distinct  */
  YYSYMBOL_distinct_clause = 529,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 530,           /* opt_all_clause  */
  YYSYMBOL_opt_sort_clause = 531,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 532,              /* sort_clause  */
  YYSYMBOL_sortby_list = 533,              /* sortby_list  */
  YYSYMBOL_sortby = 534,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 535,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 536,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 537,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 538,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 539,             /* limit_clause  */
  YYSYMBOL_offset_clause = 540,            /* offset_clause  */
  YYSYMBOL_select_limit_value = 541,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 542,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 543, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 544,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 545,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 546,            /* first_or_next  */
  YYSYMBOL_group_clause = 547,             /* group_clause  */
  YYSYMBOL_group_by_list = 548,            /* group_by_list  */
  YYSYMBOL_group_by_item = 549,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 550,       /* empty_grouping_set  */
  YYSYMBOL_having_clause = 551,            /* having_clause  */
  YYSYMBOL_for_locking_clause = 552,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 553,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 554,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 555,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 556,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 557,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 558,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 559,            /* values_clause  */
  YYSYMBOL_from_clause = 560,              /* from_clause  */
  YYSYMBOL_from_list = 561,                /* from_list  */
  YYSYMBOL_table_ref = 562,                /* table_ref  */
  YYSYMBOL_joined_table = 563,             /* joined_table  */
  YYSYMBOL_alias_clause = 564,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 565,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 566,        /* func_alias_clause  */
  YYSYMBOL_join_type = 567,                /* join_type  */
  YYSYMBOL_join_outer = 568,               /* join_outer  */
  YYSYMBOL_join_qual = 569,                /* join_qual  */
  YYSYMBOL_relation_expr = 570,            /* relation_expr  */
  YYSYMBOL_tablesample_clause = 571,       /* tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 572,    /* opt_repeatable_clause  */
  YYSYMBOL_func_table = 573,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 574,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 575,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 576,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 577,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 578,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 579,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 580,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 581,       /* opt_collate_clause  */
  YYSYMBOL_Typename = 582,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 583,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 584,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 585,            /* ConstTypename  */
  YYSYMBOL_GenericType = 586,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 587,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 588,                  /* Numeric  */
  YYSYMBOL_opt_float = 589,                /* opt_float  */
  YYSYMBOL_Bit = 590,                      /* Bit  */
  YYSYMBOL_ConstBit = 591,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 592,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 593,         /* BitWithoutLength  */
  YYSYMBOL_Character = 594,                /* Character  */
  YYSYMBOL_ConstCharacter = 595,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 596,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 597,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 598,                /* character  */
  YYSYMBOL_opt_varying = 599,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 600,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 601,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 602,             /* opt_timezone  */
  YYSYMBOL_opt_interval = 603,             /* opt_interval  */
  YYSYMBOL_interval_second = 604,          /* interval_second  */
  YYSYMBOL_a_expr = 605,                   /* a_expr  */
  YYSYMBOL_b_expr = 606,                   /* b_expr  */
  YYSYMBOL_c_expr = 607,                   /* c_expr  */
  YYSYMBOL_func_application = 608,         /* func_application  */
  YYSYMBOL_func_expr = 609,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 610,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 611, /* func_expr_common_subexpr  */
  YYSYMBOL_within_group_clause = 612,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 613,            /* filter_clause  */
  YYSYMBOL_window_clause = 614,            /* window_clause  */
  YYSYMBOL_window_definition_list = 615,   /* window_definition_list  */
  YYSYMBOL_window_definition = 616,        /* window_definition  */
  YYSYMBOL_over_clause = 617,              /* over_clause  */
  YYSYMBOL_window_specification = 618,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 619, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 620,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 621,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 622,             /* frame_extent  */
  YYSYMBOL_frame_bound = 623,              /* frame_bound  */
  YYSYMBOL_row = 624,                      /* row  */
  YYSYMBOL_sub_type = 625,                 /* sub_type  */
  YYSYMBOL_all_Op = 626,                   /* all_Op  */
  YYSYMBOL_MathOp = 627,                   /* MathOp  */
  YYSYMBOL_qual_Op = 628,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 629,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 630,              /* subquery_Op  */
  YYSYMBOL_any_operator = 631,             /* any_operator  */
  YYSYMBOL_expr_list = 632,                /* expr_list  */
  YYSYMBOL_func_arg_list = 633,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 634,            /* func_arg_expr  */
  YYSYMBOL_type_list = 635,                /* type_list  */
  YYSYMBOL_extract_list = 636,             /* extract_list  */
  YYSYMBOL_extract_arg = 637,              /* extract_arg  */
  YYSYMBOL_overlay_list = 638,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 639,          /* overlay_placing  */
  YYSYMBOL_position_list = 640,            /* position_list  */
  YYSYMBOL_substr_list = 641,              /* substr_list  */
  YYSYMBOL_substr_from = 642,              /* substr_from  */
  YYSYMBOL_substr_for = 643,               /* substr_for  */
  YYSYMBOL_trim_list = 644,                /* trim_list  */
  YYSYMBOL_in_expr = 645,                  /* in_expr  */
  YYSYMBOL_case_expr = 646,                /* case_expr  */
  YYSYMBOL_when_clause_list = 647,         /* when_clause_list  */
  YYSYMBOL_when_clause = 648,              /* when_clause  */
  YYSYMBOL_case_default = 649,             /* case_default  */
  YYSYMBOL_case_arg = 650,                 /* case_arg  */
  YYSYMBOL_columnref = 651,                /* columnref  */
  YYSYMBOL_indirection_el = 652,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 653,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 654,              /* indirection  */
  YYSYMBOL_opt_indirection = 655,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 656,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list = 657,          /* opt_target_list  */
  YYSYMBOL_target_list = 658,              /* target_list  */
  YYSYMBOL_target_el = 659,                /* target_el  */
  YYSYMBOL_qualified_name_list = 660,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 661,           /* qualified_name  */
  YYSYMBOL_name_list = 662,                /* name_list  */
  YYSYMBOL_name = 663,                     /* name  */
  YYSYMBOL_attr_name = 664,                /* attr_name  */
  YYSYMBOL_func_name = 665,                /* func_name  */
  YYSYMBOL_AexprConst = 666,               /* AexprConst  */
  YYSYMBOL_Iconst = 667,                   /* Iconst  */
  YYSYMBOL_Sconst = 668,                   /* Sconst  */
  YYSYMBOL_ColId = 669,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 670,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 671,       /* type_function_name  */
  YYSYMBOL_any_name = 672,                 /* any_name  */
  YYSYMBOL_attrs = 673,                    /* attrs  */
  YYSYMBOL_opt_name_list = 674,            /* opt_name_list  */
  YYSYMBOL_param_name = 675,               /* param_name  */
  YYSYMBOL_ColLabel = 676,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 677,         /* ColLabelOrString  */
  YYSYMBOL_VariableShowStmt = 678,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 679,         /* show_or_describe  */
  YYSYMBOL_var_name = 680,                 /* var_name  */
  YYSYMBOL_DeleteStmt = 681,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 682,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 683,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 684,             /* using_clause  */
  YYSYMBOL_TransactionStmt = 685,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 686,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 687,               /* UpdateStmt  */
  YYSYMBOL_DeallocateStmt = 688,           /* DeallocateStmt  */
  YYSYMBOL_CreateStmt = 689,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 690,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 691,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 692, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 693,       /* generic_option_arg  */
  YYSYMBOL_key_action = 694,               /* key_action  */
  YYSYMBOL_ColConstraint = 695,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 696,        /* ColConstraintElem  */
  YYSYMBOL_generic_option_elem = 697,      /* generic_option_elem  */
  YYSYMBOL_key_update = 698,               /* key_update  */
  YYSYMBOL_key_actions = 699,              /* key_actions  */
  YYSYMBOL_create_generic_options = 700,   /* create_generic_options  */
  YYSYMBOL_OnCommitOption = 701,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 702,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 703,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 704,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 705,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 706,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 707,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 708,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 709,                  /* OptWith  */
  YYSYMBOL_definition = 710,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 711,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 712,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 713,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 714,                /* columnDef  */
  YYSYMBOL_generic_option_list = 715,      /* generic_option_list  */
  YYSYMBOL_def_list = 716,                 /* def_list  */
  YYSYMBOL_index_name = 717,               /* index_name  */
  YYSYMBOL_TableElement = 718,             /* TableElement  */
  YYSYMBOL_def_elem = 719,                 /* def_elem  */
  YYSYMBOL_opt_definition = 720,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 721,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 722,               /* columnElem  */
  YYSYMBOL_opt_column_list = 723,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 724,              /* ColQualList  */
  YYSYMBOL_key_delete = 725,               /* key_delete  */
  YYSYMBOL_reloption_elem = 726,           /* reloption_elem  */
  YYSYMBOL_columnList = 727,               /* columnList  */
  YYSYMBOL_func_type = 728,                /* func_type  */
  YYSYMBOL_ConstraintElem = 729,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 730,         /* TableElementList  */
  YYSYMBOL_key_match = 731,                /* key_match  */
  YYSYMBOL_TableLikeClause = 732,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 733,                  /* OptTemp  */
  YYSYMBOL_generated_when = 734,           /* generated_when  */
  YYSYMBOL_VariableSetStmt = 735,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 736,                 /* set_rest  */
  YYSYMBOL_generic_set = 737,              /* generic_set  */
  YYSYMBOL_var_value = 738,                /* var_value  */
  YYSYMBOL_zone_value = 739,               /* zone_value  */
  YYSYMBOL_var_list = 740,                 /* var_list  */
  YYSYMBOL_DropStmt = 741,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 742,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 743,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 744,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 745,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 746, /* drop_type_name_on_any_name  */
  YYSYMBOL_IndexStmt = 747,                /* IndexStmt  */
  YYSYMBOL_access_method = 748,            /* access_method  */
  YYSYMBOL_access_method_clause = 749,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 750,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 751,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 752,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 753,               /* opt_unique  */
  YYSYMBOL_CreateAsStmt = 754,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 755,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 756,         /* create_as_target  */
  YYSYMBOL_VariableResetStmt = 757,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 758,            /* generic_reset  */
  YYSYMBOL_reset_rest = 759,               /* reset_rest  */
  YYSYMBOL_PrepareStmt = 760,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 761,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 762,           /* PreparableStmt  */
  YYSYMBOL_ExportStmt = 763,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 764,               /* ImportStmt  */
  YYSYMBOL_AnalyzeStmt = 765,              /* AnalyzeStmt  */
  YYSYMBOL_AlterTableStmt = 766,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 767, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 768,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 769, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 770, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 771,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 772,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 773, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 774,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 775,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 776,             /* opt_set_data  */
  YYSYMBOL_ExecuteStmt = 777,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 778,     /* execute_param_clause  */
  YYSYMBOL_InsertStmt = 779,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 780,              /* insert_rest  */
  YYSYMBOL_insert_target = 781,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 782,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 783,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 784,       /* insert_column_item  */
  YYSYMBOL_set_clause = 785,               /* set_clause  */
  YYSYMBOL_opt_on_conflict = 786,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 787,               /* index_elem  */
  YYSYMBOL_returning_clause = 788,         /* returning_clause  */
  YYSYMBOL_override_kind = 789,            /* override_kind  */
  YYSYMBOL_set_target_list = 790,          /* set_target_list  */
  YYSYMBOL_opt_collate = 791,              /* opt_collate  */
  YYSYMBOL_opt_class = 792,                /* opt_class  */
  YYSYMBOL_insert_column_list = 793,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 794,          /* set_clause_list  */
  YYSYMBOL_index_params = 795,             /* index_params  */
  YYSYMBOL_set_target = 796,               /* set_target  */
  YYSYMBOL_ViewStmt = 797,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 798,         /* opt_check_option  */
  YYSYMBOL_CopyStmt = 799,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 800,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 801,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 802, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 803,                /* opt_using  */
  YYSYMBOL_opt_as = 804,                   /* opt_as  */
  YYSYMBOL_opt_program = 805,              /* opt_program  */
  YYSYMBOL_copy_options = 806,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 807,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 808,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 809,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 810,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 811,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 812,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 813, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 814,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 815,    /* copy_generic_opt_list  */
  YYSYMBOL_CheckPointStmt = 816,           /* CheckPointStmt  */
  YYSYMBOL_unreserved_keyword = 817,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 818,         /* col_name_keyword  */
  YYSYMBOL_type_func_name_keyword = 819,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 820          /* reserved_keyword  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  554
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   45697

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  477
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  344
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1567
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2624

#define YYMAXUTOK   713


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,   465,     2,     2,
     470,   471,   463,   461,   474,   462,   472,   464,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   476,   473,
     457,   459,   458,   475,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   468,     2,   469,   466,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   460,   467
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   453,   453,   469,   481,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   524,     7,
      16,     7,    16,    34,    41,    46,    47,    48,    49,     7,
      16,    25,    34,    43,    52,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     9,    19,    32,    33,     7,    15,     7,    14,    22,
       6,     9,    17,    29,    30,    34,    35,    36,    41,    42,
      43,    48,    52,    56,    60,    64,    68,    72,    76,    80,
      84,    88,    92,    97,   101,   105,   112,   113,   117,   118,
     119,     6,    15,    25,    35,    45,    55,    65,    75,    85,
      95,   106,   117,   127,   140,   141,     9,    16,    26,    33,
      44,    45,    50,    51,    52,    57,    58,    59,    60,    61,
      65,    66,    67,    68,    73,    74,    79,    83,    91,    92,
      97,    98,    99,   105,   110,   118,   119,    47,    48,    52,
      53,    68,    69,    76,    84,    92,   100,   108,   116,   127,
     128,   155,   169,   184,   185,   204,   208,   212,   229,   236,
     243,   253,   254,   257,   269,   280,   288,   293,   298,   303,
     308,   316,   324,   329,   334,   341,   342,   346,   347,   348,
     355,   356,   360,   361,   365,   366,   370,   374,   375,   378,
     387,   398,   399,   400,   403,   404,   405,   409,   410,   411,
     412,   416,   417,   421,   423,   439,   441,   446,   449,   454,
     455,   463,   483,   484,   486,   491,   492,   496,   497,   500,
     501,   526,   527,   531,   532,   536,   537,   541,   554,   555,
     559,   560,   564,   565,   569,   570,   574,   585,   586,   587,
     588,   592,   593,   598,   599,   600,   609,   615,   633,   634,
     638,   639,   645,   650,   658,   665,   673,   708,   733,   737,
     763,   767,   779,   792,   806,   817,   832,   838,   843,   849,
     856,   857,   865,   869,   873,   879,   886,   891,   892,   893,
     894,   898,   899,   911,   912,   917,   924,   931,   938,   961,
     974,   975,   990,  1000,  1012,  1017,  1018,  1021,  1022,  1025,
    1026,  1031,  1032,  1037,  1041,  1047,  1068,  1076,  1088,  1093,
    1100,  1105,  1111,  1116,  1125,  1127,  1130,  1134,  1135,  1136,
    1137,  1138,  1139,  1144,  1164,  1165,  1166,  1167,  1178,  1184,
    1192,  1193,  1199,  1204,  1209,  1214,  1219,  1224,  1229,  1234,
    1240,  1246,  1252,  1259,  1281,  1290,  1294,  1302,  1306,  1314,
    1326,  1347,  1351,  1357,  1361,  1374,  1382,  1392,  1394,  1396,
    1398,  1400,  1402,  1407,  1408,  1415,  1424,  1432,  1441,  1452,
    1460,  1461,  1462,  1466,  1468,  1470,  1472,  1474,  1476,  1478,
    1483,  1488,  1494,  1502,  1507,  1514,  1521,  1525,  1529,  1565,
    1566,  1568,  1576,  1591,  1593,  1595,  1597,  1599,  1601,  1603,
    1605,  1607,  1609,  1611,  1613,  1615,  1617,  1620,  1622,  1624,
    1627,  1629,  1631,  1633,  1636,  1641,  1646,  1653,  1658,  1665,
    1670,  1678,  1683,  1692,  1700,  1708,  1716,  1734,  1742,  1750,
    1758,  1766,  1774,  1790,  1798,  1806,  1814,  1822,  1830,  1838,
    1842,  1846,  1850,  1854,  1862,  1870,  1878,  1886,  1906,  1928,
    1939,  1946,  1971,  1973,  1975,  1977,  1979,  1981,  1983,  1985,
    1987,  1989,  1991,  1993,  1995,  1997,  1999,  2001,  2003,  2005,
    2007,  2009,  2013,  2017,  2021,  2035,  2036,  2037,  2049,  2064,
    2076,  2078,  2080,  2091,  2115,  2128,  2132,  2138,  2145,  2152,
    2162,  2169,  2197,  2232,  2243,  2244,  2251,  2257,  2261,  2265,
    2269,  2273,  2277,  2281,  2285,  2289,  2293,  2297,  2301,  2305,
    2309,  2313,  2317,  2319,  2323,  2332,  2337,  2344,  2359,  2366,
    2370,  2374,  2378,  2382,  2396,  2397,  2401,  2402,  2410,  2411,
    2415,  2416,  2421,  2429,  2431,  2445,  2448,  2475,  2476,  2479,
    2480,  2491,  2509,  2516,  2525,  2542,  2587,  2595,  2603,  2611,
    2619,  2640,  2641,  2642,  2645,  2646,  2647,  2650,  2651,  2654,
    2655,  2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,  2664,
    2665,  2668,  2670,  2675,  2677,  2682,  2684,  2686,  2688,  2690,
    2692,  2694,  2696,  2710,  2712,  2716,  2720,  2727,  2731,  2737,
    2741,  2750,  2761,  2762,  2766,  2770,  2777,  2778,  2779,  2780,
    2781,  2782,  2783,  2784,  2794,  2798,  2805,  2812,  2813,  2829,
    2833,  2838,  2842,  2857,  2862,  2866,  2869,  2872,  2873,  2874,
    2877,  2884,  2894,  2908,  2909,  2913,  2924,  2925,  2928,  2929,
    2932,  2936,  2943,  2947,  2951,  2959,  2970,  2971,  2975,  2976,
    2980,  2981,  2984,  2985,  2995,  2996,  3000,  3001,  3004,  3020,
    3028,  3036,  3058,  3059,  3070,  3074,  3101,  3103,  3108,  3110,
    3120,  3122,  3133,  3137,  3141,  3145,  3149,  3158,  3165,  3197,
    3201,  3207,  3215,  3227,  3231,  3235,  3241,  3242,  3258,  3259,
    3260,  3263,  3264,  3269,  3270,  3271,  3274,  3275,  3278,  3280,
    3285,  3286,  3289,  3297,  3298,  3299,  3300,  3301,  3304,  3305,
       3,     9,    15,    21,    29,    29,    31,    32,     7,    21,
      25,    32,    43,    44,    50,    51,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     7,     7,    13,    19,    25,
       7,    21,    41,    42,    69,    70,    71,    72,    73,    74,
      78,    79,    84,    89,    90,    91,    92,    93,    98,   105,
     106,   107,   124,   131,   138,   148,   158,   170,   179,   188,
     207,   214,   219,   221,   223,   225,   228,   233,   234,   238,
     239,   240,   241,   246,   250,   251,   256,   263,   268,   269,
     270,   271,   272,   273,   274,   275,   281,   282,   286,   291,
     298,   305,   312,   324,   325,   326,   327,   331,   336,   337,
     338,   343,   348,   349,   350,   351,   352,   353,   358,   381,
     385,   392,   393,   397,   401,   402,   403,   407,   411,   419,
     420,   425,   426,   430,   438,   439,   444,   445,   449,   454,
     458,   462,   467,   475,   476,   480,   481,   487,   498,   511,
     525,   539,   553,   567,   590,   594,   601,   605,   613,   618,
     625,   635,   636,   637,   638,   639,   646,   653,   654,   659,
     660,    10,    16,    22,    32,    33,    41,    52,    64,    72,
      80,    87,    97,    99,   105,   109,   113,   128,   135,   136,
     137,   141,   142,     9,    19,    29,    39,    49,    59,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    90,    91,    92,    93,    94,    95,    96,   101,
     102,   107,   108,   109,   114,   115,   116,     8,    33,    62,
      66,    67,    72,    73,    78,    79,    83,    84,    89,    90,
      11,    24,    41,    42,    43,    48,     2,     7,    14,    24,
      25,    32,     7,    18,    19,    23,    24,    25,    26,     7,
      20,     9,    19,     9,    18,    27,    36,    45,    54,    63,
      72,    85,    87,    93,    94,    99,   103,   107,   118,   126,
     130,   139,   148,   157,   166,   175,   184,   192,   200,   209,
     218,   227,   236,   253,   262,   271,   280,   290,   303,   318,
     327,   335,   350,   358,   368,   378,   385,   392,   400,   407,
     418,   419,   424,   428,   433,   438,   446,   447,   452,   456,
     457,     7,    14,    31,    51,    52,     8,    21,    27,    34,
      40,    47,    57,    61,    70,    79,    88,    95,    96,   101,
     113,   118,   143,   153,   163,   169,   180,   191,   206,   207,
     213,   214,   219,   220,   226,   227,   231,   232,   237,   239,
     245,   246,   250,   251,   256,     8,    21,    34,    52,    74,
      75,    76,    77,     1,    30,    53,    54,    59,    63,    68,
      72,    80,    81,    85,    86,    91,    92,    96,    97,   102,
     103,   104,   105,   106,   111,   119,   123,   128,   129,   134,
     138,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   191,   195,   203,   209,   210,   211,   216,
     220,     5,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
      13,    13,    13,    13,    13,    13,    13,    13,    13,    14,
      14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
      14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
      14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
      14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
      14,    14,    14,    14,    14,    14,    14,    15,    15,    15,
      15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
      15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
      15,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
      16,    16,    16,    16,    16,    16,    16,    16
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P",
  "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE",
  "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT",
  "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED",
  "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
  "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
  "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS",
  "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
  "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GROUP_P", "GROUPING", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
  "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
  "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE_P", "MINVALUE", "MODE",
  "MONTH_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER",
  "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLACING",
  "PLANS", "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA",
  "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SELECT",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
  "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STRICT_P", "STRIP_P", "SUBSCRIPTION", "SUBSTRING",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
  "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
  "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'?'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "LoadStmt", "file_name",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "AlterObjectSchemaStmt", "VacuumStmt", "vacuum_option_elem", "opt_full",
  "vacuum_option_list", "opt_freeze", "CreateSeqStmt", "OptSeqOptList",
  "CreateFunctionStmt", "PragmaStmt", "CallStmt", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "RenameStmt", "opt_column", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "tablesample_clause", "opt_repeatable_clause",
  "func_table", "rowsfrom_item", "rowsfrom_list", "opt_col_def_list",
  "opt_ordinality", "where_clause", "TableFuncElementList",
  "TableFuncElement", "opt_collate_clause", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "opt_interval", "interval_second",
  "a_expr", "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "row", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric", "opt_target_list",
  "target_list", "target_el", "qualified_name_list", "qualified_name",
  "name_list", "name", "attr_name", "func_name", "AexprConst", "Iconst",
  "Sconst", "ColId", "ColIdOrString", "type_function_name", "any_name",
  "attrs", "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "VariableShowStmt", "show_or_describe", "var_name", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "DeallocateStmt",
  "CreateStmt", "ConstraintAttributeSpec", "def_arg",
  "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
  "ColConstraint", "ColConstraintElem", "generic_option_elem",
  "key_update", "key_actions", "create_generic_options", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "columnDef", "generic_option_list",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "CreateAsStmt",
  "opt_with_data", "create_as_target", "VariableResetStmt",
  "generic_reset", "reset_rest", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "ExportStmt", "ImportStmt", "AnalyzeStmt",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "ExecuteStmt", "execute_param_clause", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "ViewStmt", "opt_check_option", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CheckPointStmt", "unreserved_keyword",
  "col_name_keyword", "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,    60,    62,    61,
     712,    43,    45,    42,    47,    37,    94,   713,    91,    93,
      40,    41,    46,    59,    44,    63,    58
};
#endif

#define YYPACT_NINF (-2305)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1473)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    4454,   259,   792, -2305, -2305,   259, 29022, -2305,   259,    32,
    1859, 30826, -2305,  4121,   259, 35336,   340,   138,   273,   293,
   35336, 35336, 31277,   259,   192, 35787, -2305,   259, 31728,   -88,
      50, 36238, 35336,  1145,   591,   178, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,   211, -2305,
     112, -2305,   616,   124,   601,   199, -2305, 32179, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305,    38, -2305, -2305, -2305, -2305,
   -2305, -2305, 36689, 35336, 37140, 32630, 37591, -2305,    83, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,   221,
     216, -2305,    90, -2305, -2305, -2305, -2305,  1145, 35336, 35336,
     247,   450, 35336,   375, 38042, -2305, -2305, -2305, -2305,   502,
     516, -2305, -2305, 33081, -2305, -2305, -2305,   494, -2305, -2305,
     371, -2305,   129, -2305,   385, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305,   435, -2305, -2305, 38493, 38944, 39395, -2305,
     410,   695,   352, 18187, -2305,   211, -2305, -2305, -2305, -2305,
   -2305,   293,   293, -2305, -2305, -2305,  -188,   414, -2305,   474,
     688, -2305,   463, -2305, -2305, -2305, -2305,   675,  7923,  7923,
   39846,   293, 39846,   495,   267, -2305, -2305, -2305, 19548, -2305,
     509,   216, -2305,   180,   801, 10288, 35336,   506, -2305,   515,
     506,   527,   560,   601, -2305,  4454, -2305, 35336,   207,   207,
    1010,   207,   975,   989, -2305,   109, -2305,   597, -2305,   620,
     893,   463,   913,   918, 31728,  1007,   969,   818,  1019,  3485,
    1024,  1006,  1031,  1094,  6031, 10288, 22881, -2305,   216, -2305,
   -2305, -2305,   665, -2305,   661,   736, -2305, -2305, -2305, -2305,
     757,   695,   983, -2305,   813, 40297, 40748, 35336,  1172, -2305,
   -2305, -2305, -2305,   824, -2305, -2305,   106,  1116,   803, -2305,
      30,  1129,    34, -2305,  1142,  1027, 10288, -2305,   925, -2305,
   -2305,    50, -2305,  -196, -2305, -2305, 24685, -2305, -2305, -2305,
     352,   841, -2305, 24685, 10288, 44807,  1277, -2305,  1098, 35336,
     849, -2305, -2305, -2305, -2305, -2305, -2305,  1325,    84,  1331,
   10288,   874,    84,    84,   879,  1193, -2305, -2305, -2305,    93,
     885,   902, -2305,    70,    70, -2305,  1076,   907,   915, -2305,
      97,  1394,  1398,   103,   940,   951,   602,    84, 10288, -2305,
     952,    70,   963,   974,   976,  1412,   980, -2305,  1440,   990,
     131,   149,   998,   999, -2305, -2305,   116, 10288, 10288, 10288,
   -2305,  6977, -2305,   216,   293, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305,  1000, -2305,   122,  5094, -2305,   954, -2305, -2305,
    1183, 10288, -2305, -2305,   -67, -2305,   130, -2305, -2305, -2305,
     216,  1247,  1008, -2305, -2305, -2305,   153,  1385, 23783, 24234,
   35336, -2305, -2305,   216, -2305, -2305, -2305, -2305, -2305,   323,
   -2305, -2305,   211, 25752,   380,   506, 35336, 35336,  1446, -2305,
   -2305, -2305,   515, -2305, -2305,   601,   601, 10288,   601,    78,
      11,  8396, 10761,  1332,  1231,    86,    91,  1339, -2305,  1241,
     975,   989, 10288, -2305,  1285, 31728, 35336, 41199,  1159, 35336,
   29473,   206,   664,  1046,  1135,  1047,   -33,  1443, -2305,  1054,
   -2305,  1143, 35336, 45244,   161, -2305,  1489,   161,   161,   528,
    1498,  1164,   185,  1315,   -37,  -160,  2507, -2305,  1054, 31728,
      54,   304,  1054, 35336,  1170,   459,  1054, 10288, 10288, 10288,
    1103, -2305, 25752,  -114, -2305,   716,   787, 22429,  1101, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305,  1188, 35336,  1147, 10288, 10288,
    -115,  1434,  1503, 35336,  1345,  2507,  1348,  1138,  1582,   661,
   -2305, 41650, -2305, -2305, -2305, -2305, -2305, 35336, 26767,  1146,
   -2305, -2305, 35336, -2305, 35336, 35336, -2305, 35336, 35336,   493,
   42101,   352, 28571, -2305, -2305, -2305, -2305,   272,   947, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, 26767, -2305,
    1909, -2305, -2305, -2305,  1150,   559, -2305, -2305,  1197, -2305,
    1197,  1197,  1151,  1151,  1152, -2305, -2305, -2305,   602,  1197,
    1151, -2305, 45244, -2305,   484,   504, -2305, -2305,  1592, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,    43,   584,
     448, -2305,  1145, -2305, -2305, 10288,   216, -2305,  1157, 25752,
    1203, 10288, -2305, -2305, 10288,  1165,  1627,  1627, 10288, -2305,
   -2305, -2305, -2305,   814,  1627, -2305,  1627,  1627,  1197,  1197,
   -2305, 25866, 10288, -2305, 21362, 10288, 13126,  8869, 10288,  1248,
    1249,  1627, -2305,  1627, -2305, 10288,  7450, 25866,  1629,  1629,
    1219,  5140,  1168,   216,   216, -2305,  1627,    75,    45, -2305,
      89, 44807, 10288, 10288, 10288, 10288, 26316,  1254,    94, 35336,
   10288, 10288,  1177,   481, -2305, 10288,  1389, -2305,  1179, 10288,
    1253,   117, 10288, 10288, 10288, 10288, 10288, 10288, 10288, 10288,
   10288, -2305, -2305, 15007,   120,  1476,  1495,  -122,   198, 33532,
    7923,  1490,  6031, -2305,   126,  1490, -2305, -2305, -2305, -2305,
     132, -2305, -2305, -2305, -2305,  1150, -2305,  1150,  1187, 35336,
     180, 30375, -2305, 10288, -2305,   606,  1184, -2305,  1454, -2305,
    1186, -2305, 25133,  1454, -2305, -2305, 13588,  1305,  1451,  1395,
   -2305, -2305, -2305,  1192, 25752, 11234, 11234, -2305,   681, 25752,
     687, -2305, -2305, -2305, -2305, -2305, -2305,   575, -2305, 35336,
      26,  1332,    91,   647, -2305,  1255,  1632,   914, 35336, -2305,
   20001,  1140,  1198, 42552, 35336,  1457,  1418,  1460,  -148, 44807,
   -2305, -2305, -2305, -2305, 35336, 35336, 43003, 43454, 27218, 35336,
   26767, -2305, -2305, -2305, -2305, 35336,    95, 35336,  4699, -2305,
   -2305, -2305,   161, -2305, -2305, -2305, -2305, -2305, 35336, 35336,
   -2305, -2305,   161, 35336, 35336,   161, -2305,  1222, 35336, 35336,
   35336, 35336,  1450, 35336, 35336,   -98,   -98,  1399, -2305,  9342,
    1204, -2305, 10288, 10288, -2305, 10288,  1370, -2305, -2305,   718,
    1414,    96,   724,   731,  1256, 35336, 35336,  1209, -2305, -2305,
   -2305, -2305, -2305,  1218,  1532, -2305,  2507,  1542, 29924,   441,
     537,  1261,  1441, -2305, -2305,  1427,    30, -2305, 26767, -2305,
      34, -2305,  1429,   172, -2305,  1445,   661,  1668, -2305, -2305,
   -2305, -2305, -2305, -2305, 17734, -2305,   737, -2305, -2305,  1669,
     293,  1669,    -2, -2305, -2305,  1669, -2305,  1669, -2305, 24685,
   -2305, 10288,  1677,  1244,  1268,  1338,  1346,  1352, -2305,  1274,
    1357,  1627, -2305, -2305, -2305, 44807, -2305,   574, -2305,   764,
   -2305, 10288, 10288,     0, -2305, 25218,   774, 10288,  1278,  1280,
     795, -2305, -2305, -2305, -2305, -2305, -2305, -2305,  1283,  1590,
   -2305,  1287,  1290,  1291, -2305, -2305,  4596, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305,  1296,  1284, 25255,  1302, 13126, 13126,  6977,  1126, -2305,
   13126,  1303, -2305,   809, 25166,  1301,  1306,  1327,  1328,  1307,
    1311, 25485,  9815, 10288,  9815,  9815, 25714,  1301,  1312, -2305,
   10288,  1317,  1319,  1320, -2305, -2305,  2856,  2856,  2856, 25866,
   -2305, -2305, -2305,  1341, -2305, 13126, 13126, -2305,  2706,  1694,
    6977, -2305, -2305,  1630, -2305,  1067, -2305,  1326, -2305, -2305,
    2221, -2305, 21362, 25790, 10288,   105, -2305, 10288,  1177, 10288,
    1407,  2856,  2856,  2856,   205,   205,   108,   108,   108,   854,
     198, -2305, -2305, -2305,  1329,  1335,  1336,  1528,   980, 10288,
   -2305,   762,   766, 35336,  3063,  3992,  4025, -2305, -2305, -2305,
   16375,  1379,  -114,  1379,  1627,    45, -2305,   515, -2305, -2305,
   -2305, 25752, -2305,  1145, 10288, -2305, -2305,   382,  1358,  1544,
    1546,   959,   959,   681,  1548, -2305, -2305,  1405, -2305, 10288,
     755, -2305,   864, -2305, -2305, -2305, -2305,  1347, -2305, -2305,
    1587, -2305, -2305, -2305, -2305, 16375,  1392, 35336,  1403,   264,
   18641, -2305,  1556, -2305, 35336, -2305, -2305,   -35,  1367,  1436,
    1054, 10288,  1574, -2305,    35,  1360,  1684,  -140,  1641, 35336,
   -2305,  1562, -2305,   589,  1689,   172,  1697,   172, 26767, 26767,
   26767, -2305, -2305,   293,   810, -2305, -2305,   442,   827, -2305,
   -2305, -2305, -2305,  1456,   480,  2507,  1054, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305,    58,   483,  1054,  1461, -2305,  1463,
   -2305,  1464,   535,  1054, -2305, -2305,  1374,  1380,  1386, 10288,
   -2305, -2305, 25752, 25752, 25752,  1372, -2305,   115, -2305, 35336,
   -2305, -2305, -2305,  1370,  1821,  1823, 35336,   661, -2305,   545,
   35336, 35336, 35336, 35336, 44807, -2305, -2305, -2305,  1388,  1391,
   -2305,   -96,  1593,  1594, 35336,  1433,  1047,  1827,  1722, 35336,
   -2305, -2305, -2305, 35336, -2305,  1723,  1145, -2305, 28120, -2305,
   -2305, -2305, -2305, 26767, -2305,   293, -2305,   293,  1612, 35336,
   23332,   293,   293, -2305,  1410,  1268,  1627,    67,     8,   -27,
    1535,  1627,  1638,  1413, -2305, -2305, -2305,   832, 25594, 10288,
   -2305,  1745, 44807, -2305,  5507, -2305, -2305, -2305, -2305, 10288,
   -2305, -2305, -2305, 10288, -2305, 21362, 10288,  1725, -2305,  1876,
    1876,  5140, 44807, 13126, 13126, 13126, 13126,   548,   963, 13126,
   13126, 13126, 13126, 13126, 13126, 13126, 13126, 13126, 14061,   291,
   -2305, -2305, 10288, 10288,  1728,  1725, -2305, -2305, -2305,   374,
     374, 44807,  1420,  1301,  1422,  1424, 10288, -2305,   216, 21821,
   -2305,  1430,   293, 10288,  1522,  3088, 10288,   833, 10288,  1732,
   -2305, -2305,  1437, -2305, -2305, 44807, 10288,  1435,  2330, 13126,
   13126,  2919, -2305,  3360, 10288,  6977, -2305,  1399,  1479, 20454,
   -2305,  1530,  1530,  1530,  1530, -2305, -2305, 35336, 35336, 35336,
   16828,  1746, 15921, 33983,  1439,  1480, -2305, 33983, 34434, -2305,
    1459, -2305,   216, 10288,  1744,  1448,  1744,  1449, -2305, -2305,
    1453, -2305,  1452, -2305,  1358,   404, -2305, -2305, -2305,  1651,
   -2305, -2305, -2305, 35336, -2305,  1439, 10288,  1597, -2305, -2305,
   -2305, -2305,  1509, -2305, -2305,   842,  1847,  1597,   850, -2305,
     216, 20001,  1392, 10288, 35336, 21840,  1784, -2305, 35336, 35336,
   35336, -2305, 35336,   867,   633,  1465, -2305,   633,  1765,   632,
    1047,   185,  4297,   -60, -2305, -2305, -2305,  1536, 35336, -2305,
   35336, -2305, -2305, -2305, -2305, -2305, -2305, -2305, 27218, 20910,
   26767, -2305, 26767, 35336, 35336, 35336, 35336, 35336, 35336, 35336,
   35336, 35336, 35336, -2305, -2305, -2305,  1399, -2305, -2305, -2305,
   -2305,  -160, -2305,   115, 10288, 10288,  1466,  1261,  1503, 43905,
     889,  2507,  1468,  1905, -2305,   441, 29924, -2305, -2305, -2305,
    1863, -2305,   410,    71, -2305, -2305,  1145, 35336,  1531,   172,
   35336, -2305,   891, -2305, -2305, -2305, -2305, 35336,  1474, -2305,
    1474, -2305, -2305,  1627,  1473, -2305,  1483, -2305, -2305, -2305,
   -2305, -2305, -2305,  1482, -2305, -2305, -2305, 10288, 25752, -2305,
    1484, -2305, 25752, 21859, -2305, 25752,  1728, -2305,   446,   446,
     446,  1148,  1789,   162,  1491,   446,   446,   446,    69,    69,
      72,    72,    72,  1876,   291, 25752, 25752, -2305, -2305, -2305,
   -2305,  1492, -2305, -2305, -2305,  1301, -2305,    45, -2305,   220,
   10288, 10288,  2706, -2305,  2940, 10288, 44807,   895,  2706,   140,
   10288,  3333,  3640, 10288, 10288,  3547, 21900,  1496, 10288, 44356,
   -2305, -2305, 35336, 35336, 35336, 35336, -2305, -2305, -2305, 33983,
   34434,  1501, 15467,  1480,  1497, 34885, -2305, -2305,  1506, 16375,
    1748,  1688, -2305, 16375,  1688,   568,  1688,  1750,  1591, 19095,
   -2305, -2305,  1507,  1702, -2305,   630, 25752,  1929,  1813,   293,
    1813,   293, -2305, 21362, -2305, -2305, -2305, -2305, -2305, 25752,
    7923, -2305,  1145,   216,   972, 35336,   -87, -2305,  1533, 35336,
   -2305,  1597, 25752, -2305, -2305, 35336,   897, -2305,   922,   633,
   -2305,  1564, -2305,   513,  1805,    76, -2305, 26767,  1673,   643,
   -2305,  1819,  1751, -2305,   161, -2305, 10288,   643,  1752,   163,
   35336, -2305, -2305,  2383, -2305, 44807,   172,   172, -2305, -2305,
    1452, 45244,   272,   947, -2305, -2305, -2305, -2305,   448, -2305,
   -2305, -2305,  1554, -2305, -2305, -2305,  1623, -2305,  1624, -2305,
   -2305, -2305, -2305, -2305,  1545,   841,    41, 25752, 25752, 35336,
    1968,  1764,  1549,  1261, -2305, 29924,   777,   135,  1594, -2305,
      88,  1433, -2305,  1915,  1588,  1753, 35336,  1553, -2305,  1989,
   -2305, 28120,  1474,  1560, -2305, -2305, -2305, 25752, -2305, -2305,
   -2305, 13126,  1860,  1561, 44807, -2305, -2305,  2706,  2706,  2940,
     924, -2305,  2706, 10288, 10288,  2706,  2706, 10288, -2305, -2305,
   21949,  1747, -2305, -2305, -2305, -2305, -2305, -2305, -2305, 27669,
   33983, -2305,  1566, -2305, 35336,  1480, 16375, -2305, -2305,  1190,
   -2305, 16375,  1820, -2305, 16375, 29022, -2305, 35336,  1569, 35336,
   -2305, 11707, 10288,  1602, -2305,  1602, -2305,  1567,  1008, -2305,
     264, -2305, -2305,  1956, 17281,  1913, 10288, -2305, -2305,   633,
   -2305,  1726,  1564,  1573, -2305, -2305, -2305, -2305, -2305, -2305,
   -2305,   930,  1576, 35336, 35336, 13126, -2305,   643,   609,    92,
   -2305,  1831, 35336,  1564, -2305, -2305, -2305, -2305,  1935,  2013,
    1906, -2305, -2305, 25752, -2305, -2305,  1627,  1627, -2305, -2305,
    1982, -2305, -2305,   448,   538, 20910, 35336, 35336, -2305, -2305,
   -2305,  -160,  1937,   961,  1145,  1911, 29924,  2024,  1589, 35336,
    1433,    66,    66, -2305,  1729, -2305,  1730, -2305, -2305,   279,
   -2305, 35336, -2305, -2305, 17281,  1145, -2305, -2305,  3982, 13126,
   44807,   978, -2305,  2706,  2706,  2706, -2305,  2010,  1399, -2305,
     984,  2030, -2305, 35336,   993, -2305, 10288,  1598, -2305, -2305,
   16375,  1190,  1599,  1003, -2305, 44807, 35336,  1005, 44807,  6504,
    1601, -2305, -2305, 25752, 25752, 35336, -2305, -2305, -2305,  1652,
   35336, 10288,  2004,    46, -2305,  1015,   -18, 25752, 35336, -2305,
   26767, -2305,   633, -2305, 26767, 10288, -2305,  1124,  1148,  2042,
   -2305, -2305, -2305, -2305,  1564,   661, -2305, -2305,  1897, -2305,
   35336,  1670,   555,  1681, -2305, -2305, -2305,   841,   293,  1261,
    1588, 35336,  1145,   441,   410, -2305, -2305, -2305, -2305, -2305,
   -2305, -2305, -2305, -2305, -2305, -2305, -2305, -2305,  2017,  1817,
    2026,  1531,  1016,  3982,  1032, -2305, 10288,    63,  1459, 27669,
    1620, -2305,  1069, -2305, 25752, 35336, -2305, -2305, 10288, -2305,
   35336,  1982,  1078, -2305, -2305, 11707,  1621, -2305,  2059,  1145,
   -2305, 21968, 35336, 35336, 35336,  1379, 17281, -2305,  1743,   661,
     633,  1640,  1085, -2305, -2305, 22320,  1838, -2305,  1920, -2305,
    1867,  1635, -2305, 10288, -2305,  1705, -2305, -2305, -2305,  2072,
   -2305,  1643,  1588,  1594,  1433,  1836, -2305,  1839,  1644,  1261,
   -2305,  1301, 12180, 12180,  1639, -2305, -2305, 35336, -2305,  1095,
    1096, -2305, -2305, -2305, -2305, 35336,  1646, -2305,  2004, -2305,
   -2305,   217,   217, -2305, -2305, 20001,  1867, 20910, -2305, 26767,
    1865,  1635,   476,  1850,  2507, -2305, 25752, -2305,  1145, 29924,
   -2305, -2305, -2305, -2305, -2305, 17281,  1379, 14534,  1782,    39,
   25185, -2305, -2305, -2305, -2305,  1097, -2305,  1797, -2305, -2305,
   35336,  1358,  1358,  -135,  1850, -2305, -2305,  1928, -2305, -2305,
   -2305, -2305, -2305,    87,  1853, -2305,  1854,  1174,  1588,  1102,
   -2305,  2092, -2305, -2305, -2305, -2305, -2305, -2305,  1655, -2305,
     217, -2305, -2305, -2305, -2305, -2305,   553,   553,  2009, -2305,
    1715, -2305, -2305, -2305,  1261, 12653, 10288,  1358,   633, -2305,
    2107, -2305,   110, -2305, -2305,  1379, -2305, 22369, -2305, -2305,
   -2305, -2305, -2305, -2305
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1048,   744,     0,   149,   148,   744,     0,  1131,   744,  1110,
     878,     0,   725,     0,   744,     0,  1048,     0,     0,     0,
       0,     0,     0,   744,   203,     0,   724,   744,     0,    66,
       0,     0,     0,     0,     0,     2,     4,    26,    14,     5,
      33,    15,    13,    27,     9,     6,    29,    21,   131,    30,
     170,   157,   205,   169,  1047,   173,    36,     0,    18,    31,
      32,    17,    16,    35,    19,    24,    12,    34,    28,    22,
      23,     8,     7,    20,    25,     0,    37,    11,    10,   743,
     742,   736,     0,     0,     0,     0,     0,   737,   698,  1132,
    1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1467,  1148,  1149,  1150,  1419,
    1420,  1468,  1421,  1422,  1151,  1152,  1153,  1154,  1155,  1156,
    1157,  1158,  1423,  1424,  1159,  1160,  1161,  1162,  1163,  1425,
    1469,  1164,  1165,  1166,  1167,  1168,  1470,  1169,  1170,  1171,
    1172,  1173,  1174,  1175,  1176,  1177,  1471,  1178,  1179,  1180,
    1472,  1181,  1182,  1183,  1184,  1185,  1186,  1426,  1427,  1187,
    1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,
    1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,
    1208,  1209,  1210,  1211,  1212,  1213,  1214,  1428,  1215,  1216,
    1217,  1218,  1429,  1219,  1220,  1221,  1430,  1222,  1223,  1224,
    1473,  1474,  1225,  1226,  1227,  1475,  1228,  1229,  1431,  1230,
    1231,  1232,  1233,  1234,  1235,  1476,  1236,  1237,  1238,  1239,
    1240,  1241,  1242,  1243,  1244,  1245,  1246,  1477,  1432,  1247,
    1248,  1249,  1250,  1433,  1434,  1435,  1251,  1478,  1479,  1252,
    1480,  1253,  1254,  1255,  1256,  1257,  1258,  1481,  1259,  1482,
    1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  1269,
    1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,
    1436,  1483,  1437,  1280,  1281,  1282,  1438,  1283,  1284,  1484,
    1285,  1439,  1286,  1440,  1287,  1288,  1289,  1290,  1291,  1292,
    1293,  1294,  1295,  1441,  1485,  1296,  1486,  1442,  1297,  1298,
    1299,  1300,  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1443,
    1308,  1309,  1444,  1310,  1311,  1312,  1313,  1314,  1315,  1316,
    1317,  1318,  1319,  1320,  1321,  1445,  1322,  1323,  1324,  1325,
    1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,
    1336,  1337,  1338,  1339,  1487,  1340,  1341,  1342,  1446,  1343,
    1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1355,  1356,  1357,  1447,  1358,  1359,  1360,  1488,  1361,
    1362,  1448,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,
    1371,  1372,  1373,  1374,  1375,  1449,  1376,  1377,  1378,  1489,
    1379,  1380,  1381,  1382,  1383,  1450,  1451,  1384,  1385,  1452,
    1386,  1453,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
    1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1454,
    1455,  1404,  1490,  1405,  1406,  1407,  1408,  1409,  1410,  1411,
    1412,  1413,  1414,  1415,  1456,  1457,  1458,  1459,  1460,  1461,
    1462,  1463,  1464,  1465,  1466,  1416,  1417,  1418,    80,     0,
       0,   680,   699,   700,   705,   739,  1109,  1048,     0,     0,
       0,     0,     0,     0,     0,   872,   871,   948,   877,     0,
       0,   698,   748,  1310,   746,   678,   699,     0,   915,   916,
       0,   924,     0,   913,     0,   934,   926,   935,   927,   910,
     928,   917,   909,     0,   936,   911,     0,     0,     0,   740,
    1035,   878,  1048,     0,   126,   131,   135,   138,   137,   139,
     136,     0,     0,   697,    39,    40,    77,   964,   958,  1450,
    1384,   726,   957,   959,   956,   741,   202,   200,     0,   665,
    1262,  1346,  1356,  1450,     0,   881,   884,   738,     0,   174,
     305,   674,    65,     0,    70,     0,  1324,   178,   181,   711,
     179,   170,     0,     0,     1,  1048,   130,   971,   199,   199,
       0,   199,     0,   162,   170,   165,   169,     0,   723,  1450,
    1384,   720,     0,     0,     0,  1235,     0,     0,  1235,     0,
    1235,     0,  1235,     0,     0,   657,     0,   658,   681,   965,
     968,   967,     0,   966,   845,     0,   876,   875,   874,   873,
       0,   878,  1235,    44,     0,     0,     0,     0,   943,   749,
     747,   922,   923,     0,   914,   912,     0,  1235,   706,   929,
     933,  1235,   933,   676,  1235,     0,     0,  1031,     0,   128,
     140,  1454,   155,     0,   156,   146,   134,   141,   142,   143,
    1048,  1108,   970,     0,     0,     0,     0,   960,     0,     0,
       0,   683,   685,   686,   591,   696,   660,  1420,  1421,  1422,
     649,     0,  1423,  1424,  1425,  1469,   530,   517,   526,   531,
     518,   520,   527,  1426,  1427,   471,  1202,  1428,  1429,   694,
    1430,  1433,  1434,  1435,   522,   524,  1436,  1437,     0,   695,
    1439,  1440,  1292,  1442,  1443,  1445,  1446,   528,  1448,  1449,
    1450,  1451,  1452,  1453,   693,   529,  1455,     0,     0,     0,
     671,     0,   660,   502,     0,   344,   345,   367,   368,   346,
     373,   374,   376,   347,     0,   670,   409,   545,   501,   513,
       0,     0,   500,   495,   185,   666,     0,   496,   682,   684,
     650,   185,   664,   882,   887,   883,     0,     0,     0,     0,
       0,   307,   306,   675,    64,    62,    63,    61,    67,     0,
      60,    69,   131,   605,     0,   180,     0,     0,     0,   160,
     159,     3,   711,   197,   198,     0,     0,     0,     0,     0,
       0,     0,     0,   253,   219,   220,   222,   250,   254,   262,
       0,   166,     0,   721,     0,     0,     0,   729,     0,     0,
       0,   125,   125,     0,     0,     0,     0,     0,  1026,   975,
    1019,     0,     0,     0,     0,    94,   107,     0,     0,     0,
       0,     0,   104,     0,     0,    87,    81,    83,   977,     0,
     125,     0,   973,     0,     0,     0,   979,     0,     0,     0,
       0,   505,   609,   205,   607,   680,     0,   656,     0,   713,
    1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,  1499,  1500,
    1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,
    1511,  1512,  1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,
    1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,
    1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,
    1541,  1542,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,
    1551,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1565,  1566,  1567,   653,   652,   679,
     714,   715,   716,   717,   659,     0,     0,  1106,     0,     0,
       0,     0,    41,     0,  1235,    74,  1235,   845,     0,   845,
     942,   945,   925,   921,   919,   918,   920,     0,     0,   707,
     931,   932,     0,   904,     0,     0,   906,     0,     0,     0,
       0,  1048,     0,    88,   151,   152,   150,     0,     0,   133,
      91,   154,   144,   153,   132,   108,   145,   127,     0,   969,
    1097,   893,   892,   901,    78,     0,   703,   355,   384,   362,
     384,   384,   351,   351,   364,   352,   353,   389,     0,   384,
     351,   356,     0,   354,   392,   392,   379,   612,   336,   337,
     338,   339,   365,   366,   340,   371,   372,   341,   406,     0,
     351,   704,  1048,   961,   727,     0,   498,   383,   370,   648,
       0,     0,   378,   377,     0,     0,     0,     0,     0,   360,
     359,   358,   504,   615,     0,   357,     0,     0,   384,   384,
     382,   432,     0,   361,     0,     0,   628,     0,   634,     0,
       0,     0,   388,     0,   386,     0,     0,   433,   413,   414,
     502,   605,     0,   497,   503,   689,     0,     0,   406,   669,
     591,     0,   588,   589,   590,     0,     0,     0,   663,     0,
     599,   601,     0,     0,   448,   597,     0,   451,     0,     0,
       0,     0,   585,   586,   587,   579,   580,   581,   582,   583,
     584,   595,   578,   429,     0,     0,   547,     0,   428,     0,
       0,   269,     0,   687,   651,   269,   895,   899,   900,   898,
       0,   894,   886,   885,   890,   888,   891,   889,     0,    58,
       0,    55,   266,     0,   182,     0,     0,   972,   177,   176,
     206,   207,   213,   175,   239,   240,     0,     0,     0,     0,
     259,   257,   230,   223,   229,     0,     0,   227,     0,   231,
     409,   252,   164,   217,   218,   221,   163,     0,   255,     0,
     265,   253,   222,     0,   722,   735,  1042,     0,     0,   730,
       0,     0,     0,     0,     0,     0,  1235,     0,     0,     0,
    1010,   991,   797,   124,     0,     0,     0,     0,     0,     0,
       0,  1018,  1015,  1016,  1017,     0,     0,     0,     0,    92,
      93,   106,     0,    97,    98,    95,    99,   100,     0,     0,
      85,    86,     0,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,     0,   205,   205,   205,   511,     0,
       0,   204,     0,     0,   654,   657,  1096,   843,   853,     0,
       0,     0,     0,     0,     0,     0,     0,   878,    43,    47,
      45,    46,    48,     0,     0,    71,    73,     0,   842,   816,
       0,   947,  1235,   833,   944,     0,   933,   708,     0,   930,
     933,   677,     0,   933,  1034,  1235,   845,     0,   129,   147,
      89,   109,    90,   110,  1103,  1129,     0,  1111,  1116,  1094,
       0,  1094,     0,  1113,  1117,  1094,  1112,  1094,  1107,     0,
      79,     0,   336,   332,   328,   395,   396,   397,   394,   407,
     393,     0,   342,   398,   963,     0,   348,   351,   962,     0,
     661,     0,     0,   647,   643,     0,     0,     0,     0,     0,
       0,   616,   619,   620,   621,   618,   622,   617,     0,     0,
     623,     0,     0,     0,   381,   380,     0,   577,   588,   589,
     590,   585,   586,   587,   579,   580,   581,   582,   583,   584,
     603,     0,     0,     0,     0,     0,     0,     0,     0,   472,
       0,     0,   572,     0,   605,   633,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   605,   639,     0,   660,
       0,     0,     0,     0,   690,   410,   424,   425,   426,   430,
     719,   718,   668,     0,   662,     0,     0,   411,   434,   439,
       0,   640,   467,     0,   455,     0,   447,     0,   453,   457,
     435,   450,     0,   431,     0,   663,   600,   602,     0,   598,
       0,   421,   422,   423,   415,   416,   417,   418,   419,   420,
     427,   576,   574,   575,     0,     0,     0,   555,     0,     0,
     452,  1228,  1262,     0,   196,   196,   196,   184,   194,   667,
       0,   322,   205,   322,     0,   406,   308,   711,    68,    56,
      57,   606,   710,  1048,     0,   211,   212,     0,   216,  1446,
    1343,     0,     0,     0,     0,   232,   260,     0,   251,     0,
     683,   233,   682,   234,   237,   238,   228,   261,   672,   263,
       0,   256,   168,   167,   267,     0,   733,     0,     0,     0,
       0,  1037,  1054,   731,     0,   660,  1070,   269,     0,     0,
     976,     0,  1235,   993,     0,     0,     0,     0,     0,     0,
     752,   788,   752,  1030,  1235,   933,  1235,   933,  1136,  1203,
    1357,   821,  1022,     0,     0,   989,   118,   850,     0,   806,
    1012,  1027,   111,     0,     0,    82,   978,    96,   101,   114,
     105,   102,    51,   103,   125,     0,   974,     0,   112,     0,
      49,     0,     0,   980,   116,    53,     0,     0,     0,     0,
     608,   506,   610,   611,   656,     0,  1095,     0,   844,     0,
    1105,  1085,  1086,  1096,     0,     0,     0,   845,    44,     0,
       0,     0,     0,     0,   843,   836,   834,   864,     0,   841,
     835,     0,     0,   792,     0,   954,     0,     0,     0,     0,
     903,   709,   905,     0,   907,     0,     0,  1101,     0,  1100,
    1099,  1104,  1098,     0,  1093,     0,  1124,     0,     0,     0,
       0,     0,     0,   902,   333,   329,     0,     0,     0,     0,
       0,     0,     0,     0,   613,   349,   201,     0,     0,     0,
     644,     0,     0,   543,     0,   519,   521,   350,   533,     0,
     363,   523,   525,     0,   592,     0,     0,     0,   534,   474,
     475,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   490,   489,
     535,   571,     0,     0,   631,   632,   536,   391,   390,   392,
     392,     0,     0,   638,     0,     0,     0,   541,   499,   606,
     375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     456,   449,     0,   454,   458,     0,     0,     0,   443,     0,
       0,   441,   468,   437,     0,     0,   469,     0,     0,     0,
     512,   196,   196,   196,   196,   193,   195,     0,     0,     0,
       0,  1343,     0,   291,   268,   270,   278,   291,   296,   514,
     320,   515,   674,     0,   242,     0,   242,     0,   896,    59,
       0,   208,     0,   593,   216,     0,   210,   236,   235,     0,
     226,   258,   224,     0,   264,   734,     0,  1059,  1043,  1041,
    1061,  1060,     0,   660,  1068,     0,     0,  1059,     0,  1062,
    1074,     0,   733,     0,     0,     0,     0,   796,     0,     0,
       0,   752,     0,     0,   860,     0,   847,  1011,     0,     0,
       0,   985,     0,  1003,   995,   981,  1009,     0,     0,  1014,
       0,  1007,  1024,  1025,  1023,   762,   780,  1028,     0,     0,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   509,   510,   507,   205,   655,  1127,  1128,
    1126,    87,   854,     0,     0,     0,     0,   947,    42,     0,
       0,    74,   845,     0,   820,   816,     0,   814,   813,   815,
       0,   955,  1035,     0,   950,   946,     0,     0,   941,   933,
       0,  1125,     0,  1089,  1130,  1114,  1119,     0,  1123,  1121,
    1120,  1115,  1118,     0,     0,   334,     0,   400,   401,   402,
     403,   404,   405,     0,   399,   343,   369,     0,   646,   642,
       0,   516,   614,     0,   604,   626,   625,   473,   485,   486,
     487,   627,     0,     0,     0,   482,   483,   484,   476,   477,
     478,   479,   480,   481,   488,   636,   635,   629,   630,   387,
     385,     0,   538,   539,   540,   637,   573,   406,   691,   412,
       0,     0,   440,   641,   459,     0,     0,     0,   436,   592,
       0,     0,     0,     0,     0,   445,     0,     0,     0,   558,
     553,   554,     0,     0,     0,     0,   187,   186,   192,   291,
     296,     0,   170,     0,   278,     0,   290,   276,   289,     0,
       0,   302,   300,     0,   302,     0,   302,     0,   272,     0,
     292,   274,   289,     0,   312,   675,   321,     0,   249,   506,
     249,     0,   183,     0,   209,   214,   215,   225,   673,   732,
       0,   728,     0,  1049,     0,     0,  1046,  1036,     0,     0,
    1071,  1059,  1050,   119,   752,     0,     0,   992,     0,   862,
     808,   840,   823,     0,     0,     0,   753,     0,   828,     0,
     984,  1004,     0,  1000,     0,  1029,     0,     0,     0,     0,
       0,   987,   999,     0,   982,     0,   933,   933,   990,   759,
    1292,     0,   579,   580,   757,   855,   756,   758,   351,   849,
     754,   755,   852,   807,   115,    52,     0,   113,     0,    50,
     122,   120,   117,    54,     0,  1108,  1088,    75,    76,     0,
       0,  1235,     0,   947,    72,   842,     0,   870,   792,   865,
       0,   954,   952,     0,  1082,     0,     0,     0,   908,     0,
    1102,     0,  1122,     0,   330,   335,   408,   645,   532,   542,
     624,     0,     0,     0,     0,   537,   692,   465,   463,   460,
       0,   461,   444,     0,     0,   442,   438,     0,   470,   544,
       0,   560,   557,   191,   190,   189,   188,   277,   275,     0,
     280,   702,   701,   287,     0,   271,     0,   301,   297,     0,
     298,     0,     0,   299,     0,     0,   273,     0,   701,     0,
     319,     0,     0,   549,   688,   549,   897,     0,  1058,  1038,
       0,  1039,  1069,     0,     0,     0,     0,  1063,   745,   858,
     994,     0,   840,     0,   752,   825,   824,   827,   822,   826,
     829,     0,     0,     0,     0,     0,   809,     0,     0,     0,
     773,     0,     0,   840,   846,   769,   770,   879,     0,     0,
       0,   996,   986,   983,   988,   997,     0,     0,   998,  1001,
     327,  1013,  1006,   351,   351,     0,     0,     0,   508,  1084,
    1091,    87,     0,     0,     0,     0,   842,     0,     0,     0,
     954,     0,     0,   750,     0,   789,     0,  1032,   953,     0,
    1075,     0,   939,   940,     0,     0,  1090,   331,   491,     0,
       0,     0,   462,   466,   464,   446,   546,     0,   205,   315,
       0,   318,   279,     0,     0,   281,     0,     0,   283,   285,
       0,     0,     0,     0,   323,     0,     0,     0,   678,     0,
     241,   243,   246,   245,   248,     0,   172,   171,   594,     0,
       0,     0,  1065,  1065,  1072,     0,     0,  1051,     0,   752,
       0,   839,   859,   787,     0,     0,   771,     0,   777,     0,
     811,   812,   810,   772,   840,   845,   774,   880,     0,  1005,
       0,  1021,   351,     0,   851,   123,   121,  1108,     0,   947,
    1082,     0,     0,   816,  1035,   951,   805,   798,   799,   800,
     801,   802,   803,   804,   819,   818,   790,   791,     0,     0,
       0,   941,     0,   492,     0,   493,     0,   563,   320,     0,
       0,   314,     0,   288,   304,     0,   284,   282,     0,   293,
       0,   327,     0,   295,   247,     0,   548,   550,     0,     0,
    1045,     0,     0,  1067,  1067,   322,     0,  1053,     0,   845,
     861,   838,     0,   831,   830,     0,     0,   768,     0,   775,
     869,   761,   326,     0,  1008,     0,   856,  1083,  1087,     0,
    1076,     0,  1082,   792,   954,     0,  1079,     0,     0,   947,
     494,   559,     0,     0,     0,   313,   316,     0,   286,     0,
       0,   324,   325,   294,   244,     0,     0,  1040,  1065,  1064,
    1066,   213,   213,  1044,  1073,     0,   869,     0,   817,     0,
     795,   761,     0,   786,     0,  1002,  1020,   857,     0,   842,
    1077,   751,  1033,  1080,  1081,     0,   322,  1419,  1180,  1391,
       0,   561,   564,   562,   556,     0,   303,   311,   551,   552,
    1067,   216,   216,   322,   786,   837,   832,     0,   776,   778,
     866,   867,   868,     0,   782,   779,   783,     0,  1082,     0,
     937,     0,   568,   567,   566,   570,   569,   317,     0,   309,
     213,  1056,  1055,  1052,   752,   794,     0,     0,     0,   784,
       0,   785,   760,  1078,   947,     0,     0,   216,   863,   765,
       0,   764,     0,   848,   781,   322,   565,     0,  1057,   763,
     767,   766,   938,   310
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2305, -2305, -2305,  1575, -2305, -2305, -2305,   501, -2305, -2305,
   -2305,   982, -2305, -2305, -2305,  -916,   223, -2305, -2305, -2305,
   -2305,  -578,  -786,  -633,  -798, -2305,    31, -2305,  -756, -2305,
    -342, -2305,  -423,  -426, -2305, -2305,    27,  -621,  1163, -2305,
       7,   456,   -22,     6,    28,    17,    36,  1371,  1397, -2305,
    -806,   660, -2305, -2305,  -546,   -44, -2305,   635, -2272, -1770,
    -395,   944,  1356,  1359, -2305,   623,   979, -1066, -1073, -2305,
     341, -2305,  -309, -2305,   101,  -388,   960, -2305,  1362, -2305,
   -2305, -2305, -2305, -1042,   615, -1723,   372, -1699, -1638,   136,
     125,  -853,  -184,    29, -2305, -2305,   379,  -268, -2305, -2305,
    -265, -1470, -2088,  -271,  -270, -1018,   848,  -804, -2305, -2305,
    -660,   252, -2305, -2305, -2305,  1383,  1417, -2305, -2305,  1559,
    1568, -2305,   215,  1849,  -383,  -689, -1048, -1151,  3274, -1310,
    -540,    18, -2305, -1394, -1426, -2305, -2305,   -53, -2305,  -329,
   -2305,  -327, -2305, -2305, -2305,  -313, -2304,  1065, -2305, -1027,
   -2305,  3480,   686, -2305, -1396,  -479,  -583,  -780, -1694, -2305,
   -2305, -2305, -2305, -2305, -2305,  -865, -1542,  -400,   740, -2305,
   -2305,   847, -2305, -2305, -2305,  -541,   929,  -512,  -678,   746,
   -2305,  -524,  1075, -2305,  1547,  -495,   958,  -864,    12, -2305,
    2188,    13,  1818, -2305,  1881,  -492, -1008,  -727, -2305,  -580,
   -2305, -2305, -2305,   234,    16,  1400,   378, -2305, -2305,  1235,
      20, -2305,  -912, -1526, -2069,  -317, -2305,  -381, -2305,  -165,
   -1520,  -353,  -340, -2305, -2042,  -778, -2305,  1444,   -77, -2305,
     684, -2305, -1861, -2305, -2305,   680, -2305,  -775, -2305, -2305,
   -1633,   334,  -278, -2066, -2055,   634,  -584, -2305,  -322,   373,
   -1501, -2305,   700, -2305,  -269, -2305,  -452, -1914, -2305,   693,
   -2305,   931, -2305,   522, -2305, -2305, -2305,  1308,  -581, -2305,
    -907, -2305,  -168, -2305, -2305, -1854, -2305,    51, -2050,  -928,
   -2305, -2305, -2305, -2305, -2305,  -962, -2305, -2305,  1113, -2305,
   -2305, -2305,   407, -2305,  1041, -2305,   393,  -516,   709, -2305,
   -2305, -1850,    21, -2305, -2305, -2305, -2305,   200,   432, -2305,
    -192, -1659,    44, -2305, -2133, -2228, -2305,  -247, -2149, -1489,
    -904, -2151, -2305, -2305, -2305, -2305, -2305,  -384,   656, -2006,
   -2305,   618, -2305, -2305, -2305, -2305,   114,   383, -2305, -2305,
      -6,  -441,  -282, -1827
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    34,    35,    36,    37,   514,    38,   942,  1278,    39,
      40,   758,   544,   759,   762,    41,  1285,    42,    43,    44,
      45,  1286,  1242,   991,   827,  1232,   980,    46,  1215,    47,
     557,   981,   504,   982,   983,   633,    48,   992,   635,   636,
     506,   713,    51,    52,    53,   553,   547,   548,  1131,  1487,
    1787,   775,   528,   529,   562,  1261,  1160,  1161,  1508,  1816,
    1185,  1186,   784,   785,  1173,  1177,  1178,  1521,  1514,  1166,
    2058,  2360,  2361,  2362,  2233,  1181,  1182,   787,   788,   789,
    1190,  1531,    55,  1491,  1794,  1795,  1796,  2036,  2037,  2051,
    2047,  2218,  2348,  1797,  2226,  2589,  1798,  2339,  2340,  2441,
    2054,  1804,  2353,  2354,  2401,  1017,  1334,  1018,   714,  1019,
    1346,   715,  1055,  1021,   716,   717,   718,  1024,   719,   720,
     721,   722,  1038,   723,   724,  1072,  1342,  1343,   763,  1398,
     726,   727,   728,  1800,   729,  1126,  1477,  2366,  2456,  2457,
    1780,  2020,  2201,  2338,  2504,  2551,  2552,   730,  1474,  1121,
    1122,   731,  2126,  1124,  1391,  1417,   843,   844,  1029,  1368,
    1369,  1394,  1707,  1401,  1406,  1734,  1735,  1418,  1442,   732,
    1353,  1354,  1691,  1040,   733,   587,   848,   588,  1036,  1436,
     741,   734,   735,  1527,   540,  2344,   623,   928,   736,   737,
     738,   739,   740,  2213,   451,  2520,   959,   768,   846,  1571,
    1432,    56,    57,   534,   507,   798,  1827,  1536,    59,    81,
     508,    61,    62,  1854,  2129,  2535,  1876,  2613,  2274,  2275,
    1572,  2574,  2575,  1856,  1921,  1224,  2568,  1635,  2424,  1578,
    1560,  2276,  1643,  2381,  2157,  1573,  2096,  1636,  2261,  2472,
    1294,  1637,  2473,  2254,  1638,  1268,  1289,  2098,  2576,  1579,
    1269,  2130,  1212,  1639,  2533,  1640,   469,  2279,    63,   535,
     536,   993,  1142,   994,    64,   496,   497,   620,   963,   498,
      65,  2323,  2167,   951,  1295,  1647,   470,   509,  1924,   948,
      67,   523,   524,    68,   646,   592,    69,    70,    71,    72,
    1863,  1864,  1865,  1574,   808,  2484,  1575,   809,   810,  1867,
      73,   627,   510,  1542,  1197,  2245,    75,  1834,  1546,  1837,
    2374,  2071,  1832,  1838,  2463,  2521,  1835,  1547,  2375,  1548,
      76,  2320,    77,  1623,  2301,  1932,  2302,  1665,  1617,   989,
    1661,  1315,  1271,   990,   458,  1328,  1933,  1901,  1316,    78,
     476,   453,   454,   933
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     452,   826,   622,   979,   619,   742,   929,    49,   563,  1229,
     937,   552,  1074,  1049,  1050,   984,    58,    54,   449,   790,
      60,    74,  1347,  1806,   448,  1211,  1279,  1221,  1246,   753,
    1280,  1063,   515,    54,  1083,  1281,  1857,  1390,  1282,  1245,
    1424,   966,  1307,   505,  2064,  1157,  1217,   934,  1872,   628,
    1874,    66,  2131,  2150,  2158,  1839,  1767,   539,  1853,  1257,
     565,   995,   638,   828,  1801,   832,   764,   836,   550,  2033,
    1348,  2007,  2161,  1425,  1250,  -351,   655,   632,   542,   629,
    1712,   456,   566,  1712,   655,  1709,  1710,   960,  -703,  -384,
    1729,   960,  2416,  1493,  1297,  -704,  -703,  -703, -1472,  2050,
    2308,  1202,  -364,  -704,  -704,  1526, -1472, -1472,  -389,  1801,
    1523,  2317,  -158,  1139,   581,  -577,  2313,   800,  2462,  1091,
     513,  -379,  -577,   801,  -161,  1754,  1755,   513,  1213,  1910,
    1490,  -681,  1213,  1434,  1689,   513,  -392,   513,  1248,  2299,
    1129,  2357,  1885,  2417,  1434,   931,  1471,   969,  1097,   940,
    1335,  2418,  1335,  1472,  -392,   572,  1136,   973,   513,  2048,
   -1092,   560,   655,   640,  1455,   973,  -596,   783,  1938,  1940,
     655,  1917,   655,  -596,   786,  2432,  2162,   560,  2077,  2419,
    1099,  1230,  2243,   754,  1233,  1234,  2379,   953,  1947,   -87,
    2258,  1561,  1987,  2284,   -87,   638,  1222,  1205,  2583,  1274,
    1222,  1084,   638,  -158,  2596,  2314,  2392,  2396,  1332,  1091,
       3,     4,   934,  1950,  1478,  -161,  1091,   987,   526,  2090,
    2315,   639,  2620,  1336,  1167,  1336,  2404,   802,  1134,   960,
     954,  1091,  1082,   773,   613,  1164,  2522,  2467,  1097,   573,
    2464,   779,  1180,  2581,   511,  1097,   779,  2420,  1948,  2561,
    2562,   558,  1668,  1505,  1255,  1256,   522,  1669,  2421,  2490,
    2415,  1621,  1028,  1168,  -205,  1137,  1558,  1861,  2452,  -205,
    1099,   643,  1155,  1240,  1558,   971,  1310,  1099,   972,  2311,
    1213,   655,   644,  1337,  1529,  1337,  1338,  1456,  1338,  2182,
    1214,   571,  1099,  2113,  2165,  1803,  1241,  1260,   513,  2307,
    1457,  2616,  1712,  1244,   932,  1458,  1670,   638,   638,  1964,
     781,  1275,  2190,  1193,   559,   781,  2215,  1339,  2607,   527,
    2219,  1169,  1559,  2163,  2312,  2089,  1074,  1684,  2479,  1165,
    1850,  2050,  2590,  -205,   774,  2584,  1207,  2428,  1506,  1841,
    1459,  2540,  1049,  1050,   755,  2429,   756,  2086,  1479,  2088,
    1063,  2393,  1339,  2389,   639,  1272,  1273,   782,   961,  1007,
    1259,   639,   961,  1140,  1801,  1291,  1801,  1170,   803,  2621,
       3,     4,  2502,  1223,  1220,  -205,  1331,  1223,   929,   512,
    1138,  -158,   543,  2244,   560,  2560,  1530,  1339,  2316,  1339,
    1377,  2207,   955,  -161,  2468,  1191,  2579,  1378,  1379,  1380,
    2503,  2487,  1192,  1968,  1969,  1970,  1971,  1130,  1314,  1975,
    1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  2555,
    1151,   805,  2248,  1171,  2180,  1390,  2183,  2603,  1553,  1352,
    1028,   501,   747,  1220,  1651,  2422,  2172,  1220,  2423,  1841,
    1819,  -158,  1208,   501,  2542,  1249,  1523,  1808,   806,  1886,
     574,  2541,  -577,  -161,   654,  2300,    50,  1712,  2565,  2011,
    2012, -1473, -1473, -1473,   589,   619,   639,   639,  2131,  1300,
    1299,  1435,    50,   590,    54,  1460,  1303,   591,   593,  1610,
    1813,   552,  1769,  1473,  2308,  1898,  1899,  1622,  1246,   551,
    2331,   956,  2259,  2345,  1340,  1350,  1340,   637,  2349,  2597,
     961,  2351,   457,  -596,   962,  1842,  2430,  1037,   965,   614,
     564,  2342,   807,  1341,   585,   561,  1431,   931,   586,    54,
     545,   791,   452,   452,   641,   642,  1399,  1949,  1951,  1952,
     634,   638,  1724,  1725,  1726,  1727,  1945,  1222,  1727,   452,
    1048,  1810,  1350,   934,   744,  -158,   632,   931,  1308,  1492,
    1422,  1610,  2493,  -703,  -384,  2489,  1349,  -161,  2249,   565,
    -704,  2065,    49, -1472,  2494,  1356,  1069,  1054,  1084,  1360,
     760,    58,    54,  -389,  1120,    60,    74,  2260,   452,   452,
     930,   566,   765,  -158,  1069,  -158,  -379,  1070,  1403,  1405,
    2247,   554,  1087,   934,   585,  -161,  -681,  -161,   586,  1587,
    1132,  1071,  1494,   797,   757,  1070,    66,  1437,  1443,  1590,
    2609,  1858,  1593,  1801,   977,   978,  1561,  1801,  1240,  1073,
     452,  2066,   977,   978,  2286,  2287,  1515,  2446,  2255,  1028,
     637,   596,  1235,   597,  1444,   556,  2434,   637,   452,  1031,
    1577,  1241,  2570,  1830,  1251,  2546,   -87,   -87,  2303,   986,
    1585,   555,    79,  1812,   452,   931,   986,    54,   748,  1115,
    1116,  1117,  1118,  1119,  1120,  1058,  1059,  2237,  1117,  1118,
    1119,  1120,  2277,   567,  1960,  1972,   932,  1831,  1390,  1788,
    1789,  1659,   452,  1644,   585,  1550,    24,  1685,   586,   552,
     639,   584,  1222,  1660,  1967,    80,  2278,  2256,    24,   601,
    2131,   452,   452,   452,  1913,   452,   932,   608,  1028,  1606,
    1607,  1608,  1586,  1222,  1223,  1650,  1222,  1718,   929,  1652,
      28,  1859,  1654,  1991,  2390,   452,   749,  1085,  2382,  -712,
    -712,  1596,    28,   611,  2041,  1445,  1603,  1088,  1213,   649,
    1446,  1748,   637,   637,  2100,  1447,  1588,  2092,  1216,  1133,
    2615,  1591,  1722,  1723,  1724,  1725,  1726,  1727,   558,  1141,
      30,   986,   986,  2571,   502,  2042,  1236,   612,  1222,  1237,
    1809,   452,    30,    31,  1220,   452,   452,   931,   616,   931,
    2221,  1158,  1159,  1801,  1163,    31,   452,  1246,  1167,  2044,
    1801,  2591,  2592,  2391,  1149,  1801,    32,  1150,  1801,  1254,
    1262,  1263,  1973,   566,   566,  2610,   566,  1031,    32,  1069,
     503,   615,  1974,  2101,   932,  2341,   604,  1361,  1801,   513,
    1884,   559,    33,  1888,   797,  1629,  1028,  1168,  2093,  1896,
    1070,   452,   452,   452,   598,  2572,   599,  2618,  1887,  1381,
    1382,  1383,  1966,  1384,  1385,  1386,  1387,  1388,  1389,   605,
    2372,  1152,  1813,  2470,  1153,  1399,  1399,   931,  1247,   604,
    1399,  2125,   803,  1918,  2474,  1091,   460,  1840,  1925,  1223,
    1988,  2328,  1687,   638,  1641,  1892,  1642,  1042,  1043,  1448,
     626,  2611,   606,    24,   645,  2094,  2102,  2095,   638,  1449,
    1223,   560,   605,  1223,  1097,  1399,  1399,  1020,  1801,   648,
    2046,  1879,  1060, -1473, -1473, -1473,  2612,  1722,  1723,  1724,
    1725,  1726,  1727,    50,  1880,  1860,  1861,    28,  1048,  1069,
     958,  1362,   461,  2309,  1801,  1909,  1099,   647,   607,  1220,
    2372,  1170,   452,   452,  1743,   649,   932,  1667,   932,  1069,
    1070,  1671,  1862,  1672,   650,  1223,  1805,    24,   746,  2186,
    1220,  1312,   930,  1220,  1071,  2388,   655,    30,    50,   551,
    1070,  1757,  1028,  1817,  1304,   761,   637,  1153,   655,   474,
      31,   607,   752,   500,  1073,  2022,  2023,  2024,  2025,   517,
     766,    28,   930,    82,  1869,   767,  1871,  1171,    54,   549,
     549,   800,  1279,    32,  1363,  2523,  1280,   801,   769,   634,
    1082,  1281,  2169,  2403,  1282,  1220,  1031,    33,  1048,   564,
    1298,    50,  1742,  1801,  1744,  1745,   932,  1524,  1525,  2433,
    2485,    30,   561,  -232,  -232,  1048,  1538,  1298,   800,   452,
    1330,   770,   639,  1331,   801,   452,  1390,  1931,   452,   589,
    1801,   577,   452,  1907,  1048,  2341,  1298,   639,   590,    54,
    1989,  1990,   591,   593,  1364,  1344,   452,  1365,  1345,   452,
     452,   452,   452,   777,  2111,  1020,  1370,   792,  2608,   452,
     452,    33,  2372,   793,  2087,  2104,  2580,  1502,   795,   465,
     965,   466,  2103,  1314,  2112,  1031,   452,   452,   452,   452,
     930,  -236,  -236,  2593,   452,   452,    50,  2290,   585,   452,
    -681,   802,   586,   452,   794,   468,   452,   452,   452,   452,
     452,   452,   452,   452,   452,  2145,   800,   452,  1534,  1801,
    2294,  1153,   801,    24,   452,   796,   452,   931,   931,   931,
     779,   936,    83,  1052,   654,   780,   935,  1712,   802,    84,
     811,  1713,  1714,  1715,  -204,  2622,  1781,   452,  1782,  -204,
    1783,  2372,  1784,  1495,   799,  2073,   654,    28,  1366,  1712,
     452,  1929,   800,  1713,  1714,  1715,   812,  1080,   801,   452,
     452,   829,    85,  1399,  1399,  1399,  1399,   760,   833,  1399,
    1399,  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1618,
    2262,  2220,  1619,  2223,  1759,  1624,  1539,    30,  1331,   781,
    -235,  -235,  1625,  1031,  1541,  1331,   938,  1350,  1662,   813,
      31,  1663,   930,  -204,   930,  1042,  1043,   638,    86,   776,
    1760,   778,   931,   743,  1060,   745,   802,   939,   814,  1399,
    1399,   564,   564,    32,   564,  1686,  2265,   941,  1153,   943,
      87,   782,   803,   455,   800,  1693,  2124,    33,  1153,   499,
     801,  1028,   950,   452,  2240,  -204,   452,   452,   525,   452,
      24,   952,   537,   957,  1020,  1367,  1697,  1995,  1813,  1153,
    1145,  1147,   802,  1374,  1375,   958,   964,  2125,   815,   803,
    1731,  1877,  2040,  1153,  1878,  2402,   932,   932,   932,   967,
    2055,   804,   930,  2267,    28,   805,   968,  1645,  1881,  1350,
    2132,  1882,  1577,  1956,  2003,   970,  1153,  1153,   637,  1028,
    2250,   988,  1032,  2074,  1716,  2111,  2075,  1332,    24,  1035,
    1033,  2078,   806,   637,  2079,   452,  1761,   986,   830,  1028,
    -355,  1762,   805,  1666,    30,  1717,  -362,  2451,  2091,  1031,
    2451,  1619,   986,  1020,  1041,   452,   452,    31,  2168,  1044,
    2144,   452,    28,  1045,   802,  1046,  2041,  1717,  1028,   831,
    2153,  -170,  2170,  1619,   816,  2171,  2191,   803,  2251,  1345,
      32,  1619,  1047,  1051,  -170,   552,   639,    33,  2476,  -170,
     460,   932,  1028,  2270,  1540,  1053,   807,  2042,  1125,   452,
     452,   452,    30,  2252,   452,  2332,  1619,  1718,  1345,  -352,
    -949,  2383,  2043,  -353,  2384,    31,   452,   452,   452,   452,
    1056,  2044,   817,   803,   452,   818,   834,  -356,   552,  1718,
     805,  1057,  1062,   807,  -170,  2271,   819,    50,    32,   452,
     452,   610,  2409,  1064,   452,  1619,   461,   931,  2045,   931,
    2272,   931,    33,  -170,  1065,  -354,  1066,   835,   452,  2435,
    1067,   452,  1345,   452,  1129,  2438,   625,   820,  2439,  2346,
    1068,  1020,  1549,  1127,  2443,  1763,   805,   965,  1075,  1076,
    1086,  2282,   800,   452,  2449,  1764,  2453,  2450,   801,  2450,
    1143,  1156,  1130,   463,   452,  -170,  2465,  2499,    50,  2466,
    2466,    24,   780,   806,  -170,   803,  1028,   782,   452,  1187,
    1813,   822,   449,  2500,   549,  1189,  1345,  1194,  1799,  2125,
     589,   807,  1200,   452,   934,  2407,  1218,  1220,   552,   590,
      54,   823,  2046,   591,   593,    28,  1219,  1225,  1226,   452,
     654,  2273,  1350,  1712,  1227,  2291,  2292,  1713,  1714,  1715,
    2508,   825,  1231,   965,  1594,   452,  2238,   449,   805,  2513,
    1931,  1238,  2450,  1799,  2000,  1239,  2528,   807,  1441,  2529,
    1243,  1253,   930,   930,   930,    30,  2556,  2557,  2587,   965,
    1153,  2450,  2040,  2604,  1258,  1595,  2466,  1265,    31,  1266,
    1270,  1276,   802,  1719,  1720,  1721,  1875,  1722,  1723,  1724,
    1725,  1726,  1727,   465,  1277,   466,   932,  1020,   932,  1284,
     932,    32,  1287,   452,  2347,  1719,  1720,  1721,  1288,  1722,
    1723,  1724,  1725,  1726,  1727,    33,   467,  1290,  1298,   468,
    1037,  1048,  1054,  1028,  1329,  -170,  1333,  1351,  1031,   576,
    1900,   579,  1352,   583,  1685,  1357,   655,  1407,  1408,   807,
    1091,  1399,  1420,  1433,  1454,  2602,  2041,  1440,  1451,  1452,
    1475,  1476,   637,    50,  1503,  1490,   931,   930,  1496,   559,
    1504,  1516,  2124,  1645,  1517,  1518,  1519,  1537,  1551,  1535,
    1555,   986,  1556,  1557,   560,  1611,  1616,  2042,  1935,  1631,
    1936,  1620,  1626,   452,  1941,  1942,  1031,   585,  1630,  1632,
     769,   586,  2043,   452,  1646,  1648,  1649,   452,  1653,  1655,
     452,  2044,  1090,  1656,  1664,  1091,  1031,   452,   452,   452,
     452,  1674,  1676,   452,   452,   452,   452,   452,   452,   452,
     452,   452,   452,   803,   549,  1399,   452,   452,  2045,  1678,
     638,  1717,  1028,  2017,  1097,  1031,  1677,  1679,  1028,  2262,
     452, -1473,  1685,  1680,  1681,  2263,    50,   452,  1682,  1695,
     452,  1696,   452,   552,  1698,  1699,  1705,  2264,  1700,  1031,
     452,  1701,  1702,   452,   452,  1998,  1099,  1704,   452,   452,
     552,  2386,  1601,  1708,  1730,  1153,   805,  1736,  1739,  1246,
    1737,  1738,  1740,  1747,   452,  2265,   452,  2266,  1750,  1399,
    1751,  1752,  2437,  1718,  1753,  1758,  1765,   452,  1774,  1775,
    2471,  1028,   449,  1602,   449,  1777,  1778,  1779,  1799,  1803,
    1799,  2480,  2046,  1815,  -237,   932,  -238,  1821,  1820,  1824,
     452,  1823,  1826,  1829,   450,  1836,  1843,  1844,  1846,   475,
    1848,  1849,  1852,   475,  1756,  1855,  1868,   452,   516,   475,
     521,  1897,  2267,   521,  1870,  1893,   541,  1883,  2442,   475,
     475,  1894,  1889,  1080,  1890,  1891,  1904,  1895,  1905,  1915,
    1919,  2442,  1926,  1920, -1473,  1916,  1923,   807,  2268,  1927,
    1930,  1937,   930,  1031,   930,   521,   930, -1473,  1943,  1339,
    1082,  1954, -1473,  1959,  1955,  2526,  1020,  1712,  1732,   639,
    1733,  1992,  2127,  1993,  2124,  1994,  1080,  2005,   452,   452,
     541,   475,   541,   541,   541,  1997,  2009,  2006,  2482,  2018,
    1786,  2031,  1028,  2039,  1441,  2053,  1900, -1473,  2057,  2059,
    2061,  2067,  2063,  1301,  2062,  1302,  2070,  2269,  2072,  2076,
    1776,  2085,  2270,  2164,  2099,  2097,  2149,  2115,  2155,   931,
    2156,  2160,  2174,   931,  1020,  2166,  1793,  1028,  1619,  2471,
    2509,   452,  2175,  2176,  2181,  2178,  2577,  2501,  1317,    50,
    2216,  2184,  2224,  2185,  1020,  1108,  2217,  2199,  2210,  2510,
    2519,  2209,  1028,  2225,  2271,  1028,  2214,  2229,  2230,  1719,
    1720,  1721,  2231,  1722,  1723,  1724,  1725,  1726,  1727,  2272,
    2232,  1793,  2246,  1020,   452,   452,   551,  2253,  2257,   452,
    1031,  2280,  1318,  2304,   452,   594,   595,   452,   452,   600,
    2281,  2285,   452,  2295,  2296,  2297,  2298,  1020,  2305,  2306,
    2318,  2319,  2321,  2324,  2325,  2329,   459,  1319,  1022,  2327,
     460,  2330,  2350,   452,  2365,  2337,  2343,   452,  2368,  2356,
    2370,  2376,  2378,  2380,  2394,  1320,  2385,  2397,  2398,  1321,
    -949,   449, -1473,  2399,  2400,   449,  2408,  1799,  2411,  2412,
    2413,  1799,  1023,  2436,   452,  2440,  2426,  2427,  2445,  2448,
    1322,  2459,  2234,  1323,  2236,  2455,  2462,  2478,  2481,  2239,
    2273,  2241,  2486,  2495,  2483,   751,   461,  1324,   931,  2496,
    2507,   930,  2497,   462,  2516,  2515,  2525,  2393,   932,  2527,
     452,  2531,   932,  2532,   772,  2534,  2537,  2538,  2543,  1031,
    2554,  2544,    50,  2539,  2545,  1031,  2019,  2567,  2582,  2573,
    2588,  2595,  2598,  2600,  2605,  2606,  2596,  2597,  2619,  1908,
     771,  1020,  1498,   463,  2154,  1309,  1533,  1154,  1135,  1811,
    2288,  1184,  1822,  1183,  1028,  1513,  2514,  2060, -1473,  1188,
    1825,  1532,   945,   947,   949,  1115,  1116,  1117,  1118,  1119,
    1120,  2235,  1554,  2310,  2034,   637,  2208,  2447,  1325,  2030,
    2222,  2506,  1562,  2505,  1565,   452,  1326,  1576,  1031,  2511,
    1675,  2512,  2367,  1580,   986,  1582,  2558,   452,   452,  2559,
    2553,   452,  1480,  1814,  1615,  1195,  1022,  1589,  1772,   464,
    1690,  1770,  1592,   452,  1025,  1489,  1597,  1598,  1599,  1600,
     452,  1604,  1605,  1026,  2569,   452,  2614,  1327,   452,   452,
    2081,   449,  2477,  2601,  2594,   452,   452,  1799,   449,  1090,
    1023,  1080,  1091,   449,  1799,  2425,   449,  2352,   452,  1799,
     452,  1851,  1799,   465,  1210,   466,  2029,   932,  2032,  1873,
    2159,  2566,  2599,  1902,  1847,  2133,   449,  2564,  1020,   452,
    1673,  1097,  1799,  2498,  1500,  1296,   467,  1581, -1473,   468,
    2114,  2118,  1866,  2080,  2524,  2242,   541,   541,  2563,  1903,
     541,  1934,   603,     0,  2369,  2326,  2146,     0,     0,  1031,
       0,   475,     0,  1099,     0,     0,     0,  1148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2127,     0,
       0,  2410,     0,     0,   618,   475,   475,     0,   452,     0,
       0,     0,     0,   452,  1031,     0,     0,     0,     0,     0,
       0,     0,  2310,     0,     0,     0,   449,   552,  1090,     0,
     452,  1091,  1799,  1196,   452,     0,  1201,     0,   521,  1031,
     521,     0,  1031,   452,     0,     0,   541,     0,     0,  1228,
       0,  1766,   449,     0,   475,   452,     0,  1020,  1799,     0,
    1097,     0,  1025,  1020,   930,   541,     0, -1473,   930,   452,
    1252,  1026,    50,     0,     0,     0,     0,     0,     0,     0,
       0, -1473,   541,     0,     0,  1022,     0,     0,     0,     0,
       0,     0,  1099,     0, -1473,     0,     0,     0,     0, -1473,
       0,     0,     0,     0,     0,     0,     0,     0,   813,  2492,
       0,  2488,     0,   541,   541,   541,     0,     0,     0,  1023,
     452,     0,     0,   452,     0,     0,  1020,   814,     0,     0,
       0,     0,   452,     0, -1473,     0,     0,     0,     0,   452,
       0,   449,     0,     0,     0,     0,     0,  1799,     0,     0,
     452,     0,     0,     0,     0,   845,  2517,  1034,     0,     0,
    2010,     0,     0,     0,  1022,     0,     0,   452,   449,     0,
       0,     0,     0,     0,  1799,     0,     0,   815,     0,     0,
    1283,     0,  1108,     0,  1027,  1793,   452,   452,     0,  1793,
   -1473,     0,     0,     0,     0,     0,     0,     0,  1023,     0,
       0,     0,     0, -1473,     0,     0,     0,  1306, -1473,     0,
       0,  1031,     0,   930,     0,   845,  1030,     0,    50,     0,
      50,     0,     0,     0,     0,     0,     0,     0,     0,   452,
    2127,   452,   813,     0,     0,  2578,     0,  1020,     0,     0,
       0,     0,  2107, -1473,     0,     0,     0,   449,     0,     0,
       0,   814,     0,  1799,     0,     0,     0,     0,   541,     0,
       0,  1025,     0,   816,     0,     0,     0,     0,     0, -1473,
    1026,     0,  1020,     0,   475,   475,     0,     0,     0,     0,
       0,     0,  1022,     0,     0,     0,     0,     0,     0,   452,
     452,  1108,  1922,     0,     0,     0,     0,  1020,     0,     0,
    1020,   815,    50,   541,   541,  1199,     0,   541,  1209,     0,
       0,   817,     0,     0,   818,     0,  1023,     0,     0,     0,
     541,     0,     0,     0,     0,   819,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   541,     0,     0,
    1025,   541,     0,     0,     0,     0,     0,     0,     0,  1026,
       0,     0,  1027,     0,     0,     0,   820,     0,     0,     0,
       0,     0,  1793,     0,     0, -1473,  1488,  1793,     0,     0,
    1793,     0,  1115,  1116,  1117,  1118,  1119,  1120, -1473,     0,
       0,     0,     0,     0,  1030,     0,  1497,   816,  1499,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     822,     0,     0,     0,  1090,     0,     0,  1091,   845,   845,
     845,     0,     0,     0,     0,     0,     0,     0,  1022,     0,
     823,     0,     0,     0,     0,     0,  1528,     0,     0,     0,
       0,     0,     0,     0,     0,   817,  1097,     0,   818,     0,
     825,     0,     0, -1473,  1267,     0,     0,     0,     0,   819,
      50,   541,  1023,     0,     0,     0,     0,     0,  1025,  1293,
       0,     0,     0,     0,     0,   618,     0,  1026,  1099,  1020,
     618,    50,   475,   475, -1473,   475,   618,     0,   541,     0,
     820,  1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,
       0,     0,  2083,     0,     0,     0,  1793,     0,     0,     0,
       0,     0,     0,     0,     0,  1080,     0,     0,     0,   845,
     845,     0,  1627,     0,   985,     0,  2116,     0,     0,     0,
       0,   985,     0,     0,   822,     0,     0,     0,     0,     0,
       0,  2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,
    2143,     0,     0,     0,   823,     0,     0,     0,     0,     0,
       0,  1027,     0,     0,  1090,     0,     0,  1091,    50,     0,
       0, -1473, -1473, -1473,   825,     0, -1473,     0,     0,     0,
       0,     0,  1392,     0,     0,     0,     0,     0,     0, -1473,
       0,     0,     0,  1030, -1473,     0,  1097,     0,     0,     0,
       0,     0,     0,  1098,  1025,     0,     0,     0,     0,     0,
       0,     0,     0,  1026,     0,    50,     0,   618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1090,  1099, -1473,
    1091,     0,     0,     0,   985,     0,   985,   985,     0,     0,
    1027,     0,     0,     0,     0,     0,     0,   541,  1090,     0,
       0,  1091,     0,     0,     0,  1092,  1093,  1094,     0,  1097,
       0,     0,     0,     0,     0,     0, -1473,   541,     0,   541,
       0,     0,  1030,     0,     0,     0,     0,  1108,     0,     0,
    1097,     0,     0,     0,     0,     0,     0,  1098,     0,     0,
       0,  1099,     0,     0,    50,     0,     0,     0,     0,     0,
       0,     0,   985,     0,     0,   985,   985,   541,     0,     0,
       0,     0,  1099,   845,     0,     0,  1543,  1022,  1545,     0,
       0,  1209,   475,     0,     0,     0,  1100,     0,     0,     0,
    1785,     0,   475,  1563,   475,  1567,     0,   475,     0,  1101,
       0,     0,     0,   475,  1102,   475,     0,     0,     0,     0,
       0,  1023,     0,     0,     0,     0,   618,   475,  1027,  2013,
       0,   618,   475, -1380, -1473,     0,   475,   475,   475,   475,
       0,   475,   475,     0,     0,  1022,     0,     0,     0,  1105,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1473,
    1030,     0,     0,   541,  1628,  1022,   654,     0,     0,  1712,
       0,     0, -1473,  1713,  1714,  1715,  1634, -1473,     0,  1023,
    1100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2001,     0,     0,  1101,  1022,     0,     0,  1108,  1102,  1023,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     845,     0, -1473,     0,     0,     0,     0,     0,  1022, -1473,
   -1473,     0,     0,     0, -1380,     0,     0,     0,  1023,     0,
   -1473,     0,     0,  1105,     0,  1311,  1313,  1115,  1116,  1117,
    1118,  1119,  1120,  1906,     0,     0,     0,     0,  1911,  1912,
    1914,     0,  1023,     0,     0,     0,     0,     0,     0,     0,
    1108,     0,     0,  1025,  1027,     0,  1928, -1473,     0,     0,
       0,     0,  1026,     0,     0, -1380,     0,     0,     0,     0,
       0,  1108,   845,     0,  1110,     0,     0,     0, -1380,     0,
       0,     0,  2387, -1380,     0,     0,  1030,     0, -1380,     0,
       0,     0,     0,     0,  1358,  1359,     0, -1380,     0,     0,
   -1380,     0,  1371,     0,  1372,  1373,     0,     0,     0,     0,
       0,  1025,     0,     0,  2405,  2406,     0,     0,     0,  1409,
    1026,  1410,  1022,     0,     0,     0,     0,  2414, -1380,     0,
    1392,  1025,     0,     0,  1421,  1423,     0, -1473,     0,     0,
    1026,     0,     0,     0,     0,     0,     0, -1380,     0,     0,
       0,     0,     0,     0,     0,     0,  1023,  1717,  1110,     0,
    1025,   541,     0,     0,     0,     0,     0,     0,  1802,  1026,
    1111,     0,     0, -1473, -1473, -1473,     0,  1115,  1116,  1117,
    1118,  1119,  1120,     0,  1025,     0,     0,     0,  2460, -1380,
       0,     0, -1380,  1026,  2026,  2027,  2028,     0, -1380,     0,
       0,   654,     0,     0,  1712,     0,     0,     0,  1713,  1714,
    1715,     0,     0,  1802,     0,  1828,     0,     0,  1833,  1718,
       0,     0,  1545,  1522,  1522,  2193,     0,     0,  1090,     0,
    2068,  1091,     0, -1473,     0,     0,     0,  1267,     0,     0,
    1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,  1022,
       0,     0, -1380,     0,  1111,     0,     0,  1112,  1113,  1114,
    1097,  1115,  1116,  1117,  1118,  1119,  1120, -1473,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     985,     0,     0,  1023,     0,     0,     0,     0,     0,     0,
     985,     0,  1099,   985,     0,     0,     0,  1267,  1025,     0,
       0,     0,     0,  1786,   541,     0,     0,  1026,  1267,   541,
     541,   541,     0,     0,     0,     0,  2152,     0,     0,     0,
       0,     0,   475,     0,     0,     0,     0,   541,     0, -1380,
       0,   618,     0,     0,     0,     0,     0,  1306,     0,     0,
       0,     0,     0,  1027,     0,     0,     0,  1267,  1267,     0,
     845,     0,     0, -1380,     0, -1380, -1380,     0,  1022,     0,
    2014,     0,   985,     0,  1022,     0,     0,   800,     0,     0,
       0,     0,     0,   801,     0,  1030,     0,   985,     0,     0,
     813,     0,     0,  1392,     0,     0,     0,     0,     0,  1683,
   -1473, -1380,  1023,     0, -1380, -1380, -1380,     0,  1023,   814,
       0,  1027,  1717, -1473,     0,  1719,  1720,  1721, -1473,  1722,
    1723,  1724,  1725,  1726,  1727,  1090,     0,     0,  1091,     0,
       0,  1027,     0,     0,     0,  1025,     0,  1022,     0,  2203,
    2204,  2205,  2206,  1030,  1026,     0,     0,     0,     0,     0,
       0,     0,     0, -1473,     0,     0,     0,  1097,     0,   815,
    1027,     0,     0,  1030, -1473,     0,     0,  2021,     0,     0,
       0,  1023,     0,     0,  1718,   541,   541,   541,   450,     0,
    1802,  2038,     0,     0,  1027,  2038,  2052,   802,     0,  1099,
       0,     0,  1030,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   541,     0,     0,     0,     0,  1030,     0,   654,     0,
       0,  1712,     0,     0,     0,  1713,  1714,  1715,     0,  1545,
       0,     0,   475,     0,     0,     0,  1267,  1209,  1267,     0,
    1293,     0,  2194,     0,  1025,   816,     0,     0,  1022,     0,
    1025,     0,  1807,  1026,     0,     0,   475,  2197,  2117,  1026,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1818,
    1818,   475,   475,   475,   475,   475,   475,   475,   475,   475,
     475,     0,  1023,  1022,     0,     0,     0, -1473, -1473,     0,
       0,     0,     0,   817,     0,     0,   818,   541,  1027,     0,
   -1473,     0,     0,     0,  1209, -1473,     0,   819,  1022,     0,
       0,  1022,     0,  1025,     0,  1293,     0,  1023,   541,     0,
       0,     0,  1026,     0,     0,  1267,     0,     0,   803,     0,
    2128,     0,     0,     0,     0,     0,     0,     0,   820,     0,
   -1473,     0,  1023,     0,     0,  1023,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1719,  1720,  1721,     0,  1722,  1723,  1724,  1725,  1726,  1727,
       0,     0,   725,   725,     0,     0,     0,   821,     0,     0,
       0,   805,   822,     0, -1473,     0,     0,     0,  1108,  2395,
       0,  1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,
       0,     0,   823,     0,     0,     0,     0,  2202,   824,     0,
     541,   541,   541,   541,     0,     0,     0,  2038,  2052,  1717,
    2038,     0,   825,  2212,  1025,  1027,     0,  1802,   842,   847,
       0,  1802,     0,  1026,  1944,  1946,     0,  2228,  2431,  1953,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1392,     0,     0,     0,     0,     0,  1030,     0,  1025,
       0,     0,     0,  1833,     0,     0,     0,  1545,  1026,     0,
       0,     0,   807,  1209,     0, -1473,     0,     0,     0,     0,
    1022,  1718,     0,     0,  1025,     0,     0,  1025,   842,     0,
       0,     0,     0,  1026,     0,  2469,  1026,     0,  2289,     0,
       0,     0,     0,     0,  1039,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1023,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2491,     0,
       0,     0,  1061,     0,  1027,     0,     0,  1267,     0,     0,
    1027,     0,     0,  1634,     0,     0,     0,     0,     0,     0,
       0,  1077,  1078,  1079,  2322,  1081,     0,     0,     0,     0,
     654,     0, -1382,  1712,     0,     0,  1030,  1713,  1714,  1715,
       0, -1473,  2293,     0,     0,  1128,     0,     0,  1115,  1116,
    1117,  1118,  1119,  1120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1396,     0,   450,  2038,     0,
       0,     0,   475,  1027,  1802,     0,     0,     0,     0,  1802,
       0,     0,  1802,   450,     0,  2355,     0,  2358,     0,     0,
       0,  1162,     0,     0,     0,  1174,  1179,     0,     0,     0,
       0,     0,  2373,     0,     0,  1030,     0,   985,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   618,   475, -1382,     0,     0,  1025,     0,     0,     0,
     541,     0,     0,     0,     0,  1026,     0,  1719,  1720,  1721,
       0,  1722,  1723,  1724,  1725,  1726,  1727,     0,     0,     0,
       0,   842,   842,   842,   475,   475, -1396,     0,     0,     0,
       0,     0,     0,     0,  1209,     0,     0,   475,     0,     0,
       0,  2173,     0,     0, -1382,     0,     0,     0,     0,   541,
       0,   477,  2373,     0,  1027,     0,     0, -1382,     0,     0,
       0,     0, -1382,     0,     0,     0,     0, -1382,     0,     0,
       0,   475,     0,     0,     0,     0, -1382, -1396,  1802, -1382,
       0,     0,     0,     0,  2358,     0,  2128,     0,     0,  1027,
   -1396,     0,     0,  2458,     0, -1396,     0,     0,   475,     0,
   -1396, -1473,     0,     0,   478,     0,   541, -1382,     0, -1396,
       0,     0, -1396,     0,  1027,  1123,     0,  1027,     0,   479,
       0,  1030,   842,   842,     0,     0, -1382,     0,   618,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   541,
   -1396,     0,     0,     0,     0,     0,  1030,     0,     0,  1030,
       0,     0,     0,  1123,     0,     0,     0,     0,     0, -1396,
       0,     0,     0,  1718,     0,     0,     0,   450, -1382,     0,
       0, -1382,   480,   475,     0,     0,     0, -1382,  2355,     0,
       0,   481,     0,     0,     0,     0,     0,     0,     0,     0,
     618,   618,   618,   482,  2373,     0,     0,     0,     0,     0,
       0, -1396,   985,     0, -1396,     0,     0,   985,     0,     0,
   -1396,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1311,  1313,   483,     0,     0,  1355,     0,     0,     0,     0,
       0, -1382,  1123,     0,     0,  2355,     0,  1123,     0,     0,
       0,     0,   813,  2458,     0,     0,  1376,     0,     0,  1393,
       0,     0,  1404,  1545,     0,     0,     0,     0,     0,  1411,
    1416,   814,     0,     0, -1396,     0,     0,  1209,   484,     0,
       0,     0,     0,  2373,     0,     0,  1426,  1427,  1428,  1429,
       0,     0,  1786,     0,  1438,  1439,  1027,     0,   618,  1450,
       0,     0,     0,  1453,     0,     0,  1461,  1462,  1463,  1464,
    1465,  1466,  1467,  1468,  1469,     0,     0,  1470, -1382,     0,
       0,   815,  2105,     0,   725,  1786,   842,     0,  2128,  2106,
       0,     0,     0,     0,   485,     0,     0,     0,     0,     0,
       0,     0, -1382,     0, -1382, -1382,     0,  1501,   486,     0,
       0, -1396,     0,     0,     0,     0,     0,     0,     0,  1719,
    1720,  1721,     0,  1722,  1723,  1724,  1725,  1726,  1727,  1078,
    1079,     0,     0,     0,   -38, -1396,     0, -1396, -1396,   487,
   -1382,   488,     0, -1382, -1382, -1382,  2107,     0,   489,     0,
       0,   490,     1,     0,  1311,  1313,     0,     0,     0,     0,
       0,     0,     2,   985,     3,     4,     0,   816,     0,     0,
     491,     0,     0, -1396,     0,     0, -1396, -1396, -1396,     0,
       5,   492,     0,     0,     0,     0,     0,     0,   493,     6,
       0,     0,     0,     0,     0,     0,     0,   494,     0,  1123,
       0,     7,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     8,   842,     0,   817,  1612,  1613,   818,  1614,
       0,  1123,     0,     9,     0,    10,  1400,   495,     0,   819,
       0,  2108,     0,     0,     0,     0,     0,  1123,  1123,  1123,
       0,  1123,    11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,     0,
     820,     0,     0,     0,     0,     0,    13,     0,     0,     0,
       0,     0,    14,     0,     0,     0,     0,     0,     0,     0,
      15,     0,    16,    17,  1090,   842,     0,  1091,  1123,     0,
       0,  1092,  1093,  1094,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   822,     0,  1688,     0,  1095,     0,
       0,  1694,     0,     0,     0,     0,  1097,     0,     0,     0,
       0,    18,  1123,  1098,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1123,     0,     0,     0,     0,  1123,
       0,     0,     0,     0,   825,     0,  2109,     0,  1099,  2110,
       0,  1711,     0,     0,     0,     0,     0,     0,     0,     0,
      19,     0,     0,     0,     0,     0,  1416,     0,  1416,  1416,
       0,     0,     0,     0,  1749,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   985,     0,     0,     0,     0,
       0,   800,     0,     0,     0,     0,     0,   801,  1768,     0,
       0,  1771,     0,  1773,   813,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
       0,     0,    21,   814,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1100,  1220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1162,  1101,
      22,     0,     0,     0,  1102,     0,     0,     0,    23,     0,
       0,     0,     0,  1179,     0,     0,     0,     0,     0,     0,
      24,     0,     0,   815,     0,  1103,  1104,    25,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,  1105,
       0,    27,     0,     0,     0,  1845,     0,     0,     0,     0,
       0,   802,     0,     0,    28,  1123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,  1107,     0,     0,  1123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1108,     0,    29,
    1109,     0,     0,  1123,    30,  1400,  1400,     0,  1728,     0,
    1400,     0,     0,   842,  1123,     0,     0,    31,     0,   816,
       0,  1123,     0,     0,     0,     0,  1123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1123,  1123,  1123,  1123,
      32,     0,     0,     0,     0,  1400,  1400,     0,  1123,  1123,
       0,     0,     0,     0,    33,     0,     0,   -38,     0,     0,
    1123,     0,     0,  1123,     0,     0,     0,   817,     0,     0,
     818,  1123,  1123,  1123,  1123,  1123,  1123,  1123,  1123,  1123,
    1123,   819,     0,     0,  1110,     0,     0,     0,     0,     0,
       0,     0,     0,  1958,     0,     0,     0,     0,     0,     0,
       0,     0,   803,  1962,     0,     0,     0,  1963,     0,     0,
    1965,  1123,   820,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1985,  1986,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1583,     0,     0,     0,   805,   822,  1999,     0,     0,
    2002,     0,  2004,     0,     0,     0,     0,     0,     0,     0,
    2008,     0,     0,     0,     0,     0,   823,     0,  2015,  2016,
    1111,     0,  1584,  1112,  1113,  1114,     0,  1115,  1116,  1117,
    1118,  1119,  1120,     0,     0,     0,   825,     0,     0,     0,
    1703,     0,     0,     0,     0,     0,     0,  2056,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1123,  1123,  1123,     0,     0,  1089,     0,     0,
    2069,     0,  1090,     0,     0,  1091,     0,     0,     0,  1092,
    1093,  1094,     0,     0,     0,     0,   807,  2082,     0,     0,
       0,     0,     0,     0,     0,     0,  1095,     0,     0,  1096,
       0,     0,     0,     0,  1097,     0,     0,     0,     0,     0,
       0,  1098,     0,     0,     0,     0,     0,     0,  1090,     0,
       0,  1091,     0,     0,     0,  1092,  1093,  1094,     0,     0,
       0,     0,     0,     0,     0,     0,  1099,     0,  1123,     0,
       0,     0,  1095,     0,  1123,     0,     0,     0,  2147,  2148,
    1097,     0,     0,     0,     0,     0,     0,  1098,     0,  1728,
    1728,  1123,     0,  1400,  1400,  1400,  1400,     0,     0,  1400,
    1400,  1400,  1400,  1400,  1400,  1400,  1400,  1400,  1400,  1728,
       0,     0,  1099,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1123,
       0,  2177,     0,     0,  1728,  1728,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1123,  1400,
    1400,  1123,     0,  1123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1100,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2187,  2188,     0,  1101,     0,  2189,
       0,     0,  1102,     0,  2192,     0,     0,  2195,  2196,     0,
       0,     0,  2200,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1103,  1104,     0,     0,     0,     0,     0,
    1100,     0,     0,     0,     0,     0,     0,  1105,     0,     0,
       0,     0,     0,  1101,     0,  1123,     0,     0,  1102,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   725,     0,     0,     0,  1106,  1103,
    1104,  1107,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1105,     0,  1108,     0,     0,  1109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2283,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1106,     0,     0,  1107,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,     0,     0,  1109,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1123,     0,
       0,     0,  1123,  1123,     0,  1123,     0,     0,  1728,  1728,
    1728,  1728,  1110,     0,     0,  1728,  1728,  1728,  1728,  1728,
    1728,  1728,  1728,  1728,  1728,  1123,  1123,  2333,  2334,     0,
       0,  2335,     0,     0,     0,     0,     0,     0,     0,  1123,
       0,     0,  1123,     0,  1123,     0,     0,     0,  1123,     0,
       0,  1728,  1728,     0,     0,  1123,  1123,     0,  1110,     0,
       0,     0,     0,     0,     0,  2363,  2364,     0,     0,     0,
       0,     0,     0,     0,     0,  1090,     0,     0,  1091,     0,
    2377,     0,  1092,  1093,  1094,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1123,     0,     0,  1095,
       0,     0,     0,     0,     0,     0,     0,  1097,  1111,  1123,
       0,  1112,  1113,  1114,  1098,  1115,  1116,  1117,  1118,  1119,
    1120,     0,  1123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1099,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1111,     0,     0,  1112,  1113,  1114,
       0,  1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,
       0,  1419,     0,     0,     0,     0,     0,     0,     0,     0,
    2444,     0,     0,     0,     0,     0,     0,  1123,  1123,     0,
       0,     0,     0,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2461,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1123,     0,  2475,
       0,  1400,     0,     0,     0,     0,     0,  1123,  1123,  1123,
       0,     0,  1123,     0,     0,  1123,  1123,  1100,     0,     0,
    1123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1101,     0,     0,     0,     0,  1102,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1103,  1104,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2363,
    1105,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1400,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2536,     0,     0,
       0,  1106,     0,  1123,  1107,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2550,  2550,  1108,     0,
       0,  1109,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1728,  1400,
       0,     0,     0,  1123,  1123,  1123,     0,     0,     0,     0,
       0,  2550,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1123,  1123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1123,     0,     0,
       0,     0,     0,     0,     0,  1110,     0,     0,  1728,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2550,
    2617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1728,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1123,     0,     0,     0,     0,
       0,  1111,     0,     0,  1112,  1113,  1114,     0,  1115,  1116,
    1117,  1118,  1119,  1120,     0,     0,     0,     0,  1961,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1123,     0,     0,     0,    88,   651,   513,   652,   653,   654,
     655,   656,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,   837,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   657,
     111,   658,   659,     0,   114,   115,   116,   117,   118,   119,
     660,   661,   120,   121,   662,   663,   124,  1123,   125,   126,
     127,   128,   664,     0,   665,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   666,   667,   668,
     669,   670,   671,   672,   151,   152,   153,   154,   155,   156,
     673,   674,   159,   675,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,   838,     0,
     172,   173,   676,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   677,   188,
     189,   190,   191,   678,   679,   193,     0,   194,   195,   680,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   681,   682,     0,   683,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   684,
     685,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   686,   271,
     687,   273,   274,   275,   276,   688,   277,   278,   279,   280,
     689,   690,   282,   691,   284,   285,   286,     0,   287,   288,
       0,     0,   692,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   693,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   694,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   695,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   696,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   697,   363,   364,   365,   366,   367,   368,
     369,   370,   698,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   699,     0,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,     0,
     700,   701,     0,     0,   397,   398,   702,   400,   703,   704,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,   705,     0,   414,   415,   416,   417,
     418,   419,   706,   839,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   707,     0,     0,     0,     0,
       0,     0,   708,   709,   840,     0,     0,     0,     0,     0,
       0,   711,   841,     0,     0,     0,   712,    88,   651,   513,
     652,   653,   654,   655,   656,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108,   109,   657,   111,   658,   659,     0,   114,   115,   116,
     117,   118,   119,   660,   661,   120,   121,   662,   663,   124,
       0,   125,   126,   127,   128,   664,     0,   665,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     666,   667,   668,   669,   670,   671,   672,   151,   152,   153,
     154,   155,   156,   673,   674,   159,   675,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   676,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   677,   188,   189,   190,   191,   678,   679,   193,     0,
     194,   195,   680,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   681,   682,     0,
     683,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   684,   685,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   686,   271,   687,   273,   274,   275,   276,   688,   277,
     278,   279,   280,   689,   690,   282,   691,   284,   285,   286,
       0,   287,   288,     0,     0,   692,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   693,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   694,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   695,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     696,   349,   350,   351,   352,   353,   354,   355,   356,   357,
      24,   358,   359,   360,   361,   362,   697,   363,   364,   365,
     366,   367,   368,   369,   370,   698,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     699,     0,   386,   387,    28,   388,   389,   390,   391,   392,
     393,   394,     0,   700,   701,     0,     0,   397,   398,   702,
     400,   703,   704,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,   705,     0,   414,
     415,   416,   417,   418,   631,   706,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,    31,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   707,     0,
      32,     0,     0,     0,     0,   708,   709,     0,     0,     0,
       0,     0,     0,     0,   711,  2454,     0,     0,     0,   712,
      88,   651,   513,   652,   653,   654,   655,   656,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   657,   111,   658,   659,     0,
     114,   115,   116,   117,   118,   119,   660,   661,   120,   121,
     662,   663,   124,     0,   125,   126,   127,   128,   664,     0,
     665,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   666,   667,   668,   669,   670,   671,   672,
     151,   152,   153,   154,   155,   156,   673,   674,   159,   675,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   676,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   677,   188,   189,   190,   191,   678,
     679,   193,     0,   194,   195,   680,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     681,   682,     0,   683,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   684,   685,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   686,   271,   687,   273,   274,   275,
     276,   688,   277,   278,   279,   280,   689,   690,   282,   691,
     284,   285,   286,     0,   287,   288,     0,     0,   692,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   693,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   694,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   695,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   696,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    24,   358,   359,   360,   361,   362,   697,
     363,   364,   365,   366,   367,   368,   369,   370,   698,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   699,     0,   386,   387,    28,   388,   389,
     390,   391,   392,   393,   394,     0,   700,   701,     0,     0,
     397,   398,   702,   400,   703,   704,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
     705,     0,   414,   415,   416,   417,   418,   631,   706,     0,
     421,   422,   423,   424,   425,   426,     0,     0,   427,     0,
      31,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   707,     0,    32,     0,     0,     0,     0,   708,   709,
       0,     0,     0,     0,     0,     0,     0,   711,     0,     0,
       0,     0,   712,    88,   651,   513,   652,   653,   654,   655,
     656,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,   105,   106,   107,   108,   109,   657,   111,
     658,   659,  1412,   114,   115,   116,   117,   118,   119,   660,
     661,   120,   121,   662,   663,   124,     0,   125,   126,   127,
     128,   664,     0,   665,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   666,   667,   668,   669,
     670,   671,   672,   151,   152,   153,   154,   155,   156,   673,
     674,   159,   675,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   676,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   677,   188,   189,
     190,   191,   678,   679,   193,     0,   194,   195,   680,   197,
       0,   198,     0,   199,   200,  1413,   201,   202,   203,   204,
     205,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   232,   681,   682,     0,   683,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,  1414,
     246,   247,   248,   249,     0,   250,   251,   252,   684,   685,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   686,   271,   687,
     273,   274,   275,   276,   688,   277,   278,   279,   280,   689,
     690,   282,   691,   284,   285,   286,     0,   287,   288,     0,
       0,   692,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   693,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   694,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   695,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   696,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   697,   363,   364,   365,   366,   367,   368,   369,
     370,   698,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   699,     0,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,     0,   700,
     701,     0,  1415,   397,   398,   702,   400,   703,   704,   402,
     403,   404,   405,   406,   407,   408,     0,     0,   409,   410,
     411,   412,   413,   705,     0,   414,   415,   416,   417,   418,
     419,   706,     0,   421,   422,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   707,     0,     0,     0,     0,     0,
       0,   708,   709,     0,     0,     0,     0,     0,     0,     0,
     711,     0,     0,     0,     0,   712,    88,   651,   513,   652,
     653,   654,   655,   656,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   657,   111,   658,   659,     0,   114,   115,   116,   117,
     118,   119,   660,   661,   120,   121,   662,   663,   124,     0,
     125,   126,   127,   128,   664,     0,   665,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   666,
     667,   668,   669,   670,   671,   672,   151,   152,   153,   154,
     155,   156,   673,   674,   159,   675,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   676,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     677,   188,   189,   190,   191,   678,   679,   193,     0,   194,
     195,   680,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   681,   682,     0,   683,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   684,   685,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     686,   271,   687,   273,   274,   275,   276,   688,   277,   278,
     279,   280,   689,   690,   282,   691,   284,   285,   286,     0,
     287,   288,     0,     0,   692,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   693,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   694,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   695,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   696,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   697,   363,   364,   365,   366,
     367,   368,   369,   370,   698,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   699,
       0,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,     0,   700,   701,     0,     0,   397,   398,   702,   400,
     703,   704,   402,   403,   404,   405,   406,   407,   408,     0,
       0,   409,   410,   411,   412,   413,   705,     0,   414,   415,
     416,   417,   418,   419,   706,     0,   421,   422,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   707,     0,     0,
       0,     0,     0,     0,   708,   709,   710,     0,     0,     0,
       0,     0,     0,   711,     0,     0,     0,     0,   712,    88,
     651,   513,   652,   653,   654,   655,   656,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,  1172,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,   105,
     106,   107,   108,   109,   657,   111,   658,   659,     0,   114,
     115,   116,   117,   118,   119,   660,   661,   120,   121,   662,
     663,   124,     0,   125,   126,   127,   128,   664,     0,   665,
       0,   131,   132,   133,   134,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   666,   667,   668,   669,   670,   671,   672,   151,
     152,   153,   154,   155,   156,   673,   674,   159,   675,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   676,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   677,   188,   189,   190,   191,   678,   679,
     193,     0,   194,   195,   680,   197,     0,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   232,   681,
     682,     0,   683,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   684,   685,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   686,   271,   687,   273,   274,   275,   276,
     688,   277,   278,   279,   280,   689,   690,   282,   691,   284,
     285,   286,     0,   287,   288,     0,     0,   692,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   693,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     694,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   695,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   696,   349,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   697,   363,
     364,   365,   366,   367,   368,   369,   370,   698,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   699,     0,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,     0,   700,   701,     0,     0,   397,
     398,   702,   400,   703,   704,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,   705,
       0,   414,   415,   416,   417,   418,   419,   706,     0,   421,
     422,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     707,     0,     0,     0,     0,     0,     0,   708,   709,     0,
       0,     0,     0,     0,     0,     0,   711,     0,     0,     0,
       0,   712,    88,   651,   513,   652,   653,   654,   655,   656,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   657,   111,   658,
     659,     0,   114,   115,   116,   117,   118,   119,   660,   661,
     120,   121,   662,   663,   124,     0,   125,   126,   127,   128,
     664,     0,   665,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   666,   667,   668,   669,   670,
     671,   672,   151,   152,   153,   154,   155,   156,   673,   674,
     159,   675,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     676,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   677,   188,   189,   190,
     191,   678,   679,   193,     0,   194,   195,   680,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   681,   682,     0,   683,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   684,   685,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   686,   271,   687,   273,
     274,   275,   276,   688,   277,   278,   279,   280,   689,   690,
     282,   691,   284,   285,   286,     0,   287,   288,     0,     0,
     692,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     693,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   694,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     695,   326,   327,   328,   329,     0,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   696,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   697,   363,   364,   365,   366,   367,   368,   369,   370,
     698,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   699,     0,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,     0,   700,   701,
       0,     0,   397,   398,   702,   400,   703,   704,   402,   403,
     404,   405,   406,   407,   408,     0,     0,   409,   410,   411,
     412,   413,   705,     0,   414,   415,   416,   417,   418,   419,
     706,     0,   421,   422,   423,   424,   425,   426,     0,     0,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   707,     0,     0,     0,     0,     0,     0,
     708,   709,     0,     0,     0,     0,     0,     0,     0,   711,
    1402,     0,     0,     0,   712,    88,   651,   513,   652,   653,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     657,   111,   658,   659,     0,   114,   115,   116,   117,   118,
     119,   660,   661,   120,   121,   662,   663,   124,     0,   125,
     126,   127,   128,   664,     0,   665,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   666,   667,
     668,   669,   670,   671,   672,   151,   152,   153,   154,   155,
     156,   673,   674,   159,   675,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   676,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   677,
     188,   189,   190,   191,   678,   679,   193,     0,   194,   195,
     680,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   681,   682,     0,   683,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     684,   685,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   686,
     271,   687,   273,   274,   275,   276,   688,   277,   278,   279,
     280,   689,   690,   282,   691,   284,   285,   286,     0,   287,
     288,     0,     0,   692,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   693,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   694,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   695,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   696,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   697,   363,   364,   365,   366,   367,
     368,   369,   370,   698,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   699,     0,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
       0,   700,   701,     0,     0,   397,   398,   702,   400,   703,
     704,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,   705,     0,   414,   415,   416,
     417,   418,   419,   706,  1609,   421,   422,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   707,     0,     0,     0,
       0,     0,     0,   708,   709,     0,     0,     0,     0,     0,
       0,     0,   711,     0,     0,     0,     0,   712,    88,   651,
     513,   652,   653,   654,   655,   656,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   657,   111,   658,   659,     0,   114,   115,
     116,   117,   118,   119,   660,   661,   120,   121,   662,   663,
     124,     0,   125,   126,   127,   128,   664,     0,   665,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   666,   667,   668,   669,   670,   671,   672,   151,   152,
     153,   154,   155,   156,   673,   674,   159,   675,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   676,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   677,   188,   189,   190,   191,   678,   679,   193,
       0,   194,   195,   680,   197,     0,   198,     0,   199,   200,
    1413,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   681,   682,
       0,   683,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   684,   685,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   686,   271,   687,   273,   274,   275,   276,   688,
     277,   278,   279,   280,   689,   690,   282,   691,   284,   285,
     286,     0,   287,   288,     0,     0,   692,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   693,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   694,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   695,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   696,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   697,   363,   364,
     365,   366,   367,   368,   369,   370,   698,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   699,     0,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,     0,   700,   701,     0,     0,   397,   398,
     702,   400,   703,   704,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,   705,     0,
     414,   415,   416,   417,   418,   419,   706,     0,   421,   422,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   707,
       0,     0,     0,     0,     0,     0,   708,   709,     0,     0,
       0,     0,     0,     0,     0,   711,     0,     0,     0,     0,
     712,    88,   651,   513,   652,   653,   654,   655,   656,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,   105,   106,   107,   108,   109,   657,   111,   658,   659,
       0,   114,   115,   116,   117,   118,   119,   660,   661,   120,
     121,   662,   663,   124,     0,   125,   126,   127,   128,   664,
       0,   665,     0,   131,   132,   133,   134,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   666,   667,   668,   669,   670,   671,
     672,   151,   152,   153,   154,   155,   156,   673,   674,   159,
     675,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   676,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   677,   188,   189,   190,   191,
     678,   679,   193,     0,   194,   195,   680,   197,     0,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     232,   681,   682,     0,   683,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   684,   685,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   686,   271,   687,   273,   274,
     275,   276,   688,   277,   278,   279,   280,   689,   690,   282,
     691,   284,   285,   286,     0,   287,   288,     0,     0,   692,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   693,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   694,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   695,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   696,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     697,   363,   364,   365,   366,   367,   368,   369,   370,   698,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   699,     0,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,     0,   700,   701,     0,
       0,   397,   398,   702,   400,   703,   704,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,   705,     0,   414,   415,   416,   417,   418,   419,   706,
       0,   421,   422,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   707,     0,     0,     0,     0,     0,     0,   708,
     709,     0,     0,     0,     0,     0,     0,     0,   711,     0,
       0,     0,     0,   712,    88,   651,   513,   652,   653,   654,
     655,   656,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   657,
     111,   658,   659,     0,   114,   115,   116,   117,   118,   119,
     660,   661,   120,   121,   662,   663,   124,     0,   125,   126,
     127,   128,   664,     0,   665,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   666,   667,   668,
     669,   670,   671,   672,   151,   152,   153,   154,   155,   156,
     673,   674,   159,   675,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   676,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   677,   188,
     189,   190,   191,   678,   679,   193,     0,   194,   195,   680,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   681,   682,     0,   683,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   684,
     685,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   686,   271,
     687,   273,   274,   275,   276,   688,   277,   278,   279,   280,
     689,   690,   282,   691,   284,   285,   286,     0,   287,   288,
       0,     0,   692,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   693,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   694,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   695,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   696,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   697,   363,   364,   365,   366,   367,   368,
     369,   370,   698,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   699,     0,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,     0,
     700,   701,     0,     0,   397,   398,   702,   400,   703,   704,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,   705,     0,   414,   415,   416,   417,
     418,   419,   706,     0,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   707,     0,     0,     0,     0,
       0,     0,  1175,  1176,     0,     0,     0,     0,     0,     0,
       0,   711,     0,     0,     0,     0,   712,    88,  1520,   513,
     652,   653,   654,   655,   656,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108,   109,   657,   111,   658,   659,     0,   114,   115,   116,
     117,   118,   119,   660,   661,   120,   121,   662,   663,   124,
       0,   125,   126,   127,   128,   664,     0,   665,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     666,   667,   668,   669,   670,   671,   672,   151,   152,   153,
     154,   155,   156,   673,   674,   159,   675,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   676,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   677,   188,   189,   190,   191,   678,   679,   193,     0,
     194,   195,   680,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   681,   682,     0,
     683,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   684,   685,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   686,   271,   687,   273,   274,   275,   276,   688,   277,
     278,   279,   280,   689,   690,   282,   691,   284,   285,   286,
       0,   287,   288,     0,     0,   692,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   693,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   694,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   695,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     696,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   697,   363,   364,   365,
     366,   367,   368,   369,   370,   698,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     699,     0,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,     0,   700,   701,     0,     0,   397,   398,   702,
     400,   703,   704,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,   705,     0,   414,
     415,   416,   417,   418,   419,   706,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   707,     0,
       0,     0,     0,     0,     0,   708,   709,     0,     0,     0,
       0,     0,     0,     0,   711,     0,     0,     0,     0,   712,
      88,   651,   513,   652,   653,   654,   655,   656,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   657,   111,   658,   659,     0,
     114,   115,   116,   117,   118,   119,   660,   661,   120,   121,
     662,   663,   124,     0,   125,   126,   127,   128,   664,     0,
     665,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   666,   667,   668,   669,   670,   671,   672,
     151,   152,   153,   154,   155,   156,   673,   674,   159,   675,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   676,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   677,   188,   189,   190,   191,   678,
     679,   193,     0,   194,   195,   680,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     681,   682,     0,   683,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   684,   685,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   686,   271,   687,   273,   274,   275,
     276,   688,   277,   278,   279,   280,   689,   690,   282,   691,
     284,   285,   286,     0,   287,   288,     0,     0,   692,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   693,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   694,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   695,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   696,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   697,
     363,   364,   365,   366,   367,   368,   369,   370,   698,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   699,     0,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,     0,   700,   701,     0,     0,
     397,   398,   702,   400,   703,   704,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
     705,     0,   414,   415,   416,   417,   418,   419,   706,     0,
     421,   422,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   707,     0,     0,     0,     0,     0,     0,   708,   709,
       0,     0,     0,     0,     0,     0,     0,  2359,     0,     0,
       0,     0,   712,    88,   651,   513,   652,   653,   654,   655,
     656,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,   105,   106,   107,   108,  2547,   657,   111,
     658,   659,     0,   114,   115,   116,   117,   118,   119,   660,
     661,   120,   121,   662,   663,   124,     0,   125,   126,   127,
     128,   664,     0,   665,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,  2548,   666,   667,   668,   669,
     670,   671,   672,   151,   152,   153,   154,   155,   156,   673,
     674,   159,   675,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   676,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   677,   188,   189,
     190,   191,   678,   679,   193,     0,   194,   195,   680,   197,
       0,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   232,   681,   682,     0,   683,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   684,   685,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   686,   271,   687,
     273,   274,   275,   276,   688,   277,   278,   279,   280,   689,
     690,   282,   691,   284,   285,   286,     0,   287,   288,     0,
       0,   692,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   693,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   694,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   695,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   696,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   697,   363,   364,   365,   366,   367,   368,   369,
     370,   698,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   699,     0,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,     0,   700,
     701,     0,     0,   397,   398,   702,   400,   703,   704,   402,
     403,   404,   405,  2549,   407,   408,     0,     0,   409,   410,
     411,   412,   413,   705,     0,   414,   415,   416,   417,   418,
     419,   706,     0,   421,   422,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   707,     0,     0,     0,     0,     0,
       0,   708,   709,     0,     0,     0,     0,     0,     0,     0,
     711,     0,     0,     0,     0,   712,    88,   651,   513,   652,
     653,   654,   655,   656,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   657,   111,   658,   659,     0,   114,   115,   116,   117,
     118,   119,   660,   661,   120,   121,   662,   663,   124,     0,
     125,   126,   127,   128,   664,     0,   665,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,  2548,   666,
     667,   668,   669,   670,   671,   672,   151,   152,   153,   154,
     155,   156,   673,   674,   159,   675,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   676,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     677,   188,   189,   190,   191,   678,   679,   193,     0,   194,
     195,   680,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   681,   682,     0,   683,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   684,   685,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     686,   271,   687,   273,   274,   275,   276,   688,   277,   278,
     279,   280,   689,   690,   282,   691,   284,   285,   286,     0,
     287,   288,     0,     0,   692,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   693,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   694,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   695,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   696,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   697,   363,   364,   365,   366,
     367,   368,   369,   370,   698,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   699,
       0,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,     0,   700,   701,     0,     0,   397,   398,   702,   400,
     703,   704,   402,   403,   404,   405,  2549,   407,   408,     0,
       0,   409,   410,   411,   412,   413,   705,     0,   414,   415,
     416,   417,   418,   419,   706,     0,   421,   422,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   707,     0,     0,
       0,     0,     0,     0,   708,   709,     0,     0,     0,     0,
       0,     0,     0,   711,     0,     0,     0,     0,   712,    88,
     651,   513,   652,   653,   654,   655,   656,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,     0,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,   105,
     106,   107,   108,   109,   657,   111,   658,   659,     0,   114,
     115,   116,   117,   118,   119,   660,   661,   120,   121,   662,
     663,   124,     0,   125,   126,   127,   128,   664,     0,   665,
       0,   131,   132,   133,   134,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   666,   667,   668,   669,   670,   671,   672,   151,
     152,   153,   154,   155,   156,   673,   674,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   676,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   677,   188,   189,   190,   191,   678,   679,
     193,     0,   194,   195,   680,   197,     0,   198,     0,   199,
     200,     0,   201,   202,   203,   204,   205,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   232,   681,
     682,     0,   683,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   684,   685,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   686,   271,   687,   273,   274,   275,   276,
       0,   277,   278,   279,   280,   689,   690,   282,   691,   284,
     285,   286,     0,   287,   288,     0,     0,   692,   290,   291,
       0,     0,   292,   293,   294,   295,   296,   693,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     694,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   695,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   697,   363,
     364,   365,   366,   367,   368,   369,   370,   698,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   699,     0,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,     0,   700,   701,     0,     0,   397,
     398,   702,   400,   703,   704,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,   705,
       0,   414,   415,   416,   417,   418,   419,   706,     0,   421,
     422,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,     0,  1395,  1396,     0,
       0,    88,   651,   513,   652,   653,  1397,   655,   656,     0,
       0,   712,     0,     0,     0,     0,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,   105,   106,   107,   108,   109,   657,   111,   658,   659,
       0,   114,   115,   116,   117,   118,   119,   660,   661,   120,
     121,   662,   663,   124,     0,   125,   126,   127,   128,   664,
       0,   665,     0,   131,   132,   133,   134,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   666,   667,   668,   669,   670,   671,
     672,   151,   152,   153,   154,   155,   156,   673,   674,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   676,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   677,   188,   189,   190,   191,
     678,   679,   193,     0,   194,   195,   680,   197,     0,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     232,   681,   682,     0,   683,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   684,   685,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   686,   271,   687,   273,   274,
     275,   276,     0,   277,   278,   279,   280,   689,   690,   282,
     691,   284,   285,   286,     0,   287,   288,     0,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   693,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   694,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   695,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,  1509,  1510,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     697,   363,   364,   365,   366,   367,   368,   369,   370,   698,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   699,     0,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,     0,   700,   701,     0,
       0,   397,   398,   702,   400,   703,   704,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,   705,     0,   414,   415,   416,   417,   418,   419,   706,
       0,   421,   422,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,     0,  1511,
    1512,     0,     0,     0,     0,     0,     0,     0,  1397,     0,
       0,     0,     0,   712,    88,   651,   513,   652,   653,   654,
     655,   656,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   657,
     111,   658,   659,     0,   114,   115,   116,   117,   118,   119,
     660,   661,   120,   121,   662,   663,   124,     0,   125,   126,
     127,   128,   664,     0,   665,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   666,   667,   668,
     669,   670,   671,   672,   151,   152,   153,   154,   155,   156,
     673,   674,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   676,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   677,   188,
     189,   190,   191,   678,   679,   193,     0,   194,   195,   680,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   681,   682,     0,   683,     0,   236,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   684,
     685,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   686,   271,
     687,   273,   274,   275,   276,     0,   277,   278,   279,   280,
     689,   690,   282,   691,   284,   285,   286,     0,   287,   288,
       0,     0,   692,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   693,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   694,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   695,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   697,   363,   364,   365,   366,   367,   368,
     369,   370,   698,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   699,     0,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,     0,
     700,   701,     0,     0,   397,   398,   702,   400,   703,   704,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,   705,     0,   414,   415,   416,   417,
     418,   419,   706,     0,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,     0,  1395,  1396,     0,     0,     0,     0,     0,     0,
       0,  1397,     0,     0,     0,     0,   712,    88,   651,   513,
     652,   653,   654,   655,   656,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108, -1473,   657,   111,   658,   659,     0,   114,   115,   116,
     117,   118,   119,   660,   661,   120,   121,   662,   663,   124,
       0,   125,   126,   127,   128,   664,     0,   665,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,  2548,
     666,   667,   668,   669,   670,   671,   672,   151,   152,   153,
     154,   155,   156,   673,   674,   159,   675,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   676,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   677,   188,   189,   190,   191,   678,   679,   193,     0,
     194,   195,   680,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204, -1473,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214, -1473,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   681,   682,     0,
     683,     0,   236,     0,     0,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248, -1473,     0,   250,
     251,   252,   684,   685,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   686,   271,   687,   273,   274,   275,   276,     0,   277,
     278,     0,   280,   689,   690,   282,   691,   284,   285,   286,
       0,   287,   288,     0,     0,   692,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   693,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   694,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   695,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     696,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   697,   363,   364,   365,
     366,   367, -1473,   369,   370,   698,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     699,     0,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,     0,   700,   701,     0,     0,   397,   398,   702,
     400,   703,   704,   402,   403,   404,   405,  2549,   407,   408,
       0,     0,   409,   410,   411,   412,   413,   705,     0,   414,
     415,   416,   417,   418,   419,   706,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447, -1473,     0,
       0,     0,     0,     0,     0,   708,   709,     0,     0,     0,
       0,     0,     0,     0,   711,     0,     0,     0,     0,   712,
      88,   651,   513,   652,   653,   654,   655,   656,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,     0,   657,   111,   658,   659,     0,
     114,   115,   116,   117,   118,   119,   660,   661,   120,   121,
     662,   663,   124,     0,   125,   126,   127,   128,   664,     0,
     665,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   666,   667,   668,   669,   670,   671,   672,
     151,   152,   153,   154,   155,   156,   673,   674,   159,   675,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   676,   175,
     176,     0,   177,   178,   179,     0,   180,     0,   182,     0,
     183,   184,   185,   186,   677,   188,   189,   190,   191,   678,
     679,   193,     0,   194,   195,   680,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     681,   682,     0,   683,     0,   236,     0,     0,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
       0,     0,   250,   251,   252,   684,   685,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   686,   271,   687,   273,   274,   275,
     276,     0,   277,   278,     0,   280,   689,   690,   282,   691,
     284,   285,   286,     0,   287,   288,     0,     0,   692,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   693,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   694,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   695,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   696,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   697,
     363,   364,   365,   366,   367,     0,   369,   370,   698,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   699,     0,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,     0,   700,   701,     0,     0,
     397,   398,   702,   400,   703,   704,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
     705,     0,   414,   415,   416,   417,   418,   419,   706,     0,
     421,   422,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,     0,     0,     0,     0,     0,     0,     0,   708,   709,
     471,     0,     0,     0,     0,     0,     0,   711,     0,     0,
       0,     0,   712,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,  2035,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,  -291,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,  -291,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,  -291,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,  -291,
     241,   242,   243,   244,   245,     0,     0,   246,  -291,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,  -291,   272,   273,   274,   275,
     276,     0,   277,   278,     0,   280,     0,   281,   282,   283,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,   293,     0,   295,     0,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,  -291,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,     0,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,     0,
     390,   391,   392,   393,   394,     0,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     421,     0,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,     0,     0,     0,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   769,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,   661,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   664,     0,   665,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   666,   667,   668,
     669,   670,   671,   672,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   678,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,  1790,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   684,
     685,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,   278,   279,   280,
       0,   690,   282,   283,   284,   285,   286,     0,   287,   288,
       0,   538,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   693,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   694,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,  1791,   350,
     351,   352,   353,   354,   355,   356,   357,    24,   358,   359,
     360,   361,   362,   697,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   699,     0,   386,
     387,    28,   388,   389,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   702,   400,   703,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,   705,     0,   414,   415,   416,   417,
     418,   631,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,    31,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,    32,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1792,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,   661,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   664,     0,   665,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   666,   667,   668,   669,   670,   671,   672,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   678,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,  1790,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   684,   685,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,   278,   279,   280,     0,   690,   282,   283,   284,   285,
     286,     0,   287,   288,     0,   538,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   693,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   694,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,  1791,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   697,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   699,     0,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     702,   400,   703,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,   705,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,     0,
       0,    88,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1792,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,   661,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   664,
       0,   665,     0,   131,   132,   133,   134,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   666,   667,   668,   669,   670,   671,
     672,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     678,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,   200,     0,   201,   202,   203,   204,   205,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   684,   685,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,   277,   278,   279,   280,     0,   690,   282,
     283,   284,   285,   286,     0,   287,   288,     0,     0,   289,
     290,   291,     0,     0,   292,   293,   294,   295,   296,   693,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   694,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,  1791,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     697,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   699,     0,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   394,     0,   395,   396,     0,
       0,   397,   398,   702,   400,   703,     0,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,   705,     0,   414,   415,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,     0,     0,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,   661,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   664,     0,   665,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   666,   667,   668,
     669,   670,   671,   672,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   678,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   684,
     685,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,   278,   279,   280,
       0,   690,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   693,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   694,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   697,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   699,     0,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   702,   400,   703,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,   705,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,   630,   973,   513,
       0,     0,     0,   655,     0,     0,     0,     0,     0,     0,
       0,  2371,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,   130,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
       0,     0,     0,   150,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   974,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   975,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,   976,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,     0,     0,
     630,     0,     0,     0,     0,   977,   978,  1657,     0,     0,
       0,     0,     0,     0,  1658,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     3,     4,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    24,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,    28,   388,   389,
     390,   391,   392,   393,   394,     0,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   631,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,   427,     0,
      31,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,     0,     0,    32,   471,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
     272,   273,   274,   275,   276,     0,   277,   278,     0,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,     0,
     295,     0,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    24,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,     0,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,    28,   388,     0,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   631,   420,     0,   421,     0,   423,   424,   425,   426,
       0,     0,   427,     0,    31,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,    32,   471,     0,
    2211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,     0,   272,   273,   274,   275,   276,     0,
     277,   278,     0,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,     0,     0,   289,   290,   291,     0,
       0,   292,   293,     0,   295,     0,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,     0,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,     0,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,     0,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,     0,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,     0,
       0,   471,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2227,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,     0,   106,   107,   108,   109,   110,     0,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,   131,   132,   133,   134,   135,     0,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   147,   148,   149,     0,     0,     0,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,     0,     0,     0,   202,   203,   204,     0,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,     0,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,   239,
       0,   241,   242,   243,   244,   245,     0,     0,   246,     0,
     248,     0,     0,   250,   251,   252,     0,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,     0,   272,   273,   274,
     275,   276,     0,   277,   278,     0,   280,     0,   281,   282,
     283,   284,   285,   286,     0,   287,   288,     0,     0,   289,
     290,   291,     0,     0,   292,   293,     0,   295,     0,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,     0,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
       0,   390,   391,   392,   393,   394,     0,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
       0,   421,     0,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,     0,     0,   471,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   750,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
     272,   273,   274,   275,   276,     0,   277,   278,     0,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,     0,
     295,     0,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,     0,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,     0,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,     0,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,     0,     0,   471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1544,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,     0,   106,   107,
     108,   109,   110,     0,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,   131,
     132,   133,   134,   135,     0,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   147,   148,   149,
       0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,     0,     0,
       0,   202,   203,   204,     0,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,     0,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,   239,     0,   241,   242,   243,
     244,   245,     0,     0,   246,     0,   248,     0,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,     0,   272,   273,   274,   275,   276,     0,   277,
     278,     0,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,   293,     0,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,     0,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,     0,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,     0,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,   996,   973,   513,     0,     0,  1377,   655,
       0,     0,     0,     0,  2019,  1378,  1379,  1380,    89,    90,
      91,    92,    93,    94,    95,    96,   850,    97,    98,    99,
     851,   852,   853,   854,   855,   856,   857,   100,   101,   858,
     102,   103,   104,   105,   106,   107,   108,     0,   997,   111,
     998,   999,   859,   114,   115,   116,   117,   118,   119,   860,
     861,   120,   121,  1000,  1001,   124,   862,   125,   126,   127,
     128,     0,   863,   130,   864,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   865,   140,   141,   142,   143,   144,
     145,   866,   146,   147,   148,   149,   867,   868,   869,   150,
     870,   871,   872,   151,   152,   153,   154,   155,   156,  1002,
    1003,   159,   873,   160,   874,   161,   162,   163,   164,   165,
     166,   875,   167,   168,   169,   170,   171,   876,   877,   172,
     173,   676,   175,   176,   878,   177,   178,   179,   879,   180,
     181,   182,   880,   183,   184,   185,   186,     0,   188,   189,
     190,   191,     0,   881,   193,   882,   194,   195,  1004,   197,
     883,   198,   884,   199,   200,   885,   201,   202,   203,   204,
     205,   206,   886,   207,   887,     0,   209,   888,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   889,   220,
     221,   222,   223,   224,   225,   890,   226,   227,     0,   229,
     230,   231,   232,  1005,  1006,   891,  1007,   892,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   893,   894,
     246,   247,   248,   249,   895,   250,   251,   252,   896,   897,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,  1008,   271,  1009,
     273,   274,   275,  2119,   898,   277,   278,   279,   280,   899,
       0,   282,  1010,   284,   285,   286,   900,   287,   288,   901,
     902,  2120,   290,   291,   903,   904,   292,     0,   294,   295,
     296,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   905,   307,   308,     0,   310,   311,     0,   313,   314,
     315,   906,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1011,   326,   327,   328,   329,   907,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   908,
     342,   343,   344,   345,   346,   347,     0,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   909,   358,   359,   360,
     361,   362,   910,   363,  2121,   365,   366,   367,   368,   369,
     370,  1013,   372,   911,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   912,   386,   387,
     913,   388,   389,   390,   391,   392,   393,   394,   914,  1014,
    1015,   915,   916,   397,   398,     0,   400,     0,   917,   402,
     403,   404,   405,   406,   407,   408,   918,   919,   409,   410,
     411,   412,   413,   920,   921,   414,   415,   416,   417,   418,
       0,  1016,   922,   421,   422,   423,   424,   425,   426,   923,
     924,   427,   925,   926,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   445,   446,   447,     0,   471,     0,  1381,  1382,  1383,
    1377,  2122,  2123,  1386,  1387,  1388,  1389,  1378,  1379,  1380,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
       0,   272,   273,   274,   275,   276,     0,   277,   278,     0,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
       0,   295,     0,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
       0,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,     0,   390,   391,   392,   393,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,     0,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,     0,     0,     0,  1381,
    1382,  1383,     0,  1384,  1385,  1386,  1387,  1388,  1389,  1090,
       0,     0,  1091,     0,     0,     0,  1092,  1093,  1094,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1090,     0,
       0,  1091,     0,  1095,     0,  1092,  1093,  1094,     0,     0,
       0,  1097,     0,     0,     0,     0,     0,  1090,  1098,     0,
    1091,     0,  1095,     0,  1092,  1093,  1094,     0,     0,     0,
    1097,     0,     0,     0,     0,     0,     0,  1098,     0,     0,
       0,  1095,     0,  1099,     0,     0,     0,     0,     0,  1097,
       0,     0,     0,     0,     0,     0,  1098,     0,  1090,     0,
       0,  1091,  1099,     0,     0,  1092,  1093,  1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1099,  1095,     0,     0,     0,     0,     0,     0,     0,
    1097,     0,     0,     0,     0,     0,     0,  1098,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1090,     0,     0,
    1091,     0,     0,     0,  1092,  1093,  1094,     0,     0,     0,
       0,     0,  1099,     0,     0,     0,  1090,     0,     0,  1091,
       0,  1095,     0,  1092,  1093,  1094,     0,     0,     0,  1097,
       0,  1100,     0,     0,     0,     0,  1098,     0,     0,     0,
    1095,     0,     0,     0,  1101,     0,     0,     0,  1097,  1102,
    1100,     0,     0,     0,     0,  1098,     0,     0,     0,     0,
       0,  1099,     0,  1101,     0,     0,     0,     0,  1102,  1100,
    1103,  1104,     0,     0,     0,     0,     0,     0,     0,     0,
    1099,     0,  1101,     0,  1105,     0,     0,  1102,     0,  1103,
    1104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1105,     0,     0,     0,     0,  1103,  1104,
    1100,     0,     0,     0,     0,  1106,     0,     0,  1107,     0,
       0,     0,  1105,  1101,     0,     0,     0,     0,  1102,     0,
       0,     0,  1108,     0,  1106,  1109,     0,  1107,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1103,
    1104,  1108,     0,  1106,  1109,     0,  1107,     0,     0,  1100,
       0,     0,     0,  1105,     0,     0,     0,     0,     0,     0,
    1108,     0,  1101,  1109,     0,     0,     0,  1102,  1100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1101,     0,     0,  1106,     0,  1102,  1107,  1103,  1104,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,  1105,     0,  1109,     0,     0,  1103,  1104,  1110,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1105,     0,     0,     0,     0,     0,     0,  1110,     0,
       0,     0,     0,  1106,     0,     0,  1107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1110,     0,     0,
    1108,     0,  1106,  1109,     0,  1107,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1108,
       0,     0,  1109,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1110,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1111,     0,     0,  1112,  1113,
    1114,     0,  1115,  1116,  1117,  1118,  1119,  1120,     0,     0,
       0,     0,  1996,     0,  1111,     0,     0,  1112,  1113,  1114,
       0,  1115,  1116,  1117,  1118,  1119,  1120,  1110,     0,     0,
       0,  2084,     0,  1111,     0,     0,  1112,  1113,  1114,     0,
    1115,  1116,  1117,  1118,  1119,  1120,  1110,     0,  1090,     0,
    2179,  1091,     0,     0,     0,  1092,  1093,  1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1095,     0,  1111,     0,     0,  1112,  1113,  1114,
    1097,  1115,  1116,  1117,  1118,  1119,  1120,  1098,     0,     0,
       0,  2198,     0,     0,     0,     0,     0,  1090,     0,     0,
    1091,     0,     0,     0,  1092,  1093,  1094,     0,     0,     0,
       0,     0,  1099,     0,     0,     0,     0,     0,     0,     0,
       0,  1095,     0,  1111,     0,     0,  1112,  1113,  1114,  1097,
    1115,  1116,  1117,  1118,  1119,  1120,  1098,     0,     0,     0,
    2336,     0,  1111,     0,     0,  1112,  1113,  1114,     0,  1115,
    1116,  1117,  1118,  1119,  1120,     0,     0,  1090,     0,  2518,
    1091,  1099,     0,     0,  1092,  1093,  1094,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1095,     0,     0,     0,     0,     0,     0,     0,  1097,
       0,     0,     0,     0,     0,     0,  1098,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1099,     0,  1101,     0,     0,     0,     0,  1102,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1103,
    1104,     0,     0,     0,     0,     0,     0,     0,     0,  1100,
       0,     0,     0,  1105,     0,     0,     0,     0,     0,     0,
       0,     0,  1101,     0,     0,     0,     0,  1102,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1106,     0,     0,  1107,  1103,  1104,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,  1105,     0,  1109,     0,     0,     0,     0,  1100,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1101,     0,     0,     0,     0,  1102,     0,     0,
       0,     0,     0,  1106,     0,     0,  1107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1108,     0,     0,  1109,     0,     0,     0,     0,     0,     0,
       0,     0,  1105,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1110,     0,
       0,     0,     0,  1106,     0,     0,  1107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1108,     0,     0,  1109,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1110,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1111,     0,     0,  1112,  1113,  1114,
       0,  1115,  1116,  1117,  1118,  1119,  1120,  1110,     0,     0,
       0,  2530,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1111,     0,     0,  1112,  1113,  1114,     0,
    1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,     0,
    2623,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1111,   849,     0,  1112,  1113,  1114,     0,
    1115,  1116,  1117,  1118,  1119,  1120,     0,     0,  1264,    89,
      90,    91,    92,    93,    94,    95,    96,   850,    97,    98,
      99,   851,   852,   853,   854,   855,   856,   857,   100,   101,
     858,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   859,   114,   115,   116,   117,   118,   119,
     860,   861,   120,   121,   122,   123,   124,   862,   125,   126,
     127,   128,   129,   863,   130,   864,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   865,   140,   141,   142,   143,
     144,   145,   866,   146,   147,   148,   149,   867,   868,   869,
     150,   870,   871,   872,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   873,   160,   874,   161,   162,   163,   164,
     165,   166,   875,   167,   168,   169,   170,   171,   876,   877,
     172,   173,   174,   175,   176,   878,   177,   178,   179,   879,
     180,   181,   182,   880,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   881,   193,   882,   194,   195,   196,
     197,   883,   198,   884,   199,   200,   885,   201,   202,   203,
     204,   205,   206,   886,   207,   887,   208,   209,   888,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   889,
     220,   221,   222,   223,   224,   225,   890,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   891,   235,   892,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   893,
     894,   246,   247,   248,   249,   895,   250,   251,   252,   896,
     897,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   898,   277,   278,   279,   280,
     899,   281,   282,   283,   284,   285,   286,   900,   287,   288,
     901,   902,   289,   290,   291,   903,   904,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   905,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   906,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   907,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     908,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   909,   358,   359,
     360,   361,   362,   910,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   911,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   912,   386,
     387,   913,   388,   389,   390,   391,   392,   393,   394,   914,
     395,   396,   915,   916,   397,   398,   399,   400,   401,   917,
     402,   403,   404,   405,   406,   407,   408,   918,   919,   409,
     410,   411,   412,   413,   920,   921,   414,   415,   416,   417,
     418,   419,   420,   922,   421,   422,   423,   424,   425,   426,
     923,   924,   427,   925,   926,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   471,     0,     0,     0,     0,
       0,     0,     0,     0,   927,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
       0,   272,   273,   274,   275,   276,     0,   277,   278,     0,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
       0,   295,     0,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
       0,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,     0,   390,   391,   392,   393,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,     0,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   630,   973,   513,     0,
       0,     0,   655,     0,     0,  1939,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,   129,     0,   130,     0,   131,   132,
     133,   134,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,     0,
       0,     0,   150,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   157,   158,   159,  1144,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   974,   193,     0,   194,
     195,   196,   197,     0,   198,     0,   199,   200,     0,   201,
     202,   203,   204,   205,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,     0,   246,   247,   248,   249,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   975,     0,   289,   290,   291,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,     0,   395,   396,     0,     0,   397,   398,   399,   400,
     401,   976,   402,   403,   404,   405,   406,   407,   408,     0,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   630,   973,   513,
       0,     0,     0,   655,   977,   978,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,   130,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
       0,     0,     0,   150,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,  1146,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   974,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   975,     0,   289,   290,   291,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,   976,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   630,   973,
     513,     0,     0,     0,   655,   977,   978,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,   130,     0,
     131,   132,   133,   134,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,     0,     0,     0,   150,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   974,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,   200,
       0,   201,   202,   203,   204,   205,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,     0,   246,   247,   248,   249,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   975,     0,   289,   290,   291,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,   976,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,     0,
       0,  1090,     0,     0,  1091,     0,   977,   978,  1092,  1093,
    1094,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1095,     0,     0,     0,  1505,
       0,     0,     0,  1097,  1090,     0,     0,  1091,     0,     0,
    1098,  1092,  1093,  1094,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1090,     0,     0,  1091,     0,  1095,     0,
    1092,  1093,  1094,     0,     0,  1099,  1097,     0,     0,     0,
       0,     0,     0,  1098,     0,     0,     0,  1095,     0,     0,
       0,     0,     0,     0,     0,  1097,  1090,     0,     0,  1091,
       0,     0,  1098,  1092,  1093,  1094,     0,     0,  1099,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1095,     0,     0,  1692,  1506,     0,     0,  1099,  1097,     0,
       0,     0,     0,  1090,     0,  1098,  1091,     0,     0,     0,
    1092,  1093,  1094,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1095,     0,     0,
    1099,     0,     0,     0,     0,  1097,     0,     0,     0,     0,
       0,     0,  1098,  1100,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1101,     0,     0,     0,
       0,  1102,     0,     0,     0,     0,  1732,  1099,     0,     0,
       0,  1733,     0,     0,     0,     0,  1100,     0,     0,     0,
       0,     0,  1103,  1104,  2585,     0,     0,     0,     0,  1101,
       0,     0,     0,     0,  1102,  1100,  1105,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1101,     0,
       0,     0,     0,  1102,     0,  1103,  1104,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1106,  1100,  1105,
    1107,     0,     0,     0,  1103,  1104,     0,     0,     0,     0,
       0,  1101,     0,     0,  1108,     0,  1102,  1109,  1105,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,  1107,     0,  1100,     0,  1103,  1104,     0,
       0,     0,     0,     0,     0,     0,     0,  1108,  1101,  1106,
    1109,  1105,  1107,  1102,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1108,     0,     0,  1109,
       0,     0,     0,     0,  1103,  1104,     0,     0,     0,     0,
       0,     0,  1106,     0,     0,  1107,     0,     0,  1105,     0,
       0,  2586,     0,     0,     0,     0,     0,     0,     0,  1108,
       0,  1110,  1109,  1090,     0,     0,  1091,     0,     0,     0,
    1092,  1093,  1094,     0,     0,     0,     0,     0,     0,  1106,
       0,     0,  1107,     0,     0,     0,     0,  1095,     0,     0,
    1741,     0,     0,     0,  1110,  1097,  1108,     0,     0,  1109,
       0,     0,  1098,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1110,     0,     0,  1706,  1507,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1099,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1110,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1111,     0,     0,
    1112,  1113,  1114,     0,  1115,  1116,  1117,  1118,  1119,  1120,
       0,     0,  1090,     0,     0,  1091,     0,     0,     0,  1092,
    1093,  1094,     0,  1110,     0,     0,     0,     0,     0,     0,
    1111,     0,     0,  1112,  1113,  1114,  1095,  1115,  1116,  1117,
    1118,  1119,  1120,     0,  1097,     0,     0,     0,     0,  1111,
       0,  1098,  1112,  1113,  1114,     0,  1115,  1116,  1117,  1118,
    1119,  1120,     0,     0,     0,  1100,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1099,     0,  1101,     0,
       0,     0,  1111,  1102,     0,  1112,  1113,  1114,     0,  1115,
    1116,  1117,  1118,  1119,  1120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1103,  1104,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1105,  1111,
       0,     0,  1112,  1113,  1114,     0,  1115,  1116,  1117,  1118,
    1119,  1120,  1090,     0,     0,  1091,     0,     0,     0,  1092,
    1093,  1094,     0,     0,     0,     0,     0,     0,     0,  1106,
       0,     0,  1107,     0,     0,     0,  1095,     0,     0,     0,
       0,     0,     0,     0,  1097,     0,  1108,     0,     0,  1109,
    1090,  1098,     0,  1091,  1100,     0,     0,  1092,  1093,  1094,
       0,     0,     0,     0,     0,     0,     0,  1101,     0,     0,
       0,     0,  1102,     0,  1095,     0,  1099,     0,     0,     0,
       0,     0,  1097,     0,     0,     0,     0,     0,  1090,  1098,
       0,  1091,     0,  1103,  1104,  1092,  1093,  1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1105,     0,     0,
       0,     0,  1095,     0,  1099,     0,     0,     0,     0,     0,
    1097,     0,     0,     0,     0,     0,     0,  1098,     0,     0,
       0,     0,     0,  1110,     0,     0,     0,     0,  1106,     0,
       0,  1107,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1099,     0,     0,  1108,     0,     0,  1109,     0,
       0,     0,     0,     0,  1090,     0,     0,  1091,     0,  1746,
       0,  1092,  1093,  1094,  1100,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1101,     0,     0,
       0,     0,  1102,     0,     0,     0,  1097,     0,     0,     0,
       0,     0,     0,  1098,     0,     0,     0,     0,     0,     0,
       0,     0,  1100,  1103,  1104,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1101,     0,  1105,  1099,  1111,
    1102,     0,  1112,  1113,  1114,     0,  1115,  1116,  1117,  1118,
    1119,  1120,  1110,     0,     0,     0,     0,     0,     0,     0,
    1100,  1103,  1104,     0,     0,     0,     0,     0,  1106,     0,
       0,  1107,     0,  1101,     0,  1105,     0,     0,  1102,     0,
       0,     0,  1957,     0,     0,  1108,     0,     0,  1109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1103,
    1104,     0,     0,     0,     0,     0,  1106,     0,     0,  1107,
       0,     0,     0,  1105,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1108,     0,     0,  1109,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1100,     0,     0,     0,
       0,     0,     0,     0,  1106,     0,     0,  1107,  1111,  1101,
       0,  1112,  1113,  1114,  1102,  1115,  1116,  1117,  1118,  1119,
    1120,  1108,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1110,     0,     0,  1103,  1104,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1105,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1110,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,     0,  1107,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1108,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1110,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1111,     0,
       0,  1112,  1113,  1114,     0,  1115,  1116,  1117,  1118,  1119,
    1120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1111,     0,     0,  1112,
    1113,  1114,     0,  1115,  1116,  1117,  1118,  1119,  1120,     0,
       0,     0,     0,     0,  1110,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1111,     0,     0,  1112,  1113,  1114,
       0,  1115,  1116,  1117,  1118,  1119,  1120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   849,
    1111,  1430,     0,  1112,  1113,  1114,     0,  1115,  1116,  1117,
    1118,  1119,  1120,     0,    89,    90,    91,    92,    93,    94,
      95,    96,   850,    97,    98,    99,   851,   852,   853,   854,
     855,   856,   857,   100,   101,   858,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   859,   114,
     115,   116,   117,   118,   119,   860,   861,   120,   121,   122,
     123,   124,   862,   125,   126,   127,   128,   129,   863,   130,
     864,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     865,   140,   141,   142,   143,   144,   145,   866,   146,   147,
     148,   149,   867,   868,   869,   150,   870,   871,   872,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   873,   160,
     874,   161,   162,   163,   164,   165,   166,   875,   167,   168,
     169,   170,   171,   876,   877,   172,   173,   174,   175,   176,
     878,   177,   178,   179,   879,   180,   181,   182,   880,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   881,
     193,   882,   194,   195,   196,   197,   883,   198,   884,   199,
     200,   885,   201,   202,   203,   204,   205,   206,   886,   207,
     887,   208,   209,   888,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   889,   220,   221,   222,   223,   224,
     225,   890,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   891,   235,   892,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   893,   894,   246,   247,   248,   249,
     895,   250,   251,   252,   896,   897,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     898,   277,   278,   279,   280,   899,   281,   282,   283,   284,
     285,   286,   900,   287,   288,   901,   902,   289,   290,   291,
     903,   904,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   905,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   906,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   907,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   908,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   909,   358,   359,   360,   361,   362,   910,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   911,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   912,   386,   387,   913,   388,   389,   390,
     391,   392,   393,   394,   914,   395,   396,   915,   916,   397,
     398,   399,   400,   401,   917,   402,   403,   404,   405,   406,
     407,   408,   918,   919,   409,   410,   411,   412,   413,   920,
     921,   414,   415,   416,   417,   418,   419,   420,   922,   421,
     422,   423,   424,   425,   426,   923,   924,   427,   925,   926,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     849,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   850,    97,    98,    99,   851,   852,   853,
     854,   855,   856,   857,   100,   101,   858,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   859,
     114,   115,   116,   117,   118,   119,   860,   861,   120,   121,
     122,   123,   124,   862,   125,   126,   127,   128,   129,   863,
     130,   864,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   865,   140,   141,   142,   143,   144,   145,   866,   146,
     147,   148,   149,   867,   868,   869,   150,   870,   871,   872,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   873,
     160,   874,   161,   162,   163,   164,   165,   166,   875,   167,
     168,   169,   170,   171,   876,   877,   172,   173,   174,   175,
     176,   878,   177,   178,   179,   879,   180,   181,   182,   880,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     881,   193,   882,   194,   195,   196,   197,   883,   198,   884,
     199,   200,   885,   201,   202,   203,   204,   205,   206,   886,
     207,   887,   208,   209,   888,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   889,   220,   221,   222,   223,
     224,   225,   890,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   891,   235,   892,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   893,   894,   246,   247,   248,
     249,   895,   250,   251,   252,   896,   897,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   898,   277,   278,   279,   280,   899,   281,   282,   283,
     284,   285,   286,   900,   287,   288,   901,   902,   289,   290,
     291,   903,   904,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   905,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   906,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   907,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   908,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   909,   358,   359,   360,   361,   362,   910,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     911,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   912,   386,   387,   913,   388,   389,
     390,   391,   392,   393,   394,   914,   395,   396,   915,   916,
     397,   398,   399,   400,   401,   917,   402,   403,   404,   405,
     406,   407,   408,   918,   919,   409,   410,   411,   412,   413,
     920,   921,   414,   415,   416,   417,   418,   419,   420,   922,
     421,   422,   423,   424,   425,   426,   923,   924,   427,   925,
     926,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   849,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    1568,    94,    95,    96,   850,    97,    98,    99,   851,   852,
     853,   854,   855,   856,   857,   100,   101,   858,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     859,   114,   115,   116,   117,   118,   119,   860,   861,   120,
     121,   122,   123,   124,   862,   125,   126,   127,   128,   129,
     863,   130,   864,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   865,   140,   141,   142,   143,   144,   145,   866,
     146,   147,   148,   149,   867,   868,   869,   150,   870,   871,
     872,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     873,   160,   874,   161,   162,   163,   164,   165,   166,   875,
     167,   168,   169,   170,   171,   876,   877,   172,   173,   174,
    1569,   176,   878,   177,   178,   179,   879,   180,   181,   182,
     880,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   881,   193,   882,   194,   195,   196,   197,   883,   198,
     884,   199,   200,   885,   201,   202,   203,   204,   205,   206,
     886,   207,   887,   208,   209,   888,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   889,   220,   221,   222,
     223,   224,   225,   890,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   891,   235,   892,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   893,   894,   246,   247,
     248,   249,   895,   250,   251,   252,   896,   897,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   898,   277,   278,   279,   280,   899,   281,   282,
     283,   284,   285,   286,   900,   287,   288,   901,   902,   289,
     290,   291,   903,   904,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   905,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   906,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   907,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   908,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   909,   358,   359,   360,   361,   362,
     910,  1570,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   911,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   912,   386,   387,   913,   388,
     389,   390,   391,   392,   393,   394,   914,   395,   396,   915,
     916,   397,   398,   399,   400,   401,   917,   402,   403,   404,
     405,   406,   407,   408,   918,   919,   409,   410,   411,   412,
     413,   920,   921,   414,   415,   416,   417,   418,   419,   420,
     922,   421,   422,   423,   424,   425,   426,   923,   924,   427,
     925,   926,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    88,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,   661,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     664,     0,   665,     0,   131,   132,   133,   134,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   666,   667,   668,   669,   670,
     671,   672,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   678,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,   200,     0,   201,   202,   203,   204,   205,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   684,   685,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,   277,   278,   279,   280,     0,   690,
     282,   283,   284,   285,   286,     0,   287,   288,     0,     0,
     289,   290,   291,     0,     0,   292,   293,   294,   295,   296,
     693,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   694,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   697,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   699,     0,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,     0,   395,   396,
       0,     0,   397,   398,   702,   400,   703,     0,   402,   403,
     404,   405,   406,   407,   408,     0,     0,   409,   410,   411,
     412,   413,   705,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   630,     0,   513,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,     0,   114,   115,   116,   117,   118,   119,     0,
       0,   120,   121,   122,   123,   124,     0,   125,   126,   127,
     128,   129,     0,   130,     0,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,     0,     0,     0,   150,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   974,   193,     0,   194,   195,   196,   197,
       0,   198,     0,   199,   200,     0,   201,   202,   203,   204,
     205,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,     0,
     246,   247,   248,   249,     0,   250,   251,   252,     0,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   975,
       0,   289,   290,   291,     0,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,     0,   395,
     396,     0,     0,   397,   398,   399,   400,   401,   976,   402,
     403,   404,   405,   406,   407,   408,     0,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   630,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     3,     4,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,   130,     0,   131,   132,   133,   134,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,     0,     0,     0,
     150,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,   200,     0,   201,   202,   203,
     204,   205,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
       0,   246,   247,   248,   249,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    88,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,   130,     0,   131,   132,   133,
     134,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,     0,     0,
       0,   150,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,   200,     0,   201,   202,
     203,   204,   205,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,     0,   246,   247,   248,   249,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,   277,   278,   279,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   471,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,     0,   106,   107,   108,
     109,   110,     0,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,  1202,
     125,   126,   127,   128,   129,     0,     0,  1203,   131,   132,
     133,   134,   135,     0,   137,   138,   139,  1204,   140,   141,
     142,   143,   144,   145,     0,     0,   147,   148,   149,     0,
       0,     0,     0,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,   198,  1205,   199,     0,     0,     0,
     202,   203,   204,     0,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,  1206,     0,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,   239,     0,   241,   242,   243,   244,
     245,     0,     0,   246,     0,   248,     0,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,     0,   272,   273,   274,   275,   276,     0,   277,   278,
       0,   280,     0,   281,   282,   283,   284,   285,   286,     0,
     287,   288,     0,     0,   289,   290,   291,     0,     0,   292,
     293,     0,   295,     0,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,  1207,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,     0,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,     0,   390,   391,   392,   393,
     394,     0,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
    1208,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   421,     0,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,     0,   106,   107,
     108,   109,   110,     0,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
    1202,   125,   126,   127,   128,   129,     0,     0,     0,   131,
     132,   133,   134,   135,     0,   137,   138,   139,  1204,   140,
     141,   142,   143,   144,   145,     0,     0,   147,   148,   149,
       0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,   198,  1205,   199,     0,     0,
       0,   202,   203,   204,     0,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,     0,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,   239,     0,   241,   242,   243,
     244,   245,     0,     0,   246,     0,   248,  1633,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,     0,   272,   273,   274,   275,   276,     0,   277,
     278,     0,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,   293,     0,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,  1207,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,     0,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,     0,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,  1208,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,     0,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   471,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     3,     4,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,     0,   272,   273,   274,   275,   276,     0,
     277,   278,     0,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,     0,     0,   289,   290,   291,     0,
       0,   292,   293,     0,   295,     0,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,     0,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,     0,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,     0,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,     0,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   471,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,   472,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,     0,
     106,   107,   108,   109,   110,     0,   112,   113,     0,   114,
     115,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,   131,   132,   133,   134,   135,     0,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   147,
     148,   149,     0,     0,     0,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,   198,     0,   199,
       0,     0,     0,   202,   203,   204,     0,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,     0,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,   239,     0,   241,
     242,   243,   244,   245,     0,     0,   246,     0,   248,     0,
       0,   250,   251,   252,     0,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,     0,   272,   273,   274,   275,   276,
       0,   277,   278,     0,   280,     0,   281,   282,   283,   284,
     285,   286,     0,   287,   288,     0,     0,   289,   290,   291,
       0,     0,   292,   293,     0,   295,     0,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,   311,   312,   473,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,     0,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,     0,   390,
     391,   392,   393,   394,     0,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,     0,   421,
       0,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     471,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,   518,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,     0,   272,   273,   274,   275,
     276,     0,   277,   278,     0,   280,     0,   281,   282,   283,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,   293,     0,   295,     0,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,     0,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,     0,
     390,   391,   392,   393,   394,     0,   519,   396,     0,     0,
     520,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     421,     0,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   471,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,     0,   106,   107,   108,   109,   110,     0,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,   131,   132,   133,   134,   135,     0,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   147,   148,   149,     0,     0,     0,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,     0,     0,     0,   202,   203,   204,     0,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,     0,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,   239,
       0,   241,   242,   243,   244,   245,     0,     0,   246,     0,
     248,     0,     0,   250,   251,   252,     0,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,     0,   272,   273,   274,
     275,   276,     0,   277,   278,     0,   280,     0,   281,   282,
     283,   284,   285,   286,     0,   287,   288,     0,   538,   289,
     290,   291,     0,     0,   292,   293,     0,   295,     0,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,     0,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
       0,   390,   391,   392,   393,   394,     0,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
       0,   421,     0,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   471,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,   568,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,     0,   106,   107,   108,   109,   110,     0,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,   131,   132,   133,   134,   135,     0,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   147,   148,   149,     0,     0,     0,     0,     0,
       0,     0,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,     0,     0,     0,   202,   203,   204,     0,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,     0,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
     239,     0,   241,   242,   243,   244,   245,     0,     0,   246,
       0,   248,     0,     0,   250,   251,   252,     0,     0,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,     0,   272,   273,
     274,   275,   276,     0,   277,   278,     0,   280,     0,   281,
     282,   283,   284,   285,   286,     0,   287,   288,     0,     0,
     289,   290,   291,     0,     0,   292,   293,     0,   295,     0,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,     0,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,     0,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,     0,   390,   391,   392,   393,   394,     0,   569,   396,
       0,     0,   570,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,     0,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   421,     0,   423,   424,   425,   426,     0,     0,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   471,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,     0,   106,   107,   108,   109,   110,     0,
     112,   113,     0,   114,   115,   116,   117,   118,   119,     0,
       0,   120,   121,   122,   123,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,   131,   132,   133,   134,   135,
       0,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   147,   148,   149,     0,     0,     0,     0,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,   198,     0,   199,     0,     0,     0,   202,   203,   204,
       0,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   580,     0,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,   239,     0,   241,   242,   243,   244,   245,     0,     0,
     246,     0,   248,     0,     0,   250,   251,   252,     0,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,     0,   272,
     273,   274,   275,   276,     0,   277,   278,     0,   280,     0,
     281,   282,   283,   284,   285,   286,     0,   287,   288,     0,
     538,   289,   290,   291,     0,     0,   292,   293,     0,   295,
       0,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,     0,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,     0,   390,   391,   392,   393,   394,     0,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,   418,
     419,   420,     0,   421,     0,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   471,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,   609,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   214,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
     272,   273,   274,   275,   276,     0,   277,   278,     0,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,     0,
     295,     0,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,     0,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,     0,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,     0,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,  1481,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   214,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,  1482,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
       0,   272,   273,   274,   275,   276,     0,   277,   278,     0,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
       0,   295,     0,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
       0,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,  1483,   388,     0,   390,  1484,   392,  1485,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,  1486,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,     0,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   471,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,  2035,     0,
     100,   101,     0,   102,   103,   104,     0,   106,   107,   108,
     109,   110,     0,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,   131,   132,
     133,   134,   135,     0,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   147,   148,   149,     0,
       0,     0,     0,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,   198,     0,   199,     0,     0,     0,
     202,   203,   204,     0,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   214,     0,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,   239,     0,   241,   242,   243,   244,
     245,     0,     0,   246,     0,   248,     0,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,     0,   272,   273,   274,   275,   276,     0,   277,   278,
       0,   280,     0,   281,   282,   283,   284,   285,   286,     0,
     287,   288,     0,     0,   289,   290,   291,     0,     0,   292,
     293,     0,   295,     0,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,     0,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,     0,   390,   391,   392,   393,
     394,     0,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   421,     0,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,  2049,
       0,   100,   101,     0,   102,   103,   104,     0,   106,   107,
     108,   109,   110,     0,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,   131,
     132,   133,   134,   135,     0,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   147,   148,   149,
       0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,     0,     0,
       0,   202,   203,   204,     0,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   214,     0,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,   239,     0,   241,   242,   243,
     244,   245,     0,     0,   246,     0,   248,     0,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,     0,   272,   273,   274,   275,   276,     0,   277,
     278,     0,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,   293,     0,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,     0,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,     0,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,     0,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   471,     0,
    2211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   214,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,     0,   272,   273,   274,   275,   276,     0,
     277,   278,     0,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,     0,     0,   289,   290,   291,     0,
       0,   292,   293,     0,   295,     0,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,     0,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,     0,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,     0,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,     0,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   471,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,     0,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,     0,
     106,   107,   108,   109,   110,     0,   112,   113,     0,   114,
     115,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,   131,   132,   133,   134,   135,     0,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   147,
     148,   149,     0,     0,     0,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,   198,     0,   199,
       0,     0,     0,   202,   203,   204,     0,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,     0,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,   239,     0,   241,
     242,   243,   244,   245,     0,     0,   246,     0,   248,     0,
       0,   250,   251,   252,     0,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,     0,   272,   273,   274,   275,   276,
       0,   277,   278,     0,   280,     0,   281,   282,   283,   284,
     285,   286,     0,   287,   288,     0,     0,   289,   290,   291,
       0,     0,   292,   293,     0,   295,     0,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,     0,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,     0,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,     0,   390,
     391,   392,   393,   394,     0,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,     0,   421,
       0,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     471,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   214,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   530,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,     0,   272,   273,   274,   275,
     276,     0,   277,   278,     0,   280,     0,   281,   282,   283,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,   293,     0,   295,     0,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   531,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   532,     0,
     363,   364,   365,   366,   367,     0,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,     0,
     390,   391,   392,   393,   394,     0,   533,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     421,     0,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   471,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,     0,   106,   107,   108,   109,   110,     0,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,   131,   132,   133,   134,   135,     0,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   147,   148,   149,     0,     0,     0,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,     0,     0,     0,   202,   203,   204,     0,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     214,     0,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,   239,
       0,   241,   242,   243,   244,   245,     0,     0,   246,     0,
     248,     0,     0,   250,   251,   252,     0,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,     0,   272,   273,   274,
     275,   276,     0,   277,   278,     0,   280,     0,   281,   282,
     283,   284,   285,   286,     0,   287,   288,     0,     0,   289,
     290,   291,     0,     0,   292,   293,     0,   295,     0,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   546,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,     0,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
       0,   390,   391,   392,   393,   394,     0,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
       0,   421,     0,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   471,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,     0,     0,   100,   101,     0,   102,
     103,   104,     0,   106,   107,   108,   109,   110,     0,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,   131,   132,   133,   134,   135,     0,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   147,   148,   149,     0,     0,     0,     0,     0,
       0,     0,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,     0,     0,     0,   202,   203,   204,     0,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   575,     0,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
     239,     0,   241,   242,   243,   244,   245,     0,     0,   246,
       0,   248,     0,     0,   250,   251,   252,     0,     0,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,     0,   272,   273,
     274,   275,   276,     0,   277,   278,     0,   280,     0,   281,
     282,   283,   284,   285,   286,     0,   287,   288,     0,     0,
     289,   290,   291,     0,     0,   292,   293,     0,   295,     0,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,     0,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,   363,   364,   365,   366,   367,     0,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,     0,   390,   391,   392,   393,   394,     0,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,     0,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   421,     0,   423,   424,   425,   426,     0,     0,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   471,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,     0,   106,   107,   108,   109,   110,     0,
     112,   113,     0,   114,   115,   116,   117,   118,   119,     0,
       0,   120,   121,   122,   123,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,   131,   132,   133,   134,   135,
       0,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   147,   148,   149,     0,     0,     0,     0,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,   198,     0,   199,     0,     0,     0,   202,   203,   204,
       0,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,   578,     0,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,   239,     0,   241,   242,   243,   244,   245,     0,     0,
     246,     0,   248,     0,     0,   250,   251,   252,     0,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,     0,   272,
     273,   274,   275,   276,     0,   277,   278,     0,   280,     0,
     281,   282,   283,   284,   285,   286,     0,   287,   288,     0,
       0,   289,   290,   291,     0,     0,   292,   293,     0,   295,
       0,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,     0,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,     0,   390,   391,   392,   393,   394,     0,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,   418,
     419,   420,     0,   421,     0,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   471,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,   582,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
     272,   273,   274,   275,   276,     0,   277,   278,     0,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,     0,
     295,     0,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,     0,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,     0,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,     0,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,   602,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
       0,   272,   273,   274,   275,   276,     0,   277,   278,     0,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
       0,   295,     0,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
       0,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,     0,   390,   391,   392,   393,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,     0,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   471,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,     0,   106,   107,   108,
     109,   110,     0,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,   131,   132,
     133,   134,   135,     0,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   147,   148,   149,     0,
       0,     0,     0,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,   198,     0,   199,     0,     0,     0,
     202,   203,   204,     0,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,   617,     0,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,   239,     0,   241,   242,   243,   244,
     245,     0,     0,   246,     0,   248,     0,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,     0,   272,   273,   274,   275,   276,     0,   277,   278,
       0,   280,     0,   281,   282,   283,   284,   285,   286,     0,
     287,   288,     0,     0,   289,   290,   291,     0,     0,   292,
     293,     0,   295,     0,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,     0,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,     0,   390,   391,   392,   393,
     394,     0,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   421,     0,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,     0,   106,   107,
     108,   109,   110,     0,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,   131,
     132,   133,   134,   135,     0,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   147,   148,   149,
       0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,     0,     0,
       0,   202,   203,   204,     0,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,   621,     0,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,   239,     0,   241,   242,   243,
     244,   245,     0,     0,   246,     0,   248,     0,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,     0,   272,   273,   274,   275,   276,     0,   277,
     278,     0,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,   293,     0,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,     0,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,     0,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,     0,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   471,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,   624,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,     0,   272,   273,   274,   275,   276,     0,
     277,   278,     0,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,     0,     0,   289,   290,   291,     0,
       0,   292,   293,     0,   295,     0,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,     0,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,     0,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,     0,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,     0,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   471,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,     0,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,     0,
     106,   107,   108,   109,   110,     0,   112,   113,     0,   114,
     115,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,   131,   132,   133,   134,   135,     0,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   147,
     148,   149,     0,     0,     0,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,   198,     0,   199,
       0,     0,     0,   202,   203,   204,     0,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,     0,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,   239,     0,   241,
     242,   243,   244,   245,     0,     0,   246,     0,   248,     0,
       0,   250,   251,   252,     0,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,     0,   272,   273,   274,   275,   276,
       0,   277,   278,     0,   280,     0,   281,   282,   283,   284,
     285,   286,     0,   287,   288,     0,     0,   289,   290,   291,
       0,     0,   292,   293,     0,   295,     0,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,     0,   345,
     346,   347,   348,   349,   350,   351,   531,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,     0,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,     0,   390,
     391,   392,   393,   394,     0,   533,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,     0,   421,
       0,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     471,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
       0,   106,   107,   108,   109,   110,     0,   112,   113,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,   131,   132,   133,   134,   135,     0,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,     0,
     147,   148,   149,     0,     0,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   174,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,     0,   194,   195,   196,   197,     0,   198,     0,
     199,     0,     0,     0,   202,   203,   204,     0,   206,     0,
     207,     0,   208,   209,     0,   210,   211,   212,   213,   944,
       0,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   228,   229,   230,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,   239,     0,
     241,   242,   243,   244,   245,     0,     0,   246,     0,   248,
       0,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,     0,   272,   273,   274,   275,
     276,     0,   277,   278,     0,   280,     0,   281,   282,   283,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,   293,     0,   295,     0,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,     0,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
     363,   364,   365,   366,   367,     0,   369,   370,   371,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,     0,   388,     0,
     390,   391,   392,   393,   394,     0,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     421,     0,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   471,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
      93,    94,    95,    96,     0,    97,    98,    99,     0,     0,
       0,     0,     0,     0,     0,   100,   101,     0,   102,   103,
     104,     0,   106,   107,   108,   109,   110,     0,   112,   113,
       0,   114,   115,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,   131,   132,   133,   134,   135,     0,   137,
     138,   139,     0,   140,   141,   142,   143,   144,   145,     0,
       0,   147,   148,   149,     0,     0,     0,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,   161,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,   171,     0,     0,   172,   173,   174,
     175,   176,     0,   177,   178,   179,     0,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,     0,   194,   195,   196,   197,     0,   198,
       0,   199,     0,     0,     0,   202,   203,   204,     0,   206,
       0,   207,     0,   208,   209,     0,   210,   211,   212,   213,
     946,     0,   216,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   228,   229,   230,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,   239,
       0,   241,   242,   243,   244,   245,     0,     0,   246,     0,
     248,     0,     0,   250,   251,   252,     0,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,     0,   272,   273,   274,
     275,   276,     0,   277,   278,     0,   280,     0,   281,   282,
     283,   284,   285,   286,     0,   287,   288,     0,     0,   289,
     290,   291,     0,     0,   292,   293,     0,   295,     0,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
       0,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
       0,   363,   364,   365,   366,   367,     0,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,     0,   388,
       0,   390,   391,   392,   393,   394,     0,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,     0,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,   418,   419,   420,
       0,   421,     0,   423,   424,   425,   426,     0,     0,   427,
       0,     0,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   471,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    89,    90,    91,
      92,    93,    94,    95,    96,     0,    97,    98,    99,     0,
       0,     0,     0,     0,  1198,     0,   100,   101,     0,   102,
     103,   104,     0,   106,   107,   108,   109,   110,     0,   112,
     113,     0,   114,   115,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,   131,   132,   133,   134,   135,     0,
     137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   147,   148,   149,     0,     0,     0,     0,     0,
       0,     0,   151,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,   161,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,   171,     0,     0,   172,   173,
     174,   175,   176,     0,   177,   178,   179,     0,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,     0,   194,   195,   196,   197,     0,
     198,     0,   199,     0,     0,     0,   202,   203,   204,     0,
     206,     0,   207,     0,   208,   209,     0,   210,   211,   212,
     213,   214,     0,   216,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   228,   229,   230,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
     239,     0,   241,   242,   243,   244,   245,     0,     0,   246,
       0,   248,     0,     0,   250,   251,   252,     0,     0,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,     0,   272,   273,
     274,   275,   276,     0,   277,   278,     0,   280,     0,   281,
     282,   283,   284,   285,   286,     0,   287,   288,     0,     0,
     289,   290,   291,     0,     0,   292,   293,     0,   295,     0,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,     0,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,     0,     0,   364,   365,   366,   367,     0,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,     0,
     388,     0,   390,   391,   392,   393,   394,     0,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,     0,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   421,     0,   423,   424,   425,   426,     0,     0,
     427,     0,     0,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   471,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    89,    90,
      91,    92,    93,    94,    95,    96,     0,    97,    98,    99,
       0,     0,     0,     0,     0,     0,     0,   100,   101,     0,
     102,   103,   104,     0,   106,   107,   108,   109,   110,     0,
     112,   113,     0,   114,   115,   116,   117,   118,   119,     0,
       0,   120,   121,   122,   123,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,   131,   132,   133,   134,   135,
       0,   137,   138,   139,     0,   140,   141,   142,   143,   144,
     145,     0,     0,   147,   148,   149,     0,     0,     0,     0,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,   161,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,   171,     0,     0,   172,
     173,   174,   175,   176,     0,   177,   178,   179,     0,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,     0,   194,   195,   196,   197,
       0,   198,     0,   199,     0,     0,     0,   202,   203,   204,
       0,   206,     0,   207,     0,   208,   209,     0,   210,   211,
     212,   213,  1292,     0,   216,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   228,   229,
     230,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,   239,     0,   241,   242,   243,   244,   245,     0,     0,
     246,     0,   248,     0,     0,   250,   251,   252,     0,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,     0,   272,
     273,   274,   275,   276,     0,   277,   278,     0,   280,     0,
     281,   282,   283,   284,   285,   286,     0,   287,   288,     0,
       0,   289,   290,   291,     0,     0,   292,   293,     0,   295,
       0,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,     0,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,     0,   363,   364,   365,   366,   367,     0,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
       0,   388,     0,   390,   391,   392,   393,   394,     0,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,     0,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,   418,
     419,   420,     0,   421,     0,   423,   424,   425,   426,     0,
       0,   427,     0,     0,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   471,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,    93,    94,    95,    96,     0,    97,    98,
      99,     0,     0,     0,     0,     0,     0,     0,   100,   101,
       0,   102,   103,   104,     0,   106,   107,   108,   109,   110,
       0,   112,   113,     0,   114,   115,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,   131,   132,   133,   134,
     135,     0,   137,   138,   139,     0,   140,   141,   142,   143,
     144,   145,     0,     0,   147,   148,   149,     0,     0,     0,
       0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,   161,   162,   163,   164,
     165,   166,     0,   167,   168,   169,   170,   171,     0,     0,
     172,   173,   174,   175,   176,     0,   177,   178,   179,     0,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,     0,   194,   195,   196,
     197,     0,   198,     0,   199,     0,     0,     0,   202,   203,
     204,     0,   206,     0,   207,     0,   208,   209,     0,   210,
     211,   212,   213,  1305,     0,   216,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   228,
     229,   230,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,   239,     0,   241,   242,   243,   244,   245,     0,
       0,   246,     0,   248,     0,     0,   250,   251,   252,     0,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,     0,
     272,   273,   274,   275,   276,     0,   277,   278,     0,   280,
       0,   281,   282,   283,   284,   285,   286,     0,   287,   288,
       0,     0,   289,   290,   291,     0,     0,   292,   293,     0,
     295,     0,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
     314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,     0,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,     0,   363,   364,   365,   366,   367,     0,
     369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,     0,   388,     0,   390,   391,   392,   393,   394,     0,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,     0,     0,   409,
     410,   411,   412,   413,     0,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   421,     0,   423,   424,   425,   426,
       0,     0,   427,     0,     0,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    93,    94,    95,    96,     0,    97,
      98,    99,     0,     0,     0,     0,     0,     0,     0,   100,
     101,     0,   102,   103,   104,     0,   106,   107,   108,   109,
     110,     0,   112,   113,     0,   114,   115,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,   131,   132,   133,
     134,   135,     0,   137,   138,   139,     0,   140,   141,   142,
     143,   144,   145,     0,     0,   147,   148,   149,     0,     0,
       0,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,   161,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,   171,     0,
       0,   172,   173,   174,   175,   176,     0,   177,   178,   179,
       0,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,     0,   194,   195,
     196,   197,     0,   198,     0,   199,     0,     0,     0,   202,
     203,   204,     0,   206,     0,   207,     0,   208,   209,     0,
     210,   211,   212,   213,  1552,     0,   216,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     228,   229,   230,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,   239,     0,   241,   242,   243,   244,   245,
       0,     0,   246,     0,   248,     0,     0,   250,   251,   252,
       0,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
       0,   272,   273,   274,   275,   276,     0,   277,   278,     0,
     280,     0,   281,   282,   283,   284,   285,   286,     0,   287,
     288,     0,     0,   289,   290,   291,     0,     0,   292,   293,
       0,   295,     0,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
       0,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,     0,   388,     0,   390,   391,   392,   393,   394,
       0,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,     0,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   421,     0,   423,   424,   425,
     426,     0,     0,   427,     0,     0,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   471,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,    93,    94,    95,    96,     0,
      97,    98,    99,     0,     0,     0,     0,     0,     0,     0,
     100,   101,     0,   102,   103,   104,     0,   106,   107,   108,
     109,   110,     0,   112,   113,     0,   114,   115,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,   131,   132,
     133,   134,   135,     0,   137,   138,   139,     0,   140,   141,
     142,   143,   144,   145,     0,     0,   147,   148,   149,     0,
       0,     0,     0,     0,     0,     0,   151,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,   161,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,   171,
       0,     0,   172,   173,   174,   175,   176,     0,   177,   178,
     179,     0,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,     0,   194,
     195,   196,   197,     0,   198,     0,   199,     0,     0,     0,
     202,   203,   204,     0,   206,     0,   207,     0,   208,   209,
       0,   210,   211,   212,   213,  1564,     0,   216,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   228,   229,   230,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,   239,     0,   241,   242,   243,   244,
     245,     0,     0,   246,     0,   248,     0,     0,   250,   251,
     252,     0,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,     0,   272,   273,   274,   275,   276,     0,   277,   278,
       0,   280,     0,   281,   282,   283,   284,   285,   286,     0,
     287,   288,     0,     0,   289,   290,   291,     0,     0,   292,
     293,     0,   295,     0,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
     312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,     0,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
     367,     0,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,     0,   388,     0,   390,   391,   392,   393,
     394,     0,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,     0,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   421,     0,   423,   424,
     425,   426,     0,     0,   427,     0,     0,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,     0,   106,   107,
     108,   109,   110,     0,   112,   113,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,   131,
     132,   133,   134,   135,     0,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   147,   148,   149,
       0,     0,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   174,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,     0,
     194,   195,   196,   197,     0,   198,     0,   199,     0,     0,
       0,   202,   203,   204,     0,   206,     0,   207,     0,   208,
     209,     0,   210,   211,   212,   213,  1566,     0,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   228,   229,   230,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,   239,     0,   241,   242,   243,
     244,   245,     0,     0,   246,     0,   248,     0,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,     0,   272,   273,   274,   275,   276,     0,   277,
     278,     0,   280,     0,   281,   282,   283,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,   293,     0,   295,     0,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,     0,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,   364,   365,
     366,   367,     0,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,     0,   388,     0,   390,   391,   392,
     393,   394,     0,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,   419,   420,     0,   421,     0,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   471,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
      96,     0,    97,    98,    99,     0,     0,     0,     0,     0,
       0,     0,   100,   101,     0,   102,   103,   104,     0,   106,
     107,   108,   109,   110,     0,   112,   113,     0,   114,   115,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
     131,   132,   133,   134,   135,     0,   137,   138,   139,     0,
     140,   141,   142,   143,   144,   145,     0,     0,   147,   148,
     149,     0,     0,     0,     0,     0,     0,     0,   151,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   171,     0,     0,   172,   173,   174,   175,   176,     0,
     177,   178,   179,     0,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
       0,   194,   195,   196,   197,     0,   198,     0,   199,     0,
       0,     0,   202,   203,   204,     0,   206,     0,   207,     0,
     208,   209,     0,   210,   211,   212,   213,  2151,     0,   216,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   228,   229,   230,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,   239,     0,   241,   242,
     243,   244,   245,     0,     0,   246,     0,   248,     0,     0,
     250,   251,   252,     0,     0,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,     0,   272,   273,   274,   275,   276,     0,
     277,   278,     0,   280,     0,   281,   282,   283,   284,   285,
     286,     0,   287,   288,     0,     0,   289,   290,   291,     0,
       0,   292,   293,     0,   295,     0,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   311,   312,   313,   314,   315,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,     0,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,     0,   363,   364,
     365,   366,   367,     0,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,     0,   388,     0,   390,   391,
     392,   393,   394,     0,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,     0,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   421,     0,
     423,   424,   425,   426,     0,     0,   427,     0,     0,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   471,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
      95,    96,     0,    97,    98,    99,     0,     0,     0,     0,
       0,     0,     0,   100,   101,     0,   102,   103,   104,     0,
     106,   107,   108,   109,   110,     0,   112,   113,     0,   114,
     115,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,   131,   132,   133,   134,   135,     0,   137,   138,   139,
       0,   140,   141,   142,   143,   144,   145,     0,     0,   147,
     148,   149,     0,     0,     0,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,   161,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,   171,     0,     0,   172,   173,   174,   175,   176,
       0,   177,   178,   179,     0,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,     0,   194,   195,   196,   197,     0,   198,     0,   199,
       0,     0,     0,   202,   203,   204,     0,   206,     0,   207,
       0,   208,   209,     0,   210,   211,   212,   213,   214,     0,
     216,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   228,   229,   230,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,   239,     0,   241,
     242,   243,   244,   245,     0,     0,   246,     0,   248,     0,
       0,   250,   251,   252,     0,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,     0,   272,   273,   274,   275,   276,
       0,   277,   278,     0,   280,     0,   281,   282,   283,   284,
     285,   286,     0,   287,   288,     0,     0,   289,   290,   291,
       0,     0,   292,   293,     0,   295,     0,   297,   298,   299,
     300,   301,   302,   303,     0,   305,   306,     0,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,   327,
     328,   329,     0,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,     0,   345,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,     0,   363,
     364,   365,   366,   367,     0,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,     0,   388,     0,   390,
     391,   392,   393,   394,     0,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,     0,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,   418,   419,   420,     0,   421,
       0,   423,   424,   425,   426,     0,     0,   427,     0,     0,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     996,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
      94,    95,    96,     0,    97,    98,    99,     0,     0,     0,
       0,     0,     0,     0,   100,   101,     0,   102,   103,   104,
     105,   106,   107,   108,     0,   997,   111,   998,   999,     0,
     114,   115,   116,   117,   118,   119,     0,     0,   120,   121,
    1000,  1001,   124,     0,   125,   126,   127,   128,     0,     0,
     130,     0,   131,   132,   133,   134,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,     0,     0,     0,   150,     0,     0,     0,
     151,   152,   153,   154,   155,   156,  1002,  1003,   159,     0,
     160,     0,   161,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,   171,     0,     0,   172,   173,   676,   175,
     176,     0,   177,   178,   179,     0,   180,   181,   182,     0,
     183,   184,   185,   186,     0,   188,   189,   190,   191,     0,
       0,   193,     0,   194,   195,  1004,   197,     0,   198,     0,
     199,   200,     0,   201,   202,   203,   204,   205,   206,     0,
     207,     0,     0,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,     0,   226,   227,     0,   229,   230,   231,   232,
    1005,  1006,     0,  1007,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,     0,   246,   247,   248,
     249,     0,   250,   251,   252,     0,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,  1008,   271,  1009,   273,   274,   275,
       0,     0,   277,   278,   279,   280,     0,     0,   282,  1010,
     284,   285,   286,     0,   287,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,   294,   295,   296,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,     0,   310,   311,     0,   313,   314,   315,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1011,   326,
     327,   328,   329,     0,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,     0,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,     0,
     363,  1012,   365,   366,   367,   368,   369,   370,  1013,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,     0,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,     0,  1014,  1015,     0,     0,
     397,   398,     0,   400,     0,     0,   402,   403,   404,   405,
     406,   407,   408,     0,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,   418,     0,  1016,     0,
     421,   422,   423,   424,   425,   426,     0,     0,   427,     0,
       0,   428,   429,   430,   431,   432,   433,   996,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   445,   446,
     447,     0,    89,    90,    91,    92,    93,    94,    95,    96,
       0,    97,    98,    99,     0,     0,     0,     0,     0,     0,
       0,   100,   101,     0,   102,   103,   104,   105,   106,   107,
     108,     0,   997,   111,   998,   999,     0,   114,   115,   116,
     117,   118,   119,     0,     0,   120,   121,  1000,  1001,   124,
       0,   125,   126,   127,   128,     0,     0,   130,     0,   131,
     132,   133,   134,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
       0,     0,     0,   150,     0,     0,     0,   151,   152,   153,
     154,   155,   156,  1002,  1003,   159,     0,   160,     0,   161,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     171,     0,     0,   172,   173,   676,   175,   176,     0,   177,
     178,   179,     0,   180,   181,   182,     0,   183,   184,   185,
     186,     0,   188,   189,   190,   191,     0,     0,   193,     0,
     194,   195,  1004,   197,     0,   198,     0,   199,   200,     0,
     201,   202,   203,   204,   205,   206,     0,   207,     0,     0,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,     0,
     226,   227,     0,   229,   230,   231,   232,  1005,  1006,     0,
    1007,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,     0,   246,   247,   248,   249,     0,   250,
     251,   252,     0,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,  1008,   271,  1009,   273,   274,   275,     0,     0,   277,
     278,   279,   280,     0,     0,   282,  1010,   284,   285,   286,
       0,   287,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,   294,   295,   296,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,     0,   310,
     311,     0,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1011,   326,   327,   328,   329,
       0,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
       0,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,     0,   363,     0,   365,
     366,   367,   368,   369,   370,  1013,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,     0,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,     0,  1014,  1015,     0,     0,   397,   398,     0,
     400,     0,     0,   402,   403,   404,   405,   406,   407,   408,
       0,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,   418,     0,  1016,     0,   421,   422,   423,
     424,   425,   426,     0,     0,   427,     0,     0,   428,   429,
     430,   431,   432,   433,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   445,   446,   447
};

static const yytype_int16 yycheck[] =
{
       6,   579,   497,   636,   496,   529,   586,     0,    52,   813,
     594,    33,   701,   673,   674,   636,     0,     0,     6,   565,
       0,     0,  1030,  1493,     6,   800,   942,   805,   826,   541,
     942,   691,    19,    16,   712,   942,  1562,  1064,   942,   825,
    1088,   622,   970,    16,  1814,   772,   802,   588,  1568,   501,
    1570,     0,  1879,  1907,  1915,  1544,  1452,    28,  1559,   839,
      54,   644,   503,   579,  1490,   581,   545,   583,    32,  1792,
    1032,  1765,  1922,  1091,   830,     5,     9,   503,   166,   502,
      11,    49,    54,    11,     9,  1395,  1396,    57,     5,     5,
    1400,    57,    26,  1135,   958,     5,    13,    14,     5,  1798,
    2155,    66,     5,    13,    14,  1178,    13,    14,     5,  1535,
    1176,  2161,     0,   746,    85,    26,  2158,    22,    72,    11,
       5,     5,    33,    28,     0,  1435,  1436,     5,    74,  1630,
     165,     5,    74,    39,   134,     5,     5,     5,    84,  2145,
     207,  2229,    84,    77,    39,   586,    26,   626,    40,   601,
     107,    85,   107,    33,     5,   117,     3,     4,     5,  1797,
     119,   275,     9,   505,    47,     4,    26,   562,  1669,  1670,
       9,   267,     9,    33,   562,  2324,   105,   275,  1837,   113,
      72,   814,   269,     3,   817,   818,  2252,    81,   180,     4,
     114,  1209,  1734,  2107,     9,   636,   233,   162,   159,   314,
     233,   713,   643,    91,   117,   117,   114,  2273,  1012,    11,
      30,    31,   753,   240,   336,    91,    11,   640,    26,  1852,
     132,   503,   112,   180,   213,   180,  2295,   132,   740,    57,
     124,    11,   711,    26,   105,   157,  2464,   255,    40,   201,
    2373,   155,   782,  2547,   106,    40,   155,   181,   240,  2521,
    2522,   142,   254,    36,   837,   838,    22,   259,   192,  2410,
    2310,   165,   645,   252,   155,   112,   414,   327,  2356,   160,
      72,   459,   767,   433,   414,   471,     4,    72,   474,   144,
      74,     9,   470,   240,   258,   240,   243,   170,   243,   127,
      84,    57,    72,   353,  1927,   430,   456,   843,     5,  2153,
     183,  2605,    11,   340,   586,   188,   308,   748,   749,  1705,
     224,   426,  2006,   792,   205,   224,  2039,   344,  2590,   127,
    2043,   310,   470,   252,   189,  1851,  1015,  1345,  2394,   251,
     470,  2030,  2560,   224,   127,   296,   301,    58,   121,   474,
     223,  2492,  1002,  1003,   164,    66,   166,  1848,   470,  1850,
    1010,   259,   344,  2267,   636,   938,   939,   266,   328,   206,
     474,   643,   328,   746,  1790,   949,  1792,   356,   273,   259,
      30,    31,   309,   410,   470,   266,   474,   410,   958,   106,
     227,   269,   470,   470,   275,  2518,   360,   344,   300,   344,
       8,  2029,   286,   269,   412,   790,  2545,    15,    16,    17,
     337,  2407,   790,  1713,  1714,  1715,  1716,   474,   988,  1719,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  2507,
     762,   326,  2081,   412,  1966,  1452,   264,  2578,  1203,   429,
     813,    91,   165,   470,  1298,   369,  1937,   470,   372,   474,
    1513,   329,   407,    91,  2494,   391,  1512,  1495,   353,   391,
     412,  2493,   363,   329,     8,   414,     0,    11,  2527,  1769,
    1770,    15,    16,    17,   457,   957,   748,   749,  2295,   964,
     962,   377,    16,   457,   457,   358,   968,   457,   457,  1259,
    1507,   503,   377,   363,  2539,   370,   371,   391,  1286,    33,
    2184,   385,   416,  2216,   451,  1036,   451,   503,  2221,   412,
     328,  2224,   470,   363,   474,  1547,   227,   423,   474,   380,
      54,  2210,   417,   470,   468,   406,  1096,   958,   472,   502,
     470,   565,   528,   529,   511,   512,  1066,  1678,  1679,  1680,
     503,   972,   463,   464,   465,   466,   469,   233,   466,   545,
     470,  1503,  1083,  1084,   531,   433,   972,   988,   971,  1132,
     475,  1331,  2413,   470,   470,  2409,  1035,   433,  2084,   553,
     470,   157,   555,   470,  2414,  1044,   435,   470,  1080,  1048,
     543,   555,   555,   470,   466,   555,   555,  2097,   584,   585,
     586,   553,   546,   471,   435,   473,   470,   456,  1067,  1068,
    2079,     0,   470,  1134,   468,   471,   470,   473,   472,  1232,
     470,   470,   470,   574,   424,   456,   555,  1099,   127,  1242,
      57,    22,  1245,  2039,   461,   462,  1634,  2043,   433,   470,
     626,   217,   461,   462,   461,   462,  1166,  2350,   115,  1012,
     636,   384,   104,   386,   153,   424,  2330,   643,   644,   645,
    1220,   456,   166,   379,   340,  2499,   461,   462,  2149,   636,
    1228,   473,   393,   271,   660,  1096,   643,   640,   391,   461,
     462,   463,   464,   465,   466,    63,    64,  2063,   463,   464,
     465,   466,    29,   474,  1692,   127,   958,   413,  1705,  1485,
    1486,  1314,   688,   146,   468,  1201,   346,  1347,   472,   711,
     972,   470,   233,  1314,  1712,   436,    53,   184,   346,   324,
    2527,   707,   708,   709,  1632,   711,   988,   191,  1091,  1255,
    1256,  1257,  1228,   233,   410,  1296,   233,   271,  1298,  1300,
     380,   132,  1303,  1741,   115,   731,   459,   714,  2254,    13,
      14,  1247,   380,   239,   166,   254,  1252,   724,    74,   472,
     259,  1419,   748,   749,   112,   264,  1238,   114,    84,   736,
    2604,  1243,   461,   462,   463,   464,   465,   466,   142,   746,
     420,   748,   749,   287,   424,   197,   238,   396,   233,   241,
    1497,   777,   420,   433,   470,   781,   782,  1218,   343,  1220,
     212,   775,   776,  2209,   778,   433,   792,  1585,   213,   221,
    2216,  2561,  2562,   184,   471,  2221,   456,   474,  2224,   340,
      13,    14,   254,   775,   776,   252,   778,   813,   456,   435,
     470,   426,   264,   181,  1096,  2209,   314,     3,  2244,     5,
     340,   205,   470,   340,   795,  1277,  1209,   252,   195,  1609,
     456,   837,   838,   839,   384,   359,   386,  2607,  1594,   457,
     458,   459,  1707,   461,   462,   463,   464,   465,   466,   347,
    2244,   471,  1879,  2379,   474,  1395,  1396,  1298,   829,   314,
    1400,  1879,   273,  1641,  2384,    11,   171,  1545,  1646,   410,
    1735,  2181,  1351,  1314,   433,   340,   435,   662,   663,   398,
     470,   328,   380,   346,   470,   252,   254,   254,  1329,   408,
     410,   275,   347,   410,    40,  1435,  1436,   645,  2324,   211,
     332,   459,   687,   457,   458,   459,   353,   461,   462,   463,
     464,   465,   466,   457,   472,   326,   327,   380,   470,   435,
     472,   107,   227,   146,  2350,   380,    72,   453,   426,   470,
    2324,   356,   938,   939,  1413,   472,  1218,  1321,  1220,   435,
     456,  1325,   353,  1327,   269,   410,  1492,   346,   453,  1997,
     470,     4,   958,   470,   470,  2265,     9,   420,   502,   503,
     456,  1440,  1345,     4,   471,   164,   972,   474,     9,    11,
     433,   426,   463,    15,   470,  1781,  1782,  1783,  1784,    21,
     474,   380,   988,   191,  1565,   470,  1567,   412,   971,    31,
      32,    22,  1908,   456,   180,  2465,  1908,    28,   471,   972,
    1479,  1908,  1930,   465,  1908,   470,  1012,   470,   470,   553,
     472,   555,  1412,  2439,  1414,  1415,  1298,   336,   337,  2329,
     465,   420,   406,   336,   337,   470,   112,   472,    22,  1035,
     471,   471,  1314,   474,    28,  1041,  2063,  1658,  1044,  1032,
    2466,    83,  1048,  1627,   470,  2439,   472,  1329,  1032,  1032,
    1739,  1740,  1032,  1032,   240,   471,  1062,   243,   474,  1065,
    1066,  1067,  1068,    53,  1862,   813,  1053,   470,  2594,  1075,
    1076,   470,  2466,   453,  1849,  1861,  2546,   471,   165,   384,
     474,   386,  1860,  1663,  1862,  1091,  1092,  1093,  1094,  1095,
    1096,   336,   337,  2563,  1100,  1101,   640,  2115,   468,  1105,
     470,   132,   472,  1109,   211,   410,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  1120,  1901,    22,  1123,   471,  2545,
    2128,   474,    28,   346,  1130,   207,  1132,  1568,  1569,  1570,
     155,   470,   340,   677,     8,   160,   471,    11,   132,   347,
     322,    15,    16,    17,   155,  2615,   384,  1153,   386,   160,
     384,  2545,   386,  1140,   147,  1833,     8,   380,   344,    11,
    1166,  1653,    22,    15,    16,    17,   147,   711,    28,  1175,
    1176,   147,   380,  1713,  1714,  1715,  1716,  1150,   147,  1719,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,   471,
      66,  2044,   474,  2046,   127,   471,   282,   420,   474,   224,
     336,   337,   471,  1209,  1197,   474,   470,  1748,   471,    35,
     433,   474,  1218,   224,  1220,  1000,  1001,  1658,   426,   559,
     153,   561,  1663,   530,  1009,   532,   132,   470,    54,  1769,
    1770,   775,   776,   456,   778,   471,   112,   254,   474,   426,
       5,   266,   273,     8,    22,   471,  1879,   470,   474,    14,
      28,  1634,    80,  1259,   282,   266,  1262,  1263,    23,  1265,
     346,   437,    27,   147,  1012,   451,   471,  1746,  2295,   474,
     748,   749,   132,  1058,  1059,   472,   147,  2295,   104,   273,
     471,   471,    92,   474,   474,  2293,  1568,  1569,  1570,   147,
    1802,   322,  1298,   169,   380,   326,   269,  1290,   471,  1840,
    1880,   474,  1882,   471,   471,   380,   474,   474,  1314,  1692,
    2085,   470,    35,   471,   188,  2113,   474,  2121,   346,   470,
     222,   471,   353,  1329,   474,  1331,   259,  1314,   322,  1712,
       5,   264,   326,  1320,   420,   209,     5,  2355,   471,  1345,
    2358,   474,  1329,  1091,   470,  1351,  1352,   433,  1929,   470,
    1896,  1357,   380,   160,   132,   470,   166,   209,  1741,   353,
     471,   142,   471,   474,   190,   474,   471,   273,   471,   474,
     456,   474,   470,   297,   155,  1397,  1658,   470,   254,   160,
     171,  1663,  1765,   259,   470,   470,   417,   197,   434,  1395,
    1396,  1397,   420,   471,  1400,   471,   474,   271,   474,     5,
     191,   471,   212,     5,   474,   433,  1412,  1413,  1414,  1415,
     470,   221,   238,   273,  1420,   241,   322,     5,  1440,   271,
     326,   470,   470,   417,   205,   301,   252,   971,   456,  1435,
    1436,   473,   471,   470,  1440,   474,   227,  1878,   248,  1880,
     316,  1882,   470,   224,   470,     5,   470,   353,  1454,   471,
     470,  1457,   474,  1459,   207,   471,   498,   283,   474,   269,
     470,  1209,   322,   280,   471,   398,   326,   474,   470,   470,
     470,  2104,    22,  1479,   471,   408,   471,   474,    28,   474,
      95,    35,   474,   274,  1490,   266,   471,   471,  1032,   474,
     474,   346,   160,   353,   275,   273,  1879,   266,  1504,   160,
    2527,   327,  1490,   471,   546,   264,   474,   222,  1490,  2527,
    1503,   417,   353,  1519,  2055,  2301,   470,   470,  1540,  1503,
    1503,   347,   332,  1503,  1503,   380,   391,    84,   474,  1535,
       8,   407,  2073,    11,   391,  2116,  2117,    15,    16,    17,
     471,   367,    53,   474,   322,  1551,  2070,  1535,   326,   471,
    2171,    53,   474,  1535,    32,   391,   471,   417,  1102,   474,
     245,   391,  1568,  1569,  1570,   420,   471,   471,   471,   474,
     474,   474,    92,   471,   471,   353,   474,   476,   433,   391,
     433,   147,   132,   457,   458,   459,  1573,   461,   462,   463,
     464,   465,   466,   384,    91,   386,  1878,  1345,  1880,   254,
    1882,   456,   254,  1609,   414,   457,   458,   459,   470,   461,
     462,   463,   464,   465,   466,   470,   407,    35,   472,   410,
     423,   470,   470,  2006,   474,   406,    34,   470,  1634,    82,
    1617,    84,   429,    86,  2294,   470,     9,   389,   389,   417,
      11,  2181,   474,   389,   391,   471,   166,   470,   259,   470,
     174,   156,  1658,  1197,   470,   165,  2097,  1663,   471,   205,
     474,   356,  2295,  1656,   213,   270,   474,    35,   470,   414,
     213,  1658,   254,   213,   275,   471,   306,   197,  1665,   147,
    1667,   267,   426,  1689,  1671,  1672,  1692,   468,   470,   147,
     471,   472,   212,  1699,   433,   254,   269,  1703,   269,   254,
    1706,   221,     8,    35,    35,    11,  1712,  1713,  1714,  1715,
    1716,    34,   468,  1719,  1720,  1721,  1722,  1723,  1724,  1725,
    1726,  1727,  1728,   273,   766,  2265,  1732,  1733,   248,   391,
    2171,   209,  2115,  1777,    40,  1741,   468,   391,  2121,    66,
    1746,    47,  2402,   391,   470,    72,  1290,  1753,   391,   471,
    1756,   471,  1758,  1775,   471,   165,   472,    84,   471,  1765,
    1766,   471,   471,  1769,  1770,  1752,    72,   471,  1774,  1775,
    1792,  2263,   322,   471,   471,   474,   326,   471,   471,  2577,
     453,   453,   471,   471,  1790,   112,  1792,   114,   471,  2329,
     471,   471,  2338,   271,   453,   165,   470,  1803,   391,   470,
    2380,  2184,  1790,   353,  1792,   470,   470,   279,  1790,   430,
    1792,  2395,   332,   455,   270,  2097,   270,   412,   270,   232,
    1826,   474,   430,   420,     6,   269,   459,   391,   254,    11,
     470,   147,   191,    15,   140,   273,   147,  1843,    20,    21,
      22,   469,   169,    25,   147,   471,    28,   391,  2343,    31,
      32,   471,   391,  1397,   391,   391,    35,   471,    35,   471,
     267,  2356,    35,   269,   170,   474,   433,   417,   195,   147,
     147,   259,  1878,  1879,  1880,    57,  1882,   183,   468,   344,
    2359,   243,   188,   138,   471,  2469,  1634,    11,   160,  2171,
     165,   471,  1879,   471,  2527,   471,  1440,   165,  1904,  1905,
      82,    83,    84,    85,    86,   475,   471,   470,  2400,   430,
     380,   165,  2295,   474,  1458,   456,  1903,   223,   174,   471,
     471,   270,   470,   965,   471,   967,   329,   254,   419,    82,
    1474,   147,   259,  1926,   169,   470,   470,   401,   470,  2380,
      35,    78,   469,  2384,  1692,   414,  1490,  2330,   474,  2529,
    2445,  1957,   469,   471,   165,   471,  2534,  2436,    49,  1503,
     212,   470,   212,   471,  1712,   271,   278,   471,   471,  2448,
    2462,   470,  2355,   382,   301,  2358,   470,   470,   276,   457,
     458,   459,    53,   461,   462,   463,   464,   465,   466,   316,
     177,  1535,   459,  1741,  2000,  2001,  1540,   433,   193,  2005,
    2006,   182,    93,    35,  2010,   458,   459,  2013,  2014,   462,
     259,   259,  2018,   459,   391,   391,   471,  1765,   254,   470,
     105,   433,   269,   470,    35,   165,   167,   118,   645,   469,
     171,   470,   212,  2039,   432,   288,   470,  2043,   471,   470,
      84,   128,   316,   470,   213,   136,   470,   112,    35,   140,
     191,  2039,   358,   147,    72,  2043,   119,  2039,   147,    35,
     471,  2043,   645,    53,  2070,    35,   337,   337,   470,   470,
     161,   419,  2059,   164,  2061,   474,    72,    35,   181,  2072,
     407,  2074,   401,    66,   414,   538,   227,   178,  2529,   272,
     470,  2097,    66,   234,    35,   474,   353,   259,  2380,   459,
    2106,   181,  2384,   236,   557,   470,   401,    35,   272,  2115,
     471,   272,  1656,   470,   470,  2121,   470,   252,   336,   269,
     323,   193,   269,   269,    32,   470,   117,   412,    21,  1628,
     555,  1879,  1150,   274,  1911,   972,  1192,   766,   741,  1504,
    2109,   785,  1519,   784,  2527,  1166,  2455,  1806,   454,   787,
    1535,  1191,   605,   606,   607,   461,   462,   463,   464,   465,
     466,  2060,  1204,  2156,  1792,  2171,  2030,  2351,   259,  1790,
    2045,  2439,  1214,  2438,  1216,  2181,   267,  1219,  2184,  2450,
    1332,  2451,  2235,  1225,  2171,  1227,  2515,  2193,  2194,  2516,
    2503,  2197,  1127,  1507,  1265,   795,   813,  1239,  1458,   340,
    1353,  1455,  1244,  2209,   645,  1130,  1248,  1249,  1250,  1251,
    2216,  1253,  1254,   645,  2531,  2221,  2597,   308,  2224,  2225,
    1842,  2209,  2387,  2576,  2564,  2231,  2232,  2209,  2216,     8,
     813,  1775,    11,  2221,  2216,  2312,  2224,  2225,  2244,  2221,
    2246,  1557,  2224,   384,   800,   386,  1790,  2529,  1792,  1569,
    1916,  2529,  2574,  1619,  1554,  1882,  2244,  2526,  2006,  2265,
    1329,    40,  2244,  2431,  1151,   957,   407,  1226,    47,   410,
    1863,  1878,  1563,  1841,  2466,  2075,   458,   459,  2525,  1623,
     462,  1663,   464,    -1,  2240,  2171,  1903,    -1,    -1,  2295,
      -1,   473,    -1,    72,    -1,    -1,    -1,   750,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2295,    -1,
      -1,  2304,    -1,    -1,   496,   497,   498,    -1,  2324,    -1,
      -1,    -1,    -1,  2329,  2330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2325,    -1,    -1,    -1,  2324,  2359,     8,    -1,
    2346,    11,  2324,   796,  2350,    -1,   799,    -1,   530,  2355,
     532,    -1,  2358,  2359,    -1,    -1,   538,    -1,    -1,   812,
      -1,   140,  2350,    -1,   546,  2371,    -1,  2115,  2350,    -1,
      40,    -1,   813,  2121,  2380,   557,    -1,    47,  2384,  2385,
     833,   813,  1926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   170,   574,    -1,    -1,  1012,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    -1,   183,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,  2412,
      -1,  2408,    -1,   605,   606,   607,    -1,    -1,    -1,  1012,
    2436,    -1,    -1,  2439,    -1,    -1,  2184,    54,    -1,    -1,
      -1,    -1,  2448,    -1,   223,    -1,    -1,    -1,    -1,  2455,
      -1,  2439,    -1,    -1,    -1,    -1,    -1,  2439,    -1,    -1,
    2466,    -1,    -1,    -1,    -1,   584,  2459,   649,    -1,    -1,
     140,    -1,    -1,    -1,  1091,    -1,    -1,  2483,  2466,    -1,
      -1,    -1,    -1,    -1,  2466,    -1,    -1,   104,    -1,    -1,
     943,    -1,   271,    -1,   645,  2039,  2502,  2503,    -1,  2043,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1091,    -1,
      -1,    -1,    -1,   183,    -1,    -1,    -1,   970,   188,    -1,
      -1,  2527,    -1,  2529,    -1,   644,   645,    -1,  2072,    -1,
    2074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2545,
    2527,  2547,    35,    -1,    -1,  2538,    -1,  2295,    -1,    -1,
      -1,    -1,   169,   223,    -1,    -1,    -1,  2545,    -1,    -1,
      -1,    54,    -1,  2545,    -1,    -1,    -1,    -1,   750,    -1,
      -1,  1012,    -1,   190,    -1,    -1,    -1,    -1,    -1,   358,
    1012,    -1,  2330,    -1,   766,   767,    -1,    -1,    -1,    -1,
      -1,    -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,  2605,
    2606,   271,  1644,    -1,    -1,    -1,    -1,  2355,    -1,    -1,
    2358,   104,  2156,   795,   796,   797,    -1,   799,   800,    -1,
      -1,   238,    -1,    -1,   241,    -1,  1209,    -1,    -1,    -1,
     812,    -1,    -1,    -1,    -1,   252,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   829,    -1,    -1,
    1091,   833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1091,
      -1,    -1,   813,    -1,    -1,    -1,   283,    -1,    -1,    -1,
      -1,    -1,  2216,    -1,    -1,   454,  1129,  2221,    -1,    -1,
    2224,    -1,   461,   462,   463,   464,   465,   466,   358,    -1,
      -1,    -1,    -1,    -1,   813,    -1,  1149,   190,  1151,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     327,    -1,    -1,    -1,     8,    -1,    -1,    11,   837,   838,
     839,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1345,    -1,
     347,    -1,    -1,    -1,    -1,    -1,  1189,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    40,    -1,   241,    -1,
     367,    -1,    -1,    47,   936,    -1,    -1,    -1,    -1,   252,
    2304,   943,  1345,    -1,    -1,    -1,    -1,    -1,  1209,   951,
      -1,    -1,    -1,    -1,    -1,   957,    -1,  1209,    72,  2527,
     962,  2325,   964,   965,   454,   967,   968,    -1,   970,    -1,
     283,   461,   462,   463,   464,   465,   466,    -1,    -1,    -1,
      -1,    -1,  1844,    -1,    -1,    -1,  2350,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2359,    -1,    -1,    -1,   938,
     939,    -1,  1275,    -1,   636,    -1,  1868,    -1,    -1,    -1,
      -1,   643,    -1,    -1,   327,    -1,    -1,    -1,    -1,    -1,
      -1,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,
    1892,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,
      -1,  1012,    -1,    -1,     8,    -1,    -1,    11,  2412,    -1,
      -1,    15,    16,    17,   367,    -1,   170,    -1,    -1,    -1,
      -1,    -1,  1064,    -1,    -1,    -1,    -1,    -1,    -1,   183,
      -1,    -1,    -1,  1012,   188,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    -1,    47,  1345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1345,    -1,  2459,    -1,  1099,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    72,   223,
      11,    -1,    -1,    -1,   746,    -1,   748,   749,    -1,    -1,
    1091,    -1,    -1,    -1,    -1,    -1,    -1,  1129,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    47,  1149,    -1,  1151,
      -1,    -1,  1091,    -1,    -1,    -1,    -1,   271,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    72,    -1,    -1,  2538,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   814,    -1,    -1,   817,   818,  1189,    -1,    -1,
      -1,    -1,    72,  1132,    -1,    -1,  1198,  1634,  1200,    -1,
      -1,  1203,  1204,    -1,    -1,    -1,   170,    -1,    -1,    -1,
    1483,    -1,  1214,  1215,  1216,  1217,    -1,  1219,    -1,   183,
      -1,    -1,    -1,  1225,   188,  1227,    -1,    -1,    -1,    -1,
      -1,  1634,    -1,    -1,    -1,    -1,  1238,  1239,  1209,   140,
      -1,  1243,  1244,     0,   358,    -1,  1248,  1249,  1250,  1251,
      -1,  1253,  1254,    -1,    -1,  1692,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,
    1209,    -1,    -1,  1275,  1276,  1712,     8,    -1,    -1,    11,
      -1,    -1,   183,    15,    16,    17,  1288,   188,    -1,  1692,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,   183,  1741,    -1,    -1,   271,   188,  1712,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1259,    -1,   223,    -1,    -1,    -1,    -1,    -1,  1765,   209,
     210,    -1,    -1,    -1,    91,    -1,    -1,    -1,  1741,    -1,
     454,    -1,    -1,   223,    -1,   977,   978,   461,   462,   463,
     464,   465,   466,  1626,    -1,    -1,    -1,    -1,  1631,  1632,
    1633,    -1,  1765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     271,    -1,    -1,  1634,  1345,    -1,  1649,   257,    -1,    -1,
      -1,    -1,  1634,    -1,    -1,   142,    -1,    -1,    -1,    -1,
      -1,   271,  1331,    -1,   358,    -1,    -1,    -1,   155,    -1,
      -1,    -1,  2264,   160,    -1,    -1,  1345,    -1,   165,    -1,
      -1,    -1,    -1,    -1,  1046,  1047,    -1,   174,    -1,    -1,
     177,    -1,  1054,    -1,  1056,  1057,    -1,    -1,    -1,    -1,
      -1,  1692,    -1,    -1,  2296,  2297,    -1,    -1,    -1,  1071,
    1692,  1073,  1879,    -1,    -1,    -1,    -1,  2309,   205,    -1,
    1452,  1712,    -1,    -1,  1086,  1087,    -1,   358,    -1,    -1,
    1712,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1879,   209,   358,    -1,
    1741,  1483,    -1,    -1,    -1,    -1,    -1,    -1,  1490,  1741,
     454,    -1,    -1,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,    -1,  1765,    -1,    -1,    -1,  2370,   266,
      -1,    -1,   269,  1765,  1787,  1788,  1789,    -1,   275,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    -1,    -1,  1535,    -1,  1537,    -1,    -1,  1540,   271,
      -1,    -1,  1544,  1175,  1176,    32,    -1,    -1,     8,    -1,
    1823,    11,    -1,   454,    -1,    -1,    -1,  1559,    -1,    -1,
     461,   462,   463,   464,   465,   466,    -1,    -1,    -1,  2006,
      -1,    -1,   329,    -1,   454,    -1,    -1,   457,   458,   459,
      40,   461,   462,   463,   464,   465,   466,    47,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1232,    -1,    -1,  2006,    -1,    -1,    -1,    -1,    -1,    -1,
    1242,    -1,    72,  1245,    -1,    -1,    -1,  1619,  1879,    -1,
      -1,    -1,    -1,   380,  1626,    -1,    -1,  1879,  1630,  1631,
    1632,  1633,    -1,    -1,    -1,    -1,  1909,    -1,    -1,    -1,
      -1,    -1,  1644,    -1,    -1,    -1,    -1,  1649,    -1,   406,
      -1,  1653,    -1,    -1,    -1,    -1,    -1,  1930,    -1,    -1,
      -1,    -1,    -1,  1634,    -1,    -1,    -1,  1669,  1670,    -1,
    1609,    -1,    -1,   430,    -1,   432,   433,    -1,  2115,    -1,
     140,    -1,  1314,    -1,  2121,    -1,    -1,    22,    -1,    -1,
      -1,    -1,    -1,    28,    -1,  1634,    -1,  1329,    -1,    -1,
      35,    -1,    -1,  1705,    -1,    -1,    -1,    -1,    -1,  1341,
     170,   468,  2115,    -1,   471,   472,   473,    -1,  2121,    54,
      -1,  1692,   209,   183,    -1,   457,   458,   459,   188,   461,
     462,   463,   464,   465,   466,     8,    -1,    -1,    11,    -1,
      -1,  1712,    -1,    -1,    -1,  2006,    -1,  2184,    -1,  2022,
    2023,  2024,  2025,  1692,  2006,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    40,    -1,   104,
    1741,    -1,    -1,  1712,    47,    -1,    -1,  1779,    -1,    -1,
      -1,  2184,    -1,    -1,   271,  1787,  1788,  1789,  1790,    -1,
    1792,  1793,    -1,    -1,  1765,  1797,  1798,   132,    -1,    72,
      -1,    -1,  1741,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1823,    -1,    -1,    -1,    -1,  1765,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,  1841,
      -1,    -1,  1844,    -1,    -1,    -1,  1848,  1849,  1850,    -1,
    1852,    -1,    32,    -1,  2115,   190,    -1,    -1,  2295,    -1,
    2121,    -1,  1494,  2115,    -1,    -1,  1868,   140,  1870,  2121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1511,
    1512,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,
    1892,    -1,  2295,  2330,    -1,    -1,    -1,   170,   358,    -1,
      -1,    -1,    -1,   238,    -1,    -1,   241,  1909,  1879,    -1,
     183,    -1,    -1,    -1,  1916,   188,    -1,   252,  2355,    -1,
      -1,  2358,    -1,  2184,    -1,  1927,    -1,  2330,  1930,    -1,
      -1,    -1,  2184,    -1,    -1,  1937,    -1,    -1,   273,    -1,
    1879,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
     223,    -1,  2355,    -1,    -1,  2358,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
      -1,    -1,   528,   529,    -1,    -1,    -1,   322,    -1,    -1,
      -1,   326,   327,    -1,   454,    -1,    -1,    -1,   271,  2272,
      -1,   461,   462,   463,   464,   465,   466,    -1,    -1,    -1,
      -1,    -1,   347,    -1,    -1,    -1,    -1,  2019,   353,    -1,
    2022,  2023,  2024,  2025,    -1,    -1,    -1,  2029,  2030,   209,
    2032,    -1,   367,  2035,  2295,  2006,    -1,  2039,   584,   585,
      -1,  2043,    -1,  2295,  1676,  1677,    -1,  2049,  2321,  1681,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2063,    -1,    -1,    -1,    -1,    -1,  2006,    -1,  2330,
      -1,    -1,    -1,  2075,    -1,    -1,    -1,  2079,  2330,    -1,
      -1,    -1,   417,  2085,    -1,   358,    -1,    -1,    -1,    -1,
    2527,   271,    -1,    -1,  2355,    -1,    -1,  2358,   644,    -1,
      -1,    -1,    -1,  2355,    -1,  2378,  2358,    -1,  2110,    -1,
      -1,    -1,    -1,    -1,   660,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2527,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2411,    -1,
      -1,    -1,   688,    -1,  2115,    -1,    -1,  2149,    -1,    -1,
    2121,    -1,    -1,  2155,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   707,   708,   709,  2166,   711,    -1,    -1,    -1,    -1,
       8,    -1,     0,    11,    -1,    -1,  2115,    15,    16,    17,
      -1,   454,  2121,    -1,    -1,   731,    -1,    -1,   461,   462,
     463,   464,   465,   466,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,    -1,  2209,  2210,    -1,
      -1,    -1,  2214,  2184,  2216,    -1,    -1,    -1,    -1,  2221,
      -1,    -1,  2224,  2225,    -1,  2227,    -1,  2229,    -1,    -1,
      -1,   777,    -1,    -1,    -1,   781,   782,    -1,    -1,    -1,
      -1,    -1,  2244,    -1,    -1,  2184,    -1,  1879,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2263,  2264,    91,    -1,    -1,  2527,    -1,    -1,    -1,
    2272,    -1,    -1,    -1,    -1,  2527,    -1,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,    -1,    -1,    -1,
      -1,   837,   838,   839,  2296,  2297,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2306,    -1,    -1,  2309,    -1,    -1,
      -1,  1943,    -1,    -1,   142,    -1,    -1,    -1,    -1,  2321,
      -1,    20,  2324,    -1,  2295,    -1,    -1,   155,    -1,    -1,
      -1,    -1,   160,    -1,    -1,    -1,    -1,   165,    -1,    -1,
      -1,  2343,    -1,    -1,    -1,    -1,   174,   142,  2350,   177,
      -1,    -1,    -1,    -1,  2356,    -1,  2295,    -1,    -1,  2330,
     155,    -1,    -1,  2365,    -1,   160,    -1,    -1,  2370,    -1,
     165,   209,    -1,    -1,    73,    -1,  2378,   205,    -1,   174,
      -1,    -1,   177,    -1,  2355,   725,    -1,  2358,    -1,    88,
      -1,  2330,   938,   939,    -1,    -1,   224,    -1,  2400,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2411,
     205,    -1,    -1,    -1,    -1,    -1,  2355,    -1,    -1,  2358,
      -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,   271,    -1,    -1,    -1,  2439,   266,    -1,
      -1,   269,   141,  2445,    -1,    -1,    -1,   275,  2450,    -1,
      -1,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2462,  2463,  2464,   162,  2466,    -1,    -1,    -1,    -1,    -1,
      -1,   266,  2104,    -1,   269,    -1,    -1,  2109,    -1,    -1,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2122,  2123,   191,    -1,    -1,  1041,    -1,    -1,    -1,    -1,
      -1,   329,   842,    -1,    -1,  2507,    -1,   847,    -1,    -1,
      -1,    -1,    35,  2515,    -1,    -1,  1062,    -1,    -1,  1065,
      -1,    -1,  1068,  2525,    -1,    -1,    -1,    -1,    -1,  1075,
    1076,    54,    -1,    -1,   329,    -1,    -1,  2539,   237,    -1,
      -1,    -1,    -1,  2545,    -1,    -1,  1092,  1093,  1094,  1095,
      -1,    -1,   380,    -1,  1100,  1101,  2527,    -1,  2560,  1105,
      -1,    -1,    -1,  1109,    -1,    -1,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  1120,    -1,    -1,  1123,   406,    -1,
      -1,   104,   105,    -1,  1130,   380,  1132,    -1,  2527,   112,
      -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   430,    -1,   432,   433,    -1,  1153,   307,    -1,
      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,  1175,
    1176,    -1,    -1,    -1,     0,   430,    -1,   432,   433,   338,
     468,   340,    -1,   471,   472,   473,   169,    -1,   347,    -1,
      -1,   350,    18,    -1,  2286,  2287,    -1,    -1,    -1,    -1,
      -1,    -1,    28,  2295,    30,    31,    -1,   190,    -1,    -1,
     369,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      46,   380,    -1,    -1,    -1,    -1,    -1,    -1,   387,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,  1039,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,  1259,    -1,   238,  1262,  1263,   241,  1265,
      -1,  1061,    -1,    89,    -1,    91,  1066,   426,    -1,   252,
      -1,   254,    -1,    -1,    -1,    -1,    -1,  1077,  1078,  1079,
      -1,  1081,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
     283,    -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     146,    -1,   148,   149,     8,  1331,    -1,    11,  1128,    -1,
      -1,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   327,    -1,  1352,    -1,    32,    -1,
      -1,  1357,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,   187,  1162,    47,   347,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1174,    -1,    -1,    -1,    -1,  1179,
      -1,    -1,    -1,    -1,   367,    -1,   369,    -1,    72,   372,
      -1,  1397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     226,    -1,    -1,    -1,    -1,    -1,  1412,    -1,  1414,  1415,
      -1,    -1,    -1,    -1,  1420,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2527,    -1,    -1,    -1,    -1,
      -1,    22,    -1,    -1,    -1,    -1,    -1,    28,  1454,    -1,
      -1,  1457,    -1,  1459,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,
      -1,    -1,   298,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   170,   470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1504,   183,
     326,    -1,    -1,    -1,   188,    -1,    -1,    -1,   334,    -1,
      -1,    -1,    -1,  1519,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,   104,    -1,   209,   210,   353,    -1,    -1,
      -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,   367,    -1,    -1,    -1,  1551,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   380,  1355,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,   257,    -1,    -1,  1376,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,   415,
     274,    -1,    -1,  1393,   420,  1395,  1396,    -1,  1398,    -1,
    1400,    -1,    -1,  1609,  1404,    -1,    -1,   433,    -1,   190,
      -1,  1411,    -1,    -1,    -1,    -1,  1416,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1426,  1427,  1428,  1429,
     456,    -1,    -1,    -1,    -1,  1435,  1436,    -1,  1438,  1439,
      -1,    -1,    -1,    -1,   470,    -1,    -1,   473,    -1,    -1,
    1450,    -1,    -1,  1453,    -1,    -1,    -1,   238,    -1,    -1,
     241,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1469,
    1470,   252,    -1,    -1,   358,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1689,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,  1699,    -1,    -1,    -1,  1703,    -1,    -1,
    1706,  1501,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1732,  1733,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   322,    -1,    -1,    -1,   326,   327,  1753,    -1,    -1,
    1756,    -1,  1758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1766,    -1,    -1,    -1,    -1,    -1,   347,    -1,  1774,  1775,
     454,    -1,   353,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,    -1,    -1,    -1,   367,    -1,    -1,    -1,
     474,    -1,    -1,    -1,    -1,    -1,    -1,  1803,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1612,  1613,  1614,    -1,    -1,     3,    -1,    -1,
    1826,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    -1,    -1,    -1,    -1,   417,  1843,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,  1688,    -1,
      -1,    -1,    32,    -1,  1694,    -1,    -1,    -1,  1904,  1905,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,  1709,
    1710,  1711,    -1,  1713,  1714,  1715,  1716,    -1,    -1,  1719,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
      -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1749,
      -1,  1957,    -1,    -1,  1754,  1755,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1768,  1769,
    1770,  1771,    -1,  1773,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2000,  2001,    -1,   183,    -1,  2005,
      -1,    -1,   188,    -1,  2010,    -1,    -1,  2013,  2014,    -1,
      -1,    -1,  2018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
     170,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,
      -1,    -1,    -1,   183,    -1,  1845,    -1,    -1,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2070,    -1,    -1,    -1,   254,   209,
     210,   257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,   271,    -1,    -1,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,   257,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1958,    -1,
      -1,    -1,  1962,  1963,    -1,  1965,    -1,    -1,  1968,  1969,
    1970,  1971,   358,    -1,    -1,  1975,  1976,  1977,  1978,  1979,
    1980,  1981,  1982,  1983,  1984,  1985,  1986,  2193,  2194,    -1,
      -1,  2197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1999,
      -1,    -1,  2002,    -1,  2004,    -1,    -1,    -1,  2008,    -1,
      -1,  2011,  2012,    -1,    -1,  2015,  2016,    -1,   358,    -1,
      -1,    -1,    -1,    -1,    -1,  2231,  2232,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
    2246,    -1,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2056,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,   454,  2069,
      -1,   457,   458,   459,    47,   461,   462,   463,   464,   465,
     466,    -1,  2082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2346,    -1,    -1,    -1,    -1,    -1,    -1,  2147,  2148,    -1,
      -1,    -1,    -1,  2359,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2177,    -1,  2385,
      -1,  2181,    -1,    -1,    -1,    -1,    -1,  2187,  2188,  2189,
      -1,    -1,  2192,    -1,    -1,  2195,  2196,   170,    -1,    -1,
    2200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     183,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2455,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2483,    -1,    -1,
      -1,   254,    -1,  2283,   257,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2502,  2503,   271,    -1,
      -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2328,  2329,
      -1,    -1,    -1,  2333,  2334,  2335,    -1,    -1,    -1,    -1,
      -1,  2547,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2363,  2364,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2377,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,  2388,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2605,
    2606,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2433,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2461,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2475,    -1,    -1,    -1,    -1,
      -1,   454,    -1,    -1,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,    -1,    -1,    -1,    -1,   471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2536,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2550,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,  2617,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,    -1,    -1,   475,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,    -1,    -1,    -1,   461,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,    -1,    -1,   475,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,    -1,    -1,    -1,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,
      -1,    -1,   475,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     470,    -1,    -1,    -1,    -1,   475,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,   475,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,    -1,   220,   221,   222,   223,
      -1,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,
      -1,   475,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,    -1,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,    -1,    -1,   475,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   470,    -1,    -1,    -1,    -1,   475,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,
     475,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,    -1,   220,   221,
     222,   223,    -1,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,
      -1,    -1,    -1,   475,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    -1,    -1,    -1,    -1,   475,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,   475,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,
      -1,    -1,   475,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,    -1,
     220,   221,   222,   223,    -1,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     470,    -1,    -1,    -1,    -1,   475,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,   475,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,    -1,   220,   221,   222,   223,
      -1,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      -1,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
      -1,     3,     4,     5,     6,     7,   470,     9,    10,    -1,
      -1,   475,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,    -1,   220,   221,
     222,   223,    -1,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    -1,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,
      -1,    -1,    -1,   475,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    -1,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    -1,    -1,    -1,    -1,   475,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,    -1,   475,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,    -1,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
      -1,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    -1,   255,   256,    -1,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,
      -1,    -1,   475,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,   166,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    -1,   255,   256,    -1,   258,    -1,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    -1,   255,   256,   257,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,   456,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    -1,
     255,   256,   257,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,    -1,   220,   221,
     222,   223,    -1,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    -1,   255,   256,   257,   258,    -1,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    -1,   255,   256,   257,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    -1,   255,
     256,   257,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,    -1,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,    -1,    -1,
       3,    -1,    -1,    -1,    -1,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    -1,   255,   256,   257,   258,    -1,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,    -1,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,    -1,    -1,   456,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    -1,
     249,   250,   251,   252,   253,    -1,   255,   256,    -1,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
      -1,    -1,   431,    -1,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,   456,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    -1,   249,   250,   251,   252,   253,    -1,
     255,   256,    -1,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,
      -1,   213,   214,   215,   216,   217,    -1,    -1,   220,    -1,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    -1,   249,   250,   251,
     252,   253,    -1,   255,   256,    -1,   258,    -1,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    -1,
     249,   250,   251,   252,   253,    -1,   255,   256,    -1,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   470,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,
      -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,
     216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    -1,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,   470,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,    -1,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,    -1,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
      -1,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,    -1,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,    -1,   396,    -1,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   451,   452,   453,    -1,     3,    -1,   457,   458,   459,
       8,   461,   462,   463,   464,   465,   466,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      -1,   249,   250,   251,   252,   253,    -1,   255,   256,    -1,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,    -1,    -1,    -1,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    32,    -1,    15,    16,    17,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,     8,    47,    -1,
      11,    -1,    32,    -1,    15,    16,    17,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    32,    -1,    72,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,     8,    -1,
      -1,    11,    72,    -1,    -1,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    32,    -1,    15,    16,    17,    -1,    -1,    -1,    40,
      -1,   170,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      32,    -1,    -1,    -1,   183,    -1,    -1,    -1,    40,   188,
     170,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    72,    -1,   183,    -1,    -1,    -1,    -1,   188,   170,
     209,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      72,    -1,   183,    -1,   223,    -1,    -1,   188,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,   209,   210,
     170,    -1,    -1,    -1,    -1,   254,    -1,    -1,   257,    -1,
      -1,    -1,   223,   183,    -1,    -1,    -1,    -1,   188,    -1,
      -1,    -1,   271,    -1,   254,   274,    -1,   257,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
     210,   271,    -1,   254,   274,    -1,   257,    -1,    -1,   170,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
     271,    -1,   183,   274,    -1,    -1,    -1,   188,   170,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,   254,    -1,   188,   257,   209,   210,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,   223,    -1,   274,    -1,    -1,   209,   210,   358,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,    -1,   254,    -1,    -1,   257,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,
     271,    -1,   254,   274,    -1,   257,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,
      -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,    -1,    -1,
      -1,    -1,   471,    -1,   454,    -1,    -1,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   358,    -1,    -1,
      -1,   471,    -1,   454,    -1,    -1,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   358,    -1,     8,    -1,
     471,    11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,   454,    -1,    -1,   457,   458,   459,
      40,   461,   462,   463,   464,   465,   466,    47,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,   454,    -1,    -1,   457,   458,   459,    40,
     461,   462,   463,   464,   465,   466,    47,    -1,    -1,    -1,
     471,    -1,   454,    -1,    -1,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,    -1,    -1,     8,    -1,   471,
      11,    72,    -1,    -1,    15,    16,    17,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    -1,   183,    -1,    -1,    -1,    -1,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   183,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,   257,   209,   210,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,   223,    -1,   274,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   183,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,    -1,   254,    -1,    -1,   257,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,   210,
     271,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,    -1,   254,    -1,    -1,   257,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     271,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   358,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   454,    -1,    -1,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,    -1,    -1,    -1,    -1,
     471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   454,     3,    -1,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,    -1,    -1,   469,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      -1,   249,   250,   251,   252,   253,    -1,   255,   256,    -1,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,   463,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,    -1,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    -1,   255,   256,
     257,   258,    -1,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,    -1,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,     3,     4,     5,
      -1,    -1,    -1,     9,   461,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    -1,   255,
     256,   257,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,    -1,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,     3,     4,
       5,    -1,    -1,    -1,     9,   461,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,    -1,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    -1,
     255,   256,   257,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,    -1,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,    -1,
      -1,     8,    -1,    -1,    11,    -1,   461,   462,    15,    16,
      17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,     8,    -1,    -1,    11,    -1,    -1,
      47,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    32,    -1,
      15,    16,    17,    -1,    -1,    72,    40,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    -1,    -1,    -1,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,     8,    -1,    -1,    11,
      -1,    -1,    47,    15,    16,    17,    -1,    -1,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,   121,    -1,    -1,    72,    40,    -1,
      -1,    -1,    -1,     8,    -1,    47,    11,    -1,    -1,    -1,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,    -1,    47,   170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,
      -1,   188,    -1,    -1,    -1,    -1,   160,    72,    -1,    -1,
      -1,   165,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,    -1,   209,   210,   159,    -1,    -1,    -1,    -1,   183,
      -1,    -1,    -1,    -1,   188,   170,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,
      -1,    -1,    -1,   188,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,   170,   223,
     257,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,   271,    -1,   188,   274,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,   257,    -1,   170,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,   183,   254,
     274,   223,   257,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,   274,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,    -1,   254,    -1,    -1,   257,    -1,    -1,   223,    -1,
      -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,
      -1,   358,   274,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,   254,
      -1,    -1,   257,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      35,    -1,    -1,    -1,   358,    40,   271,    -1,    -1,   274,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,    -1,    -1,   291,   414,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    -1,   358,    -1,    -1,    -1,    -1,    -1,    -1,
     454,    -1,    -1,   457,   458,   459,    32,   461,   462,   463,
     464,   465,   466,    -1,    40,    -1,    -1,    -1,    -1,   454,
      -1,    47,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,   183,    -1,
      -1,    -1,   454,   188,    -1,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,   454,
      -1,    -1,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   254,
      -1,    -1,   257,    -1,    -1,    -1,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,   271,    -1,    -1,   274,
       8,    47,    -1,    11,   170,    -1,    -1,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,
      -1,    -1,   188,    -1,    32,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,     8,    47,
      -1,    11,    -1,   209,   210,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,
      -1,    -1,    32,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    -1,    -1,   358,    -1,    -1,    -1,    -1,   254,    -1,
      -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,   271,    -1,    -1,   274,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   165,
      -1,    15,    16,    17,   170,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,
      -1,    -1,   188,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   170,   209,   210,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   183,    -1,   223,    72,   454,
     188,    -1,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     170,   209,   210,    -1,    -1,    -1,    -1,    -1,   254,    -1,
      -1,   257,    -1,   183,    -1,   223,    -1,    -1,   188,    -1,
      -1,    -1,   388,    -1,    -1,   271,    -1,    -1,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,   257,
      -1,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,   257,   454,   183,
      -1,   457,   458,   459,   188,   461,   462,   463,   464,   465,
     466,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,
      -1,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,    -1,
      -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     454,     5,    -1,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    60,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
     221,   222,   223,    -1,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    -1,   255,   256,   257,   258,    -1,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,    -1,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,    -1,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,    -1,   255,   256,   257,   258,    -1,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
      -1,   271,   272,   273,    -1,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    -1,   255,   256,   257,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,    -1,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    -1,   255,   256,   257,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    -1,    44,    45,    46,
      47,    48,    -1,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    -1,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,   162,   163,    -1,    -1,    -1,
     167,   168,   169,    -1,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,   216,
     217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    -1,   249,   250,   251,   252,   253,    -1,   255,   256,
      -1,   258,    -1,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,   162,   163,    -1,    -1,
      -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,
     216,   217,    -1,    -1,   220,    -1,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    -1,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    -1,   249,   250,   251,   252,   253,    -1,
     255,   256,    -1,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,
      44,    45,    46,    47,    48,    -1,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
      -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,
     214,   215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    -1,   249,   250,   251,   252,   253,
      -1,   255,   256,    -1,   258,    -1,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    -1,   249,   250,   251,   252,
     253,    -1,   255,   256,    -1,   258,    -1,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,
      -1,   213,   214,   215,   216,   217,    -1,    -1,   220,    -1,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    -1,   249,   250,   251,
     252,   253,    -1,   255,   256,    -1,   258,    -1,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,   271,
     272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    -1,    44,    45,    46,    47,    48,    -1,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,
     211,    -1,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    -1,   249,   250,
     251,   252,   253,    -1,   255,   256,    -1,   258,    -1,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,   387,    -1,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    -1,    44,    45,    46,    47,    48,    -1,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    -1,    -1,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,
      -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,    -1,
      -1,   211,    -1,   213,   214,   215,   216,   217,    -1,    -1,
     220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    -1,   249,
     250,   251,   252,   253,    -1,   255,   256,    -1,   258,    -1,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,    -1,
     270,   271,   272,   273,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    -1,
     249,   250,   251,   252,   253,    -1,   255,   256,    -1,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      -1,   249,   250,   251,   252,   253,    -1,   255,   256,    -1,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      37,    38,    -1,    40,    41,    42,    -1,    44,    45,    46,
      47,    48,    -1,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    -1,    -1,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,
     167,   168,   169,    -1,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,   216,
     217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    -1,   249,   250,   251,   252,   253,    -1,   255,   256,
      -1,   258,    -1,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    37,    38,    -1,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,
      -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,
     216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    -1,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    -1,   249,   250,   251,   252,   253,    -1,
     255,   256,    -1,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,
      44,    45,    46,    47,    48,    -1,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
      -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,
     214,   215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    -1,   249,   250,   251,   252,   253,
      -1,   255,   256,    -1,   258,    -1,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    -1,   249,   250,   251,   252,
     253,    -1,   255,   256,    -1,   258,    -1,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,
      -1,   213,   214,   215,   216,   217,    -1,    -1,   220,    -1,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    -1,   249,   250,   251,
     252,   253,    -1,   255,   256,    -1,   258,    -1,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    -1,    44,    45,    46,    47,    48,    -1,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,
     211,    -1,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    -1,   249,   250,
     251,   252,   253,    -1,   255,   256,    -1,   258,    -1,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,   387,    -1,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    -1,    44,    45,    46,    47,    48,    -1,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    -1,    -1,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,
      -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,    -1,
      -1,   211,    -1,   213,   214,   215,   216,   217,    -1,    -1,
     220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    -1,   249,
     250,   251,   252,   253,    -1,   255,   256,    -1,   258,    -1,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    -1,
     249,   250,   251,   252,   253,    -1,   255,   256,    -1,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      -1,   249,   250,   251,   252,   253,    -1,   255,   256,    -1,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    -1,    44,    45,    46,
      47,    48,    -1,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    -1,    -1,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,
     167,   168,   169,    -1,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,   216,
     217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    -1,   249,   250,   251,   252,   253,    -1,   255,   256,
      -1,   258,    -1,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,
      -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,
     216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    -1,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    -1,   249,   250,   251,   252,   253,    -1,
     255,   256,    -1,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,
      44,    45,    46,    47,    48,    -1,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
      -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,
     214,   215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    -1,   249,   250,   251,   252,   253,
      -1,   255,   256,    -1,   258,    -1,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      -1,    44,    45,    46,    47,    48,    -1,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,   220,    -1,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    -1,   249,   250,   251,   252,
     253,    -1,   255,   256,    -1,   258,    -1,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
      42,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,    -1,   154,    -1,   156,   157,   158,   159,    -1,   161,
      -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,   171,
      -1,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,   211,
      -1,   213,   214,   215,   216,   217,    -1,    -1,   220,    -1,
     222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    -1,   249,   250,   251,
     252,   253,    -1,   255,   256,    -1,   258,    -1,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,    -1,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,   387,    -1,   389,   390,    -1,
      -1,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,   408,   409,   410,   411,
     412,    -1,    -1,   415,   416,   417,   418,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    37,    38,    -1,    40,
      41,    42,    -1,    44,    45,    46,    47,    48,    -1,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    -1,    -1,    -1,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,    -1,   156,   157,   158,   159,    -1,
     161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,    -1,
     171,    -1,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,    -1,   208,    -1,    -1,
     211,    -1,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    -1,   249,   250,
     251,   252,   253,    -1,   255,   256,    -1,   258,    -1,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,   387,    -1,   389,   390,
      -1,    -1,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,   408,   409,   410,
     411,   412,    -1,    -1,   415,   416,   417,   418,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    -1,    44,    45,    46,    47,    48,    -1,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    -1,    -1,    -1,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,    -1,   154,    -1,   156,   157,   158,   159,
      -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,   169,
      -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,    -1,   208,    -1,
      -1,   211,    -1,   213,   214,   215,   216,   217,    -1,    -1,
     220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    -1,   249,
     250,   251,   252,   253,    -1,   255,   256,    -1,   258,    -1,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,    -1,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,   387,    -1,   389,
     390,    -1,    -1,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,   408,   409,
     410,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    27,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      -1,    40,    41,    42,    -1,    44,    45,    46,    47,    48,
      -1,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,    -1,   154,    -1,   156,   157,   158,
     159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,   168,
     169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,    -1,   208,
      -1,    -1,   211,    -1,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    -1,
     249,   250,   251,   252,   253,    -1,   255,   256,    -1,   258,
      -1,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,    -1,
     359,   360,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,   387,    -1,
     389,   390,    -1,    -1,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,   408,
     409,   410,   411,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    27,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    40,    41,    42,    -1,    44,    45,    46,    47,
      48,    -1,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,    -1,   154,    -1,   156,   157,
     158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,   167,
     168,   169,    -1,   171,    -1,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,   204,    -1,   206,    -1,
     208,    -1,    -1,   211,    -1,   213,   214,   215,   216,   217,
      -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      -1,   249,   250,   251,   252,   253,    -1,   255,   256,    -1,
     258,    -1,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,    -1,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,   387,
      -1,   389,   390,    -1,    -1,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
     408,   409,   410,   411,   412,    -1,    -1,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    40,    41,    42,    -1,    44,    45,    46,
      47,    48,    -1,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    -1,    -1,    -1,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    -1,    85,    86,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,    -1,   154,    -1,   156,
     157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,    -1,
     167,   168,   169,    -1,   171,    -1,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,   204,    -1,   206,
      -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,   216,
     217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    -1,   249,   250,   251,   252,   253,    -1,   255,   256,
      -1,   258,    -1,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,    -1,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
     387,    -1,   389,   390,    -1,    -1,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,   408,   409,   410,   411,   412,    -1,    -1,   415,   416,
     417,   418,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,    -1,    -1,
      -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,   215,
     216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    -1,   249,   250,   251,   252,   253,    -1,   255,
     256,    -1,   258,    -1,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,    -1,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,    -1,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,    44,
      45,    46,    47,    48,    -1,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,    -1,   154,
      -1,   156,   157,   158,   159,    -1,   161,    -1,   163,    -1,
      -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,   204,
      -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,   214,
     215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,    -1,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    -1,   249,   250,   251,   252,   253,    -1,
     255,   256,    -1,   258,    -1,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,    -1,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,   387,    -1,   389,   390,    -1,    -1,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,
     415,   416,   417,   418,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,    -1,
      44,    45,    46,    47,    48,    -1,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,    -1,   156,   157,   158,   159,    -1,   161,    -1,   163,
      -1,    -1,    -1,   167,   168,   169,    -1,   171,    -1,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
     204,    -1,   206,    -1,   208,    -1,    -1,   211,    -1,   213,
     214,   215,   216,   217,    -1,    -1,   220,    -1,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    -1,   249,   250,   251,   252,   253,
      -1,   255,   256,    -1,   258,    -1,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,    -1,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,   387,    -1,   389,   390,    -1,    -1,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    -1,    -1,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
      -1,   154,    -1,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,    -1,    -1,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,    -1,   199,   200,   201,   202,
     203,   204,    -1,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,    -1,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      -1,    -1,   255,   256,   257,   258,    -1,    -1,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,   282,
     283,   284,   285,   286,   287,   288,   289,   290,    -1,   292,
     293,    -1,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
      -1,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,    -1,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,    -1,    -1,
     393,   394,    -1,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
      -1,    -1,   415,   416,   417,   418,   419,    -1,   421,    -1,
     423,   424,   425,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,   452,
     453,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
      46,    -1,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,    -1,   154,    -1,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,   173,    -1,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,    -1,   199,   200,   201,   202,   203,   204,    -1,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,    -1,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,    -1,    -1,   255,
     256,   257,   258,    -1,    -1,   261,   262,   263,   264,   265,
      -1,   267,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,   278,   279,   280,    -1,   282,   283,   284,   285,
     286,   287,   288,   289,   290,    -1,   292,   293,    -1,   295,
     296,    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,    -1,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,    -1,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,    -1,    -1,   393,   394,    -1,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,   408,   409,   410,   411,   412,    -1,    -1,   415,
     416,   417,   418,   419,    -1,   421,    -1,   423,   424,   425,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   451,   452,   453
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    18,    28,    30,    31,    46,    55,    67,    78,    89,
      91,   108,   122,   132,   138,   146,   148,   149,   187,   226,
     295,   298,   326,   334,   346,   353,   357,   367,   380,   415,
     420,   433,   456,   470,   478,   479,   480,   481,   483,   486,
     487,   492,   494,   495,   496,   497,   504,   506,   513,   517,
     518,   519,   520,   521,   522,   559,   678,   679,   681,   685,
     687,   688,   689,   735,   741,   747,   754,   757,   760,   763,
     764,   765,   766,   777,   779,   783,   797,   799,   816,   393,
     436,   686,   191,   340,   347,   380,   426,   686,     3,    18,
      19,    20,    21,    22,    23,    24,    25,    27,    28,    29,
      37,    38,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    53,    54,    55,    56,    57,    58,
      61,    62,    63,    64,    65,    67,    68,    69,    70,    71,
      73,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      85,    86,    87,    88,    89,    90,    92,    93,    94,    95,
      99,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     113,   115,   116,   117,   118,   119,   120,   122,   123,   124,
     125,   126,   129,   130,   131,   132,   133,   135,   136,   137,
     139,   140,   141,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   154,   156,   157,   158,   159,   161,   163,
     164,   166,   167,   168,   169,   170,   171,   173,   175,   176,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     189,   190,   191,   192,   193,   194,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   206,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   220,   221,   222,   223,
     225,   226,   227,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   255,   256,   257,
     258,   260,   261,   262,   263,   264,   265,   267,   268,   271,
     272,   273,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   347,   348,
     349,   350,   351,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   378,   379,   381,   382,
     383,   384,   385,   386,   387,   389,   390,   393,   394,   395,
     396,   397,   399,   400,   401,   402,   403,   404,   405,   408,
     409,   410,   411,   412,   415,   416,   417,   418,   419,   420,
     421,   423,   424,   425,   426,   427,   428,   431,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   608,   665,
     669,   671,   817,   818,   819,   686,    49,   470,   811,   167,
     171,   227,   234,   274,   340,   384,   386,   407,   410,   733,
     753,     3,    26,   298,   663,   669,   817,    20,    73,    88,
     141,   150,   162,   191,   237,   293,   307,   338,   340,   347,
     350,   369,   380,   387,   396,   426,   742,   743,   746,   686,
     663,    91,   424,   470,   509,   513,   517,   681,   687,   754,
     779,   106,   106,     5,   482,   668,   669,   663,    26,   389,
     393,   669,   680,   758,   759,   686,    26,   127,   529,   530,
     227,   340,   351,   389,   680,   736,   737,   686,   270,   570,
     661,   669,   166,   470,   489,   470,   314,   523,   524,   663,
     523,   518,   519,   522,     0,   473,   424,   507,   142,   205,
     275,   406,   531,   532,   518,   520,   521,   474,    26,   389,
     393,   680,   117,   201,   412,   182,   661,   663,   182,   661,
     182,   570,   182,   661,   470,   468,   472,   652,   654,   517,
     681,   687,   762,   779,   661,   661,   384,   386,   384,   386,
     661,   324,   182,   669,   314,   347,   380,   426,   191,    26,
     663,   239,   396,   105,   380,   426,   343,   182,   669,   672,
     744,   182,   662,   663,   182,   663,   470,   778,   733,   509,
       3,   420,   510,   512,   513,   515,   516,   817,   818,   819,
     507,   668,   668,   459,   470,   470,   761,   453,   211,   472,
     269,     4,     6,     7,     8,     9,    10,    48,    50,    51,
      59,    60,    63,    64,    71,    73,    96,    97,    98,    99,
     100,   101,   102,   109,   110,   112,   131,   147,   152,   153,
     158,   203,   204,   206,   228,   229,   247,   249,   254,   259,
     260,   262,   271,   281,   294,   311,   336,   352,   361,   376,
     389,   390,   395,   397,   398,   413,   421,   454,   461,   462,
     463,   470,   475,   518,   585,   588,   591,   592,   593,   595,
     596,   597,   598,   600,   601,   605,   607,   608,   609,   611,
     624,   628,   646,   651,   658,   659,   665,   666,   667,   668,
     669,   657,   658,   736,   668,   736,   453,   165,   391,   459,
     470,   661,   463,   654,     3,   164,   166,   424,   488,   490,
     513,   164,   491,   605,   632,   523,   474,   470,   674,   471,
     471,   480,   661,    26,   127,   528,   528,    53,   528,   155,
     160,   224,   266,   537,   539,   540,   552,   554,   555,   556,
     531,   532,   470,   453,   211,   165,   207,   570,   682,   147,
      22,    28,   132,   273,   322,   326,   353,   417,   771,   774,
     775,   322,   147,    35,    54,   104,   190,   238,   241,   252,
     283,   322,   327,   347,   353,   367,   498,   501,   774,   147,
     322,   353,   774,   147,   322,   353,   774,    26,   127,   422,
     463,   471,   605,   633,   634,   671,   675,   605,   653,     3,
      26,    30,    31,    32,    33,    34,    35,    36,    39,    52,
      59,    60,    66,    72,    74,    84,    91,    96,    97,    98,
     100,   101,   102,   112,   114,   121,   127,   128,   134,   138,
     142,   153,   155,   160,   162,   165,   172,   174,   177,   188,
     195,   205,   207,   218,   219,   224,   228,   229,   254,   259,
     266,   269,   270,   274,   275,   291,   301,   316,   329,   346,
     352,   363,   377,   380,   388,   391,   392,   398,   406,   407,
     413,   414,   422,   429,   430,   432,   433,   463,   664,   676,
     817,   818,   819,   820,   652,   471,   470,   723,   470,   470,
     733,   254,   484,   426,   182,   661,   182,   661,   756,   661,
      80,   750,   437,    81,   124,   286,   385,   147,   472,   673,
      57,   328,   474,   745,   147,   474,   745,   147,   269,   632,
     380,   471,   474,     4,   153,   269,   398,   461,   462,   500,
     503,   508,   510,   511,   514,   667,   668,   509,   470,   806,
     810,   500,   514,   738,   740,   633,     3,    48,    50,    51,
      63,    64,   109,   110,   158,   203,   204,   206,   247,   249,
     262,   311,   354,   361,   389,   390,   421,   582,   584,   586,
     588,   590,   592,   593,   594,   596,   597,   600,   601,   635,
     671,   817,    35,   222,   669,   470,   655,   423,   599,   605,
     650,   470,   599,   599,   470,   160,   470,   470,   470,   587,
     587,   297,   518,   470,   470,   589,   470,   470,    63,    64,
     599,   605,   470,   587,   470,   470,   470,   470,   470,   435,
     456,   470,   602,   470,   602,   470,   470,   605,   605,   605,
     518,   605,   632,   655,   654,   668,   470,   470,   668,     3,
       8,    11,    15,    16,    17,    32,    35,    40,    47,    72,
     170,   183,   188,   209,   210,   223,   254,   257,   271,   274,
     358,   454,   457,   458,   459,   461,   462,   463,   464,   465,
     466,   626,   627,   628,   630,   434,   612,   280,   605,   207,
     474,   525,   470,   668,   654,   525,     3,   112,   227,   500,
     601,   668,   739,    95,   112,   740,   112,   740,   661,   471,
     474,   507,   471,   474,   524,   662,    35,   674,   520,   520,
     533,   534,   605,   520,   157,   251,   546,   213,   252,   310,
     356,   412,    26,   541,   605,   461,   462,   542,   543,   605,
     607,   552,   553,   540,   539,   537,   538,   160,   555,   264,
     557,   537,   552,   632,   222,   682,   661,   781,    35,   669,
     353,   661,    66,    74,    84,   162,   182,   301,   407,   669,
     704,   714,   729,    74,    84,   505,    84,   505,   470,   391,
     470,   702,   233,   410,   702,    84,   474,   391,   661,   584,
     500,    53,   502,   500,   500,   104,   238,   241,    53,   391,
     433,   456,   499,   245,   340,   499,   501,   570,    84,   391,
     505,   340,   661,   391,   340,   633,   633,   634,   471,   474,
     531,   532,    13,    14,   469,   476,   391,   669,   722,   727,
     433,   809,   633,   633,   314,   426,   147,    91,   485,   492,
     689,   747,   797,   661,   254,   493,   498,   254,   470,   723,
      35,   723,   182,   669,   717,   751,   744,   664,   472,   672,
     662,   663,   663,   672,   471,   182,   661,   756,   509,   515,
       4,   667,     4,   667,   676,   808,   815,    49,    93,   118,
     136,   140,   161,   164,   178,   259,   267,   308,   812,   474,
     471,   474,   584,    34,   583,   107,   180,   240,   243,   344,
     451,   470,   603,   604,   471,   474,   587,   673,   762,   632,
     652,   470,   429,   647,   648,   605,   632,   470,   667,   667,
     632,     3,   107,   180,   240,   243,   344,   451,   636,   637,
     668,   667,   667,   667,   599,   599,   605,     8,    15,    16,
      17,   457,   458,   459,   461,   462,   463,   464,   465,   466,
     626,   631,   669,   605,   638,   461,   462,   470,   606,   607,
     628,   640,   471,   632,   605,   632,   641,   389,   389,   667,
     667,   605,    52,   165,   219,   392,   605,   632,   644,   471,
     474,   667,   475,   667,   603,   582,   605,   605,   605,   605,
       5,   676,   677,   389,    39,   377,   656,   672,   605,   605,
     470,   518,   645,   127,   153,   254,   259,   264,   398,   408,
     605,   259,   470,   605,   391,    47,   170,   183,   188,   223,
     358,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,    26,    33,   363,   625,   174,   156,   613,   336,   470,
     624,   171,   227,   380,   384,   386,   410,   526,   661,   659,
     165,   560,   633,   560,   470,   668,   471,   661,   488,   661,
     765,   605,   471,   470,   474,    36,   121,   414,   535,   336,
     337,   461,   462,   543,   545,   607,   356,   213,   270,   474,
       4,   544,   667,   544,   336,   337,   545,   660,   661,   258,
     360,   558,   553,   538,   471,   414,   684,    35,   112,   282,
     470,   517,   780,   669,   470,   669,   785,   794,   796,   322,
     774,   470,   182,   714,   663,   213,   254,   213,   414,   470,
     707,   582,   663,   669,   182,   663,   182,   669,    22,   132,
     353,   676,   697,   712,   770,   773,   663,   676,   706,   726,
     663,   771,   663,   322,   353,   498,   774,   500,   672,   663,
     500,   672,   663,   500,   322,   353,   774,   663,   663,   663,
     663,   322,   353,   774,   663,   663,   531,   531,   531,   422,
     634,   471,   605,   605,   605,   653,   306,   805,   471,   474,
     267,   165,   391,   800,   471,   471,   426,   661,   669,   733,
     470,   147,   147,   223,   669,   704,   714,   718,   721,   730,
     732,   433,   435,   709,   146,   517,   433,   752,   254,   269,
     745,   664,   745,   269,   745,   254,    35,   463,   470,   500,
     514,   807,   471,   474,    35,   804,   668,   804,   254,   259,
     308,   804,   804,   738,    34,   583,   468,   468,   391,   391,
     391,   470,   391,   667,   582,   587,   471,   632,   605,   134,
     648,   649,    35,   471,   605,   471,   471,   471,   471,   165,
     471,   471,   471,   474,   471,   472,   291,   639,   471,   606,
     606,   605,    11,    15,    16,    17,   188,   209,   271,   457,
     458,   459,   461,   462,   463,   464,   465,   466,   628,   606,
     471,   471,   160,   165,   642,   643,   471,   453,   453,   471,
     471,    35,   644,   632,   644,   644,   165,   471,   655,   605,
     471,   471,   471,   453,   606,   606,   140,   632,   165,   127,
     153,   259,   264,   398,   408,   470,   140,   631,   605,   377,
     656,   605,   645,   605,   391,   470,   518,   470,   470,   279,
     617,   384,   386,   384,   386,   661,   380,   527,   527,   527,
     218,   337,   470,   518,   561,   562,   563,   570,   573,   608,
     610,   611,   669,   430,   578,   531,   578,   667,   603,   674,
     762,   534,   271,   626,   629,   455,   536,     4,   667,   545,
     270,   412,   542,   474,   232,   561,   430,   683,   669,   420,
     379,   413,   789,   669,   784,   793,   269,   786,   790,   796,
     655,   474,   560,   459,   391,   605,   254,   729,   470,   147,
     470,   707,   191,   727,   690,   273,   700,   690,    22,   132,
     326,   327,   353,   767,   768,   769,   775,   776,   147,   745,
     147,   745,   697,   712,   697,   668,   693,   471,   474,   459,
     472,   471,   474,   391,   340,    84,   391,   505,   340,   391,
     391,   391,   340,   471,   471,   471,   634,   469,   370,   371,
     668,   814,   722,   805,    35,    35,   661,   723,   484,   380,
     727,   661,   661,   756,   661,   471,   474,   267,   702,   267,
     269,   701,   663,   433,   755,   702,    35,   147,   661,   672,
     147,   514,   802,   813,   808,   668,   668,   259,   727,   463,
     727,   668,   668,   468,   667,   469,   667,   180,   240,   604,
     240,   604,   604,   667,   243,   471,   471,   388,   605,   138,
     582,   471,   605,   605,   631,   605,   642,   582,   606,   606,
     606,   606,   127,   254,   264,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   605,   605,   643,   642,   602,
     602,   582,   471,   471,   471,   632,   471,   475,   668,   605,
      32,    32,   605,   471,   605,   165,   470,   635,   605,   471,
     140,   606,   606,   140,   140,   605,   605,   532,   430,   470,
     618,   669,   527,   527,   527,   527,   661,   661,   661,   518,
     573,   165,   518,   562,   563,    35,   564,   565,   669,   474,
      92,   166,   197,   212,   221,   248,   332,   567,   565,    35,
     564,   566,   669,   456,   577,   654,   605,   174,   547,   471,
     547,   471,   471,   470,   536,   157,   217,   270,   661,   605,
     329,   788,   419,   655,   471,   474,    82,   788,   471,   474,
     785,   683,   605,   663,   471,   147,   727,   714,   727,   690,
     717,   471,   114,   195,   252,   254,   713,   470,   724,   169,
     112,   181,   254,   702,   499,   105,   112,   169,   254,   369,
     372,   501,   702,   353,   769,   401,   663,   669,   773,   253,
     271,   354,   461,   462,   500,   582,   629,   668,   671,   691,
     728,   820,   676,   726,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   531,   499,   814,   605,   605,   470,
     752,   182,   661,   471,   493,   470,    35,   711,   709,   718,
      78,   778,   105,   252,   517,   717,   414,   749,   745,   756,
     471,   474,   727,   667,   469,   469,   471,   605,   471,   471,
     643,   165,   127,   264,   470,   471,   603,   605,   605,   605,
     635,   471,   605,    32,    32,   605,   605,   140,   471,   471,
     605,   619,   669,   661,   661,   661,   661,   565,   566,   470,
     471,     5,   669,   670,   470,   562,   212,   278,   568,   562,
     568,   212,   567,   568,   212,   382,   571,   470,   669,   470,
     276,    53,   177,   551,   668,   551,   668,   631,   658,   517,
     282,   517,   784,   269,   470,   782,   459,   796,   788,   690,
     714,   471,   471,   433,   720,   115,   184,   193,   114,   416,
     697,   715,    66,    72,    84,   112,   114,   169,   195,   254,
     259,   301,   316,   407,   695,   696,   708,    29,    53,   734,
     182,   259,   500,   605,   734,   259,   461,   462,   503,   669,
     582,   745,   745,   671,   673,   459,   391,   391,   471,   806,
     414,   801,   803,   727,    35,   254,   470,   752,   721,   146,
     517,   144,   189,   701,   117,   132,   300,   755,   105,   433,
     798,   269,   669,   748,   470,    35,   813,   469,   606,   165,
     470,   635,   471,   605,   605,   605,   471,   288,   620,   574,
     575,   610,   564,   470,   662,   562,   269,   414,   569,   562,
     212,   562,   665,   579,   580,   669,   470,   579,   669,   470,
     548,   549,   550,   605,   605,   432,   614,   614,   471,   789,
      84,   470,   610,   669,   787,   795,   128,   605,   316,   720,
     470,   710,   690,   471,   474,   470,   672,   663,   606,   734,
     115,   184,   114,   259,   213,   661,   720,   112,    35,   147,
      72,   581,   673,   465,   691,   663,   663,   499,   119,   471,
     517,   147,    35,   471,   663,   755,    26,    77,    85,   113,
     181,   192,   369,   372,   705,   705,   337,   337,    58,    66,
     227,   661,   795,   606,   635,   471,    53,   531,   471,   474,
      35,   576,   662,   471,   605,   470,   562,   569,   470,   471,
     474,   582,   579,   471,   471,   474,   615,   616,   669,   419,
     663,   605,    72,   791,   791,   471,   474,   255,   412,   661,
     690,   676,   716,   719,   697,   605,   254,   696,    35,   720,
     723,   181,   672,   414,   772,   465,   401,   806,   668,   752,
     798,   661,   517,   709,   778,    66,   272,    66,   749,   471,
     471,   632,   309,   337,   621,   577,   574,   470,   471,   662,
     632,   580,   581,   471,   549,   474,    35,   517,   471,   672,
     672,   792,   792,   578,   787,   353,   723,   459,   471,   474,
     471,   181,   236,   731,   470,   692,   605,   401,    35,   470,
     798,   701,   755,   272,   272,   470,   752,    47,    95,   403,
     605,   622,   623,   622,   471,   579,   471,   471,   616,   618,
     791,   535,   535,   794,   731,   691,   719,   252,   703,   692,
     166,   287,   359,   269,   698,   699,   725,   498,   517,   795,
     578,   623,   336,   159,   296,   159,   296,   471,   323,   572,
     792,   536,   536,   578,   699,   193,   117,   412,   269,   725,
     269,   698,   471,   798,   471,    32,   470,   535,   690,    57,
     252,   328,   353,   694,   694,   752,   623,   605,   536,    21,
     112,   259,   578,   471
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   477,   478,   479,   479,   480,   480,   480,   480,   480,
     480,   480,   480,   480,   480,   480,   480,   480,   480,   480,
     480,   480,   480,   480,   480,   480,   480,   480,   480,   480,
     480,   480,   480,   480,   480,   480,   480,   480,   480,   481,
     482,   483,   483,   484,   484,   485,   485,   485,   485,   486,
     486,   486,   486,   486,   486,   487,   487,   487,   487,   487,
     488,   488,   488,   488,   488,   489,   489,   490,   490,   491,
     491,   492,   492,   493,   493,   494,   494,   495,   495,   495,
     496,   497,   497,   498,   498,   499,   499,   499,   500,   500,
     500,   500,   501,   501,   501,   501,   501,   501,   501,   501,
     501,   501,   501,   501,   501,   501,   502,   502,   503,   503,
     503,   504,   504,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,   504,   505,   505,   506,   506,   506,   506,
     507,   507,   508,   508,   508,   509,   509,   509,   509,   509,
     510,   510,   510,   510,   511,   511,   512,   512,   513,   513,
     514,   514,   514,   514,   515,   516,   516,   517,   517,   518,
     518,   519,   519,   519,   519,   519,   519,   519,   519,   520,
     520,   521,   521,   521,   521,   521,   521,   521,   522,   522,
     522,   523,   523,   524,   525,   525,   526,   526,   526,   526,
     526,   526,   526,   526,   526,   527,   527,   528,   528,   528,
     529,   529,   530,   530,   531,   531,   532,   533,   533,   534,
     534,   535,   535,   535,   536,   536,   536,   537,   537,   537,
     537,   538,   538,   539,   539,   539,   539,   540,   540,   541,
     541,   542,   543,   543,   543,   544,   544,   545,   545,   546,
     546,   547,   547,   548,   548,   549,   549,   550,   551,   551,
     552,   552,   553,   553,   554,   554,   555,   556,   556,   556,
     556,   557,   557,   558,   558,   558,   559,   559,   560,   560,
     561,   561,   562,   562,   562,   562,   562,   562,   562,   562,
     563,   563,   563,   563,   563,   563,   564,   564,   564,   564,
     565,   565,   566,   566,   566,   566,   566,   567,   567,   567,
     567,   568,   568,   569,   569,   570,   570,   570,   570,   571,
     572,   572,   573,   573,   574,   575,   575,   576,   576,   577,
     577,   578,   578,   579,   579,   580,   581,   581,   582,   582,
     582,   582,   582,   582,   583,   583,   583,   584,   584,   584,
     584,   584,   584,   584,   585,   585,   585,   585,   586,   586,
     587,   587,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   589,   589,   590,   590,   591,   591,   592,
     593,   594,   594,   595,   595,   596,   597,   598,   598,   598,
     598,   598,   598,   599,   599,   600,   600,   600,   600,   601,
     602,   602,   602,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   604,   604,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   607,   607,   607,   607,   607,
     607,   607,   607,   607,   607,   608,   608,   608,   608,   608,
     608,   608,   609,   609,   610,   610,   611,   611,   611,   611,
     611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
     611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
     611,   611,   611,   611,   612,   612,   613,   613,   614,   614,
     615,   615,   616,   617,   617,   617,   618,   619,   619,   620,
     620,   621,   621,   621,   622,   622,   623,   623,   623,   623,
     623,   624,   624,   624,   625,   625,   625,   626,   626,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   628,   628,   629,   629,   630,   630,   630,   630,   630,
     630,   630,   630,   631,   631,   632,   632,   633,   633,   634,
     634,   634,   635,   635,   636,   636,   637,   637,   637,   637,
     637,   637,   637,   637,   638,   638,   639,   640,   640,   641,
     641,   641,   641,   641,   641,   642,   643,   644,   644,   644,
     645,   645,   646,   647,   647,   648,   649,   649,   650,   650,
     651,   651,   652,   652,   652,   652,   653,   653,   654,   654,
     655,   655,   656,   656,   657,   657,   658,   658,   659,   659,
     659,   659,   660,   660,   661,   661,   662,   662,   663,   664,
     665,   665,   666,   666,   666,   666,   666,   666,   666,   666,
     666,   666,   666,   666,   666,   666,   667,   668,   669,   669,
     669,   670,   670,   671,   671,   671,   672,   672,   673,   673,
     674,   674,   675,   676,   676,   676,   676,   676,   677,   677,
     678,   678,   678,   678,   679,   679,   680,   680,   681,   682,
     682,   682,   683,   683,   684,   684,   685,   685,   685,   685,
     685,   685,   686,   686,   686,   687,   688,   688,   688,   688,
     689,   689,   690,   690,   691,   691,   691,   691,   691,   691,
     692,   692,   693,   694,   694,   694,   694,   694,   695,   695,
     695,   695,   696,   696,   696,   696,   696,   696,   696,   696,
     697,   698,   699,   699,   699,   699,   699,   700,   700,   701,
     701,   701,   701,   702,   703,   703,   704,   704,   705,   705,
     705,   705,   705,   705,   705,   705,   706,   706,   707,   708,
     708,   708,   708,   709,   709,   709,   709,   710,   711,   711,
     711,   712,   713,   713,   713,   713,   713,   713,   714,   715,
     715,   716,   716,   717,   718,   718,   718,   719,   719,   720,
     720,   721,   721,   722,   723,   723,   724,   724,   725,   726,
     726,   726,   726,   727,   727,   728,   728,   728,   729,   729,
     729,   729,   729,   729,   730,   730,   731,   731,   731,   731,
     732,   733,   733,   733,   733,   733,   733,   733,   733,   734,
     734,   735,   735,   735,   736,   736,   736,   736,   737,   737,
     737,   737,   738,   738,   739,   739,   739,   739,   739,   739,
     739,   740,   740,   741,   741,   741,   741,   741,   741,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   743,   743,   743,   743,   743,   743,   743,   744,
     744,   745,   745,   745,   746,   746,   746,   747,   747,   748,
     749,   749,   750,   750,   751,   751,   752,   752,   753,   753,
     754,   754,   755,   755,   755,   756,   757,   758,   758,   759,
     759,   759,   760,   761,   761,   762,   762,   762,   762,   763,
     764,   765,   765,   766,   766,   766,   766,   766,   766,   766,
     766,   767,   767,   768,   768,   769,   769,   769,   769,   770,
     770,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     772,   772,   773,   773,   773,   773,   774,   774,   775,   776,
     776,   777,   777,   777,   778,   778,   779,   780,   780,   780,
     780,   780,   781,   781,   782,   782,   782,   783,   783,   784,
     785,   785,   786,   786,   786,   787,   787,   787,   788,   788,
     789,   789,   790,   790,   791,   791,   792,   792,   793,   793,
     794,   794,   795,   795,   796,   797,   797,   797,   797,   798,
     798,   798,   798,   799,   799,   800,   800,   801,   801,   802,
     802,   803,   803,   804,   804,   805,   805,   806,   806,   807,
     807,   807,   807,   807,   808,   809,   809,   810,   810,   811,
     811,   812,   812,   812,   812,   812,   812,   812,   812,   812,
     812,   812,   812,   812,   812,   813,   814,   814,   814,   815,
     815,   816,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,
     818,   818,   818,   818,   818,   818,   818,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     4,     7,     2,     0,     1,     1,     1,     1,     6,
       8,     6,     8,     6,     8,     4,     5,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     5,     8,     1,     0,     8,     8,     2,     4,     5,
       2,     4,     6,     1,     2,     1,     1,     0,     1,     2,
       2,     1,     2,     2,     1,     2,     3,     2,     2,     2,
       2,     3,     3,     3,     1,     3,     1,     0,     1,     2,
       2,     6,     6,     8,     6,     8,     6,     8,     6,     8,
       8,    10,     8,    10,     1,     0,     2,     4,     3,     5,
       1,     0,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     2,     4,     4,     2,     3,     5,     5,     1,
       1,     9,     9,     1,     2,     4,     4,     4,     2,     2,
       3,     1,     3,     6,     2,     0,     3,     3,     4,     4,
       4,     4,     3,     2,     1,     1,     0,     1,     1,     0,
       1,     5,     1,     0,     1,     0,     3,     1,     3,     4,
       3,     1,     1,     0,     2,     2,     0,     2,     2,     1,
       1,     1,     0,     2,     4,     5,     4,     2,     3,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     3,     0,     1,     3,     1,     1,     2,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     2,     0,
       1,     3,     2,     3,     2,     3,     2,     3,     1,     4,
       3,     4,     5,     4,     5,     4,     5,     2,     4,     1,
       1,     0,     1,     4,     5,     4,     0,     2,     2,     2,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     6,
       4,     0,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     3,
       5,     6,     2,     3,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     0,     1,     4,     1,
       3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
       3,     2,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     2,     4,
       1,     1,     1,     2,     2,     3,     5,     6,     8,     6,
       6,     4,     4,     1,     1,     1,     5,     1,     1,     4,
       1,     4,     1,     4,     1,     4,     1,     1,     1,     1,
       1,     1,     6,     4,     4,     4,     4,     6,     5,     5,
       5,     4,     6,     4,     5,     0,     5,     0,     2,     0,
       1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
       0,     2,     2,     0,     1,     4,     2,     2,     2,     2,
       2,     4,     3,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     4,     1,     4,     1,     2,     1,
       2,     1,     2,     1,     3,     1,     3,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     2,     2,     3,     5,     1,     0,     1,     2,
       0,     2,     1,     0,     1,     0,     1,     3,     3,     2,
       1,     1,     1,     3,     1,     2,     1,     3,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     6,     2,
       3,     5,     6,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     4,     2,     1,     1,     1,     3,     7,     1,
       2,     3,     2,     0,     2,     0,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     8,     2,     3,     2,     3,
       9,    12,     0,     2,     1,     1,     1,     1,     1,     1,
       3,     0,     1,     2,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     1,     2,     3,     5,     2,     5,     5,
       2,     3,     1,     1,     2,     2,     0,     4,     0,     3,
       4,     4,     0,     3,     2,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     1,
       2,     2,     2,     2,     2,     2,     0,     3,     3,     3,
       0,     1,     2,     1,     2,     2,     2,     2,     4,     1,
       3,     1,     3,     1,     1,     1,     1,     3,     1,     2,
       0,     1,     0,     1,     3,     0,     2,     0,     3,     3,
       1,     5,     3,     1,     3,     1,     4,     5,     5,     6,
       3,     7,     4,    11,     1,     3,     2,     2,     2,     0,
       3,     1,     1,     2,     2,     2,     2,     1,     0,     1,
       2,     2,     3,     3,     1,     3,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     6,     4,     6,     4,     6,     8,     1,
       1,     1,     2,     1,     2,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,    13,    16,     1,
       2,     0,     1,     0,     1,     0,     2,     0,     1,     0,
       7,    10,     2,     3,     0,     4,     2,     1,     1,     1,
       2,     3,     5,     3,     0,     1,     1,     1,     1,     4,
       3,     2,     4,     4,     6,     4,     6,     4,     6,     4,
       6,     1,     2,     3,     2,     1,     3,     2,     3,     1,
       3,     2,     5,     3,     6,     4,     6,     6,     6,     5,
       5,     6,     9,     4,     5,     7,     6,     4,     8,     4,
       2,     4,     3,     6,     4,     2,     2,     2,     2,     1,
       2,     0,     1,     2,     2,     2,     1,     3,     4,     2,
       0,     3,     9,    12,     3,     0,     7,     1,     4,     4,
       7,     2,     1,     3,     4,     3,     0,     1,     0,     2,
       3,     5,     8,     5,     0,     5,     5,     7,     2,     0,
       1,     1,     1,     3,     2,     0,     1,     0,     1,     3,
       1,     3,     1,     3,     2,     9,    11,    12,    14,     3,
       4,     4,     0,    11,     9,     1,     1,     3,     0,     1,
       3,     1,     0,     1,     0,     1,     0,     1,     3,     1,
       1,     1,     3,     0,     2,     2,     0,     2,     0,     1,
       0,     1,     1,     1,     3,     3,     1,     1,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YY_LOCATION_PRINT
#  if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#   define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

#  else
#   define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#  endif
# endif /* !defined YY_LOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yykind < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize;

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yynerrs = 0;
  yystate = 0;
  yyerrstatus = 0;

  yystacksize = YYINITDEPTH;
  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;


  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 454 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 470 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 482 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 38:
#line 524 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 13453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 13463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 16 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 13469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 13510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 13516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 13612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 13630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 13646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 13658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 13672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 13678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 13684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 13690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 13696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 13710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 13716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 13722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 13728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 13734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 13740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 13746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 13780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 13786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-5].range);
					n->args = (yyvsp[-3].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 13798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 16 "third_party/libpg_query/grammar/statements/create_function.y"
                                                        {
                        					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
                        					n->name = (yyvsp[-5].range);
                        					n->args = (yyvsp[-3].list);
                        					n->function = (yyvsp[0].node);
                        					(yyval.node) = (PGNode *)n;
                        				}
#line 13810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 13821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 13833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 13845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 13855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 13885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 13891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 13897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 13903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 13909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 13915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 13921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 13930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 13936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 13944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 13960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 13968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 13976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 13992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 14000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 14008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 14025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 14033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 14041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 14049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 14055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 14061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 14067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 14073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 14079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 14248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 14262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 14268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 14274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 14285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 14299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 14310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 14321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 14327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 14333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 14339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 14345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 14351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 14363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 14369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 68 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 14375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 74 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 80 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 14395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 84 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 14403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 14409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 14415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 14421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 14427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 14433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 14439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 111 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 14447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 14453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 119 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 14459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 14465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 14471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 14488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 14524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 14536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 14572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-6].list);
					n->intoClause = (yyvsp[-5].into);
					n->fromClause = (yyvsp[-4].list);
					n->whereClause = (yyvsp[-3].node);
					n->groupClause = (yyvsp[-2].list);
					n->havingClause = (yyvsp[-1].node);
					n->windowClause = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-7].list);
					n->targetList = (yyvsp[-6].list);
					n->intoClause = (yyvsp[-5].into);
					n->fromClause = (yyvsp[-4].list);
					n->whereClause = (yyvsp[-3].node);
					n->groupClause = (yyvsp[-2].list);
					n->havingClause = (yyvsp[-1].node);
					n->windowClause = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 14605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 14611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 14634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 230 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 14669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 14680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 244 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 14691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 254 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 258 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 14716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 14730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 280 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 14736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 304 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 14805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 14814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 14823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 14829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 14835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 14841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 14847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 14853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 14859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 356 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 14871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 361 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 14877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 14883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 14889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 14901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 14907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 14920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 14933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 398 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 14939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 14945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 14951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 14957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 14963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 14969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 14975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 410 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 14981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 14987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 14993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 14999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 15005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 422 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 15024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 440 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 15030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 15036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 15042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 450 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 15048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 15063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 463 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 15081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 487 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 15087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 15093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 15099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 15105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 15111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 15117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 15123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 15147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 15167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 15179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 15203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 15227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 15233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 15239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 15245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 588 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 15251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 593 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 15263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 15269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 15275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 15281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 639 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-1].range)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-1].range);
				}
#line 15334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeTableSample *n = (PGRangeTableSample *) (yyvsp[0].node);
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					/* relation_expr goes inside the PGRangeTableSample node */
					n->relation = (PGNode *) (yyvsp[-2].range);
					(yyval.node) = (PGNode *) n;
				}
#line 15346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 15408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 15437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 15445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 15454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 15462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					(yyval.jexpr) = n;
				}
#line 15478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					(yyval.jexpr) = n;
				}
#line 15495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					(yyval.jexpr) = n;
				}
#line 15513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					(yyval.jexpr) = n;
				}
#line 15528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					(yyval.jexpr) = n;
				}
#line 15544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 15554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 15563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 15573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 15582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 15588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 15594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 15602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 15610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 15620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 15630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 15638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 15644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 15650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 15656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 15662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 15668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 15674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 15680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 15697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 15708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 15719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 15730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeTableSample *n = makeNode(PGRangeTableSample);
					/* n->relation will be filled in later */
					n->method = (yyvsp[-4].list);
					n->args = (yyvsp[-2].list);
					n->repeatable = (yyvsp[0].node);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) n;
				}
#line 15744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].node); }
#line 15750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 975 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 15756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 991 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 15770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 1001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 15784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 15790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 15796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 15802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 15814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 1025 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 15820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 15826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 1031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 1032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 15838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 1042 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 1048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 15876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 1069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 15888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 15894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 1089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 15903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 15913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 15922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 1106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 15932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 15941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 15951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 1126 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 15963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 15969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 1140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 1165 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 1179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-2]);
				}
#line 16062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 1193 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 1200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 1225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 1235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 1247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 16201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 16209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 1295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 1303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 1348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 1362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 16322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 16352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 16376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 1453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 1460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 16447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 1462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 16465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 16471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 16477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 1473 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 16483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 16489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 1477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = (yyvsp[0].list); }
#line 16495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 1479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 16504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 1484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 16513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 1495 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(DAY) |
												INTERVAL_MASK(HOUR) |
												INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 16544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(HOUR) |
												INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 16555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
					linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(MINUTE) |
												INTERVAL_MASK(SECOND), (yylsp[-2]));
				}
#line 16565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 16571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0])));
				}
#line 16579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[-3])),
									makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 1565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1567 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 16600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 16622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 16634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1602 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1608 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1610 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1621 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 16724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 16742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 16748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 16777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 16786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 16797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 16818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 16827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 16839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 16851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 16863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 16875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 16887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 16899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 16911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 16935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 16947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 16967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 16979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 16991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1871 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 1887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 17143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 17169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 17195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1])); }
#line 17225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 1982 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 1992 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 1994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 2000 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 2002 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 2010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 2035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 17387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 2050 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 17406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 17422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 2092 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 17477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 17500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 17546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 17616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 17644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 17652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 17660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 17676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 17692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 17708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 17724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 17732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 17740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 17748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 17756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 2314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 17764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5])); }
#line 17770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 2320 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 2338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 17830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 2371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 2379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 17873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 17884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 2396 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 17902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 2415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 17926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 17932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 2422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 17942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 2430 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 17948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 17965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 17971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 17989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 2475 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 17995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 18001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 2492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-1]))));
					(yyval.windef) = n;
				}
#line 18035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 2510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 18119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 2641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 18197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 18215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 18227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 18233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 2655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 18239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 18245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 18251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 18257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 18269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 18281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 18293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 18299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2671 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2685 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2687 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 18341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2689 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 18347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2693 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 18359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 18365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2697 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 18371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2713 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 18383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 18436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 18449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 18455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 18461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "year"; }
#line 18487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "month"; }
#line 18493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "day"; }
#line 18499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "hour"; }
#line 18505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "minute"; }
#line 18511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2783 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "second"; }
#line 18517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 18551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), -1));
				}
#line 18601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 18609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 2866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 18633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 18656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 2884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 18662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 18676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 18700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 2925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 2929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 18732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 18740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 18748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 18756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 18768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 18780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 2981 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 18834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 18840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 18852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 18864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 18876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 18892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 18898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 18904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 18912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 18941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 18953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 18980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 3134 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 18988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 3138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 3142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 3146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 19080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 19090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGTypeName *t = (yyvsp[-5].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						t->typmods = lappend((yyvsp[0].list), makeParamRef(0, (yylsp[-3])));
					}
					else
						t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
												makeParamRef(0, (yylsp[-3])));
					(yyval.node) = makeParamRefCast(0, (yylsp[-1]), t);
				}
#line 19117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 3228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 19141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 19147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 3259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 3264 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 19213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 4 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 19289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 19299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 16 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 22 "third_party/libpg_query/grammar/statements/variable_show.y"
                                {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 31 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 33 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 19345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 19364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 19430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 19463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 19496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 41 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 43 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 19604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 69 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 19610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 70 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 19616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 71 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 19622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 72 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 73 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 74 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 19640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 78 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 79 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 19652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 19658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 19664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 90 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 19670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 91 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 19676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 92 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 19682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 19688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 19699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 125 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 132 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 139 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 149 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 159 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 171 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 180 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 19820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 189 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 208 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 214 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 19853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 222 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 19865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 224 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 19871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 19877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 228 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 19883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 233 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 234 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 19895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 238 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 19901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 239 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 19907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 19913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 241 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 19919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 246 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 250 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 19931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 19937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 19948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 19966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 19972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 271 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 19978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 19990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 19996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 275 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 281 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 282 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 299 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 306 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 324 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 326 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 20106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 20112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 351 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 353 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 20177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 392 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 401 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 402 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 403 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 408 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 20237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 419 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 20269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 439 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 444 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 445 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 455 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 20315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 459 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 463 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 20340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 476 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 488 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 513 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 20488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 591 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 595 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 602 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 20512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 606 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 20524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 20532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 626 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 635 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 636 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 638 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 640 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 20586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 647 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 20597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 20603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 654 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 20609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 20641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 20668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 20695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 20707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 20719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 20730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 20747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 20753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 20788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 20817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 20913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 20925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 20937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 20943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 20949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 20955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 20961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 20973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 20979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 20985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 20997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 91 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 92 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 21159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 21189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 21195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 21284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 21311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 21346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 21731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 21811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 21954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 21980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 22012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 22081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 22093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 22153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 22174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 22252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 22278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 22286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 22343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 22367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 22391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 22415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 22421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 22427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 22519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 22537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 22569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					(yyval.node) = (PGNode *)n;
				}
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 22925 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 19 "third_party/libpg_query/grammar/statements/checkpoint.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, -1);
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}

static PGNode *
makeParamRefCast(int number, int location, PGTypeName *tpname)
{
	PGNode *p = makeParamRef(number, location);
	return makeTypeCast(p, tpname, -1);
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
