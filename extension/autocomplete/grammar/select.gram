SelectStatement <- BaseSelect (SetopClause BaseSelect)*

SetopClause <- ('UNION'i / 'EXCEPT'i / 'INTERSECT'i) 'ALL'i?

BaseSelect <- SimpleSelect / ValuesClause

SimpleSelect <- WithClause? SelectFrom WhereClause? GroupByClause? HavingClause? WindowClause? QualifyClause? OrderByClause? LimitClause? OffsetClause?

SelectFrom <- (SelectClause FromClause?) / (FromClause SelectClause?)
WithStatement <- Identifier 'AS'i SubqueryReference
WithClause <- 'WITH'i List(WithStatement)
SelectClause <- 'SELECT'i DistinctClause? TargetList
TargetList <- List(AliasedExpression)
ColumnAliases <- Parens(List(Identifier))

DistinctClause <- ('DISTINCT'i DistinctOn?) / 'ALL'i
DistinctOn <- 'ON'i Parens(List(Expression))

InnerTableRef <- TableFunction / TableSubquery / BaseTableRef

TableRef <- InnerTableRef JoinClause*
TableSubquery <- SubqueryReference TableAlias?
BaseTableRef <- BaseTableName TableAlias?
BaseTableName <- CatalogQualification? SchemaQualification? TableName

TableFunction <- TableFunctionName TableFunctionArguments TableAlias?
TableFunctionArguments <- Parens(List(FunctionArgument)?)
FunctionArgument <- NamedParameter / Expression
NamedParameter <- Identifier NamedParameterAssignment Expression
NamedParameterAssignment <- ':=' / '=>'

TableAlias <- 'AS'i? Identifier ColumnAliases?

JoinClause <- RegularJoinClause / JoinWithoutOnClause
RegularJoinClause <- JoinType? 'JOIN'i InnerTableRef JoinQualifier
JoinWithoutOnClause <- JoinPrefix 'JOIN'i InnerTableRef
JoinQualifier <- ('ON'i Expression) / 'USING'i Parens(List(Identifier))

OuterJoinType <- 'FULL'i / 'LEFT'i / 'RIGHT'i
JoinType <- (OuterJoinType 'OUTER'i?) / 'SEMI'i / 'ANTI'i / 'INNER'i
JoinPrefix <- 'CROSS'i / ('NATURAL'i JoinType?) / 'POSITIONAL'i / 'ASOF'i

FromClause <- 'FROM'i List(TableRef)
WhereClause <- 'WHERE'i Expression
GroupByClause <- 'GROUP'i 'BY'i GroupByExpressions
HavingClause <- 'HAVING'i Expression
QualifyClause <- 'QUALIFY'i Expression
WindowClause <- 'WINDOW'i List(WindowDefinition)
WindowDefinition <- Identifier 'AS'i WindowFrameDefinition

GroupByExpressions <- List(Expression) / 'ALL'i

SubqueryReference <- Parens(SelectStatement)

OrderByExpression <- Expression ('DESC'i / 'ASC'i)?  ('NULLS'i 'FIRST'i / 'LAST'i)?
OrderByClause <- 'ORDER'i 'BY'i OrderByExpressions
OrderByExpressions <- List(OrderByExpression) / 'ALL'i

LimitClause <- 'LIMIT'i NumberLiteral
OffsetClause <- 'OFFSET'i NumberLiteral

AliasedExpression <- Expression ('AS'i? Identifier)?

ValuesClause <- 'VALUES'i List(ValuesExpressions)
ValuesExpressions <- Parens(List(Expression))
