[
    {
        "name": "flatten",
        "parameters": "nested_list",
        "description": "Flatten a nested list by one level",
        "example": "flatten([[1, 2, 3], [4, 5]])",
        "struct": "ListFlattenFun",
        "type": "scalar_function"
    },
    {
        "name": "list_value",
        "parameters": "any,...",
        "description": "Create a LIST containing the argument values.",
        "example": "list_value(4, 5, 6)",
        "struct": "ListValueFun",
        "type": "scalar_function",
        "aliases": ["list_pack"]
    },
    {
        "name": "list_slice",
        "parameters": "list,begin,end",
        "description": "Extract a sublist using slice conventions. NULLs are interpreted as the bounds of the LIST. Negative values are accepted.",
        "example": "list_slice(l, 2, NULL)",
        "struct": "ListSliceFun",
        "type": "scalar_function",
        "aliases": ["array_slice"]
    },
    {
        "name": "list_sort",
        "parameters": "list",
        "description": "Sorts the elements of the list.",
        "example": "list_sort([3, 6, 1, 2])",
        "struct": "ListSortFun",
        "type": "scalar_function_set",
        "aliases": ["array_sort"]
    },
    {
        "name": "list_reverse_sort",
        "parameters": "list",
        "description": "Sorts the elements of the list in reverse order.",
        "example": "list_reverse_sort([3, 6, 1, 2])",
        "struct": "ListReverseSortFun",
        "type": "scalar_function_set",
        "aliases": ["array_reverse_sort"]
    },
    {
        "name": "list_transform",
        "parameters": "list,lambda",
        "description": "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.",
        "example": "list_transform([1, 2, 3], x -> x + 1)",
        "struct": "ListTransformFun",
        "type": "scalar_function",
        "aliases": ["array_transform", "list_apply", "array_apply", "apply"]
    },
    {
        "name": "list_filter",
        "parameters": "list,lambda",
        "description": "Constructs a list from those elements of the input list for which the lambda function returns true.",
        "example": "list_filter([3, 4, 5], x -> x > 4)",
        "struct": "ListFilterFun",
        "type": "scalar_function",
        "aliases": ["array_filter", "filter"]
    }
]
