diff --git a/src/include/storage/sqlite_schema_entry.hpp b/src/include/storage/sqlite_schema_entry.hpp
index 5bd82b3..1ecdb04 100644
--- a/src/include/storage/sqlite_schema_entry.hpp
+++ b/src/include/storage/sqlite_schema_entry.hpp
@@ -20,7 +20,7 @@ public:
 public:
 	optional_ptr<CatalogEntry> CreateTable(CatalogTransaction transaction, BoundCreateTableInfo &info) override;
 	optional_ptr<CatalogEntry> CreateFunction(CatalogTransaction transaction, CreateFunctionInfo &info) override;
-	optional_ptr<CatalogEntry> CreateIndex(ClientContext &context, CreateIndexInfo &info,
+	optional_ptr<CatalogEntry> CreateIndex(CatalogTransaction transaction, CreateIndexInfo &info,
 	                                       TableCatalogEntry &table) override;
 	optional_ptr<CatalogEntry> CreateView(CatalogTransaction transaction, CreateViewInfo &info) override;
 	optional_ptr<CatalogEntry> CreateSequence(CatalogTransaction transaction, CreateSequenceInfo &info) override;
@@ -32,7 +32,7 @@ public:
 	                                                CreatePragmaFunctionInfo &info) override;
 	optional_ptr<CatalogEntry> CreateCollation(CatalogTransaction transaction, CreateCollationInfo &info) override;
 	optional_ptr<CatalogEntry> CreateType(CatalogTransaction transaction, CreateTypeInfo &info) override;
-	void Alter(ClientContext &context, AlterInfo &info) override;
+	void Alter(CatalogTransaction transaction, AlterInfo &info) override;
 	void Scan(ClientContext &context, CatalogType type, const std::function<void(CatalogEntry &)> &callback) override;
 	void Scan(CatalogType type, const std::function<void(CatalogEntry &)> &callback) override;
 	void DropEntry(ClientContext &context, DropInfo &info) override;
diff --git a/src/include/storage/sqlite_table_entry.hpp b/src/include/storage/sqlite_table_entry.hpp
index 6e64d55..b08319b 100644
--- a/src/include/storage/sqlite_table_entry.hpp
+++ b/src/include/storage/sqlite_table_entry.hpp
@@ -25,7 +25,7 @@ public:
 
 	TableStorageInfo GetStorageInfo(ClientContext &context) override;
 
-	void BindUpdateConstraints(LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
+	void BindUpdateConstraints(Binder &binder, LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
 	                           ClientContext &context) override;
 };
 
diff --git a/src/storage/sqlite_index.cpp b/src/storage/sqlite_index.cpp
index 5e39da6..68f941e 100644
--- a/src/storage/sqlite_index.cpp
+++ b/src/storage/sqlite_index.cpp
@@ -17,7 +17,8 @@ SourceResultType SQLiteCreateIndex::GetData(ExecutionContext &context, DataChunk
                                             OperatorSourceInput &input) const {
 	auto &catalog = table.catalog;
 	auto &schema = catalog.GetSchema(context.client, info->schema);
-	schema.CreateIndex(context.client, *info, table);
+	auto transaction = schema.GetCatalogTransaction(context.client);
+	schema.CreateIndex(transaction, *info, table);
 
 	return SourceResultType::FINISHED;
 }
diff --git a/src/storage/sqlite_schema_entry.cpp b/src/storage/sqlite_schema_entry.cpp
index 21f38cf..d5ddf1d 100644
--- a/src/storage/sqlite_schema_entry.cpp
+++ b/src/storage/sqlite_schema_entry.cpp
@@ -100,9 +100,9 @@ string GetCreateIndexSQL(CreateIndexInfo &info, TableCatalogEntry &tbl) {
 	return sql;
 }
 
-optional_ptr<CatalogEntry> SQLiteSchemaEntry::CreateIndex(ClientContext &context, CreateIndexInfo &info,
+optional_ptr<CatalogEntry> SQLiteSchemaEntry::CreateIndex(CatalogTransaction transaction, CreateIndexInfo &info,
                                                           TableCatalogEntry &table) {
-	auto &sqlite_transaction = SQLiteTransaction::Get(context, table.catalog);
+	auto &sqlite_transaction = SQLiteTransaction::Get(transaction.GetContext(), table.catalog);
 	sqlite_transaction.GetDB().Execute(GetCreateIndexSQL(info, table));
 	return nullptr;
 }
@@ -219,12 +219,12 @@ void SQLiteSchemaEntry::AlterTable(SQLiteTransaction &sqlite_transaction, Remove
 	sqlite_transaction.GetDB().Execute(sql);
 }
 
-void SQLiteSchemaEntry::Alter(ClientContext &context, AlterInfo &info) {
+void SQLiteSchemaEntry::Alter(CatalogTransaction catalog_transaction, AlterInfo &info) {
 	if (info.type != AlterType::ALTER_TABLE) {
 		throw BinderException("Only altering tables is supported for now");
 	}
 	auto &alter = info.Cast<AlterTableInfo>();
-	auto &transaction = SQLiteTransaction::Get(context, catalog);
+	auto &transaction = SQLiteTransaction::Get(catalog_transaction.GetContext(), catalog);
 	switch (alter.alter_table_type) {
 	case AlterTableType::RENAME_TABLE:
 		AlterTable(transaction, alter.Cast<RenameTableInfo>());
diff --git a/src/storage/sqlite_table_entry.cpp b/src/storage/sqlite_table_entry.cpp
index fadbb39..47378b0 100644
--- a/src/storage/sqlite_table_entry.cpp
+++ b/src/storage/sqlite_table_entry.cpp
@@ -16,7 +16,8 @@ unique_ptr<BaseStatistics> SQLiteTableEntry::GetStatistics(ClientContext &contex
 	return nullptr;
 }
 
-void SQLiteTableEntry::BindUpdateConstraints(LogicalGet &, LogicalProjection &, LogicalUpdate &, ClientContext &) {
+void SQLiteTableEntry::BindUpdateConstraints(Binder &, LogicalGet &, LogicalProjection &, LogicalUpdate &,
+											 ClientContext &) {
 }
 
 TableFunction SQLiteTableEntry::GetScanFunction(ClientContext &context, unique_ptr<FunctionData> &bind_data) {
