diff --git a/src/include/storage/sqlite_index_entry.hpp b/src/include/storage/sqlite_index_entry.hpp
index 5f09b0b..9ad6cc3 100644
--- a/src/include/storage/sqlite_index_entry.hpp
+++ b/src/include/storage/sqlite_index_entry.hpp
@@ -14,7 +14,7 @@ namespace duckdb {
 
 class SQLiteIndexEntry : public IndexCatalogEntry {
 public:
-	SQLiteIndexEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateIndexInfo &info, string table_name);
+	SQLiteIndexEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateIndexInfo &info, string table_name, ClientContext &context);
 
 	string table_name;
 
diff --git a/src/include/storage/sqlite_table_entry.hpp b/src/include/storage/sqlite_table_entry.hpp
index 755c196..d228498 100644
--- a/src/include/storage/sqlite_table_entry.hpp
+++ b/src/include/storage/sqlite_table_entry.hpp
@@ -14,7 +14,7 @@ namespace duckdb {
 
 class SQLiteTableEntry : public TableCatalogEntry {
 public:
-	SQLiteTableEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateTableInfo &info);
+	SQLiteTableEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateTableInfo &info, ClientContext &context);
 
 public:
 	unique_ptr<BaseStatistics> GetStatistics(ClientContext &context, column_t column_id) override;
diff --git a/src/storage/sqlite_index_entry.cpp b/src/storage/sqlite_index_entry.cpp
index 8f92089..2c642ee 100644
--- a/src/storage/sqlite_index_entry.cpp
+++ b/src/storage/sqlite_index_entry.cpp
@@ -4,8 +4,8 @@
 namespace duckdb {
 
 SQLiteIndexEntry::SQLiteIndexEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateIndexInfo &info,
-                                   string table_name_p)
-    : IndexCatalogEntry(catalog, schema, info), table_name(std::move(table_name_p)) {
+                                   string table_name_p, ClientContext &context)
+    : IndexCatalogEntry(catalog, schema, info, &context), table_name(std::move(table_name_p)) {
 }
 
 string SQLiteIndexEntry::GetSchemaName() const {
diff --git a/src/storage/sqlite_table_entry.cpp b/src/storage/sqlite_table_entry.cpp
index 98ae723..6dbade0 100644
--- a/src/storage/sqlite_table_entry.cpp
+++ b/src/storage/sqlite_table_entry.cpp
@@ -7,8 +7,8 @@
 
 namespace duckdb {
 
-SQLiteTableEntry::SQLiteTableEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateTableInfo &info)
-    : TableCatalogEntry(catalog, schema, info) {
+SQLiteTableEntry::SQLiteTableEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateTableInfo &info, ClientContext &context)
+    : TableCatalogEntry(catalog, schema, info, &context) {
 }
 
 unique_ptr<BaseStatistics> SQLiteTableEntry::GetStatistics(ClientContext &context, column_t column_id) {
diff --git a/src/storage/sqlite_transaction.cpp b/src/storage/sqlite_transaction.cpp
index a655228..58dc2c0 100644
--- a/src/storage/sqlite_transaction.cpp
+++ b/src/storage/sqlite_transaction.cpp
@@ -56,6 +56,7 @@ optional_ptr<CatalogEntry> SQLiteTransaction::GetCatalogEntry(const string &entr
 		// no table or view found
 		return nullptr;
 	}
+	auto &client_context = *context.lock();
 	unique_ptr<CatalogEntry> result;
 	switch (type) {
 	case CatalogType::TABLE_ENTRY: {
@@ -64,16 +65,16 @@ optional_ptr<CatalogEntry> SQLiteTransaction::GetCatalogEntry(const string &entr
 		db->GetTableInfo(entry_name, info.columns, info.constraints, false);
 		D_ASSERT(!info.columns.empty());
 
-		result = make_uniq<SQLiteTableEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), info);
+		result = make_uniq<SQLiteTableEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), info, client_context);
 		break;
 	}
 	case CatalogType::VIEW_ENTRY: {
 		string sql;
 		db->GetViewInfo(entry_name, sql);
 
-		auto view_info = CreateViewInfo::FromCreateView(*context.lock(), sql);
+		auto view_info = CreateViewInfo::FromCreateView(client_context, sql);
 		view_info->internal = false;
-		result = make_uniq<ViewCatalogEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), *view_info);
+		result = make_uniq<ViewCatalogEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), *view_info, &client_context);
 		break;
 	}
 	case CatalogType::INDEX_ENTRY: {
@@ -85,7 +86,7 @@ optional_ptr<CatalogEntry> SQLiteTransaction::GetCatalogEntry(const string &entr
 		db->GetIndexInfo(entry_name, sql, table_name);
 
 		auto index_entry =
-		    make_uniq<SQLiteIndexEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), info, std::move(table_name));
+		    make_uniq<SQLiteIndexEntry>(sqlite_catalog, sqlite_catalog.GetMainSchema(), info, std::move(table_name), client_context);
 		index_entry->sql = std::move(sql);
 		result = std::move(index_entry);
 		break;
