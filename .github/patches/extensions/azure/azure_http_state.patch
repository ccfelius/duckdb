diff --git a/CMakeLists.txt b/CMakeLists.txt
index 341eb3c..540a708 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,7 @@ set(EXTENSION_SOURCES
     src/azure_extension.cpp
     src/azure_secret.cpp
     src/azure_filesystem.cpp
+    src/azure_http_state.cpp
     src/azure_storage_account_client.cpp
     src/azure_blob_filesystem.cpp
     src/azure_dfs_filesystem.cpp
diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index bc34eb9..6f0ba7d 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -3,7 +3,7 @@
 #include "azure_storage_account_client.hpp"
 #include "duckdb.hpp"
 #include "duckdb/common/exception.hpp"
-#include "duckdb/common/http_state.hpp"
+#include "azure_http_state.hpp"
 #include "duckdb/common/file_opener.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/main/secret/secret.hpp"
@@ -201,13 +201,13 @@ void AzureBlobStorageFileSystem::ReadRange(AzureFileHandle &handle, idx_t file_o
 	}
 }
 
-std::shared_ptr<AzureContextState> AzureBlobStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener,
-                                                                                    const string &path,
-                                                                                    const AzureParsedUrl &parsed_url) {
+duckdb::shared_ptr<AzureContextState>
+AzureBlobStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+                                                 const AzureParsedUrl &parsed_url) {
 	auto azure_read_options = ParseAzureReadOptions(opener);
 
-	return std::make_shared<AzureBlobContextState>(ConnectToBlobStorageAccount(opener, path, parsed_url),
-	                                               azure_read_options);
+	return make_shared_ptr<AzureBlobContextState>(ConnectToBlobStorageAccount(opener, path, parsed_url),
+	                                              azure_read_options);
 }
 
 } // namespace duckdb
diff --git a/src/azure_dfs_filesystem.cpp b/src/azure_dfs_filesystem.cpp
index 5ccbed0..5950b91 100644
--- a/src/azure_dfs_filesystem.cpp
+++ b/src/azure_dfs_filesystem.cpp
@@ -185,13 +185,13 @@ void AzureDfsStorageFileSystem::ReadRange(AzureFileHandle &handle, idx_t file_of
 	}
 }
 
-std::shared_ptr<AzureContextState> AzureDfsStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener,
-                                                                                   const string &path,
-                                                                                   const AzureParsedUrl &parsed_url) {
+duckdb::shared_ptr<AzureContextState>
+AzureDfsStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+                                                const AzureParsedUrl &parsed_url) {
 	auto azure_read_options = ParseAzureReadOptions(opener);
 
-	return std::make_shared<AzureDfsContextState>(ConnectToDfsStorageAccount(opener, path, parsed_url),
-	                                              azure_read_options);
+	return make_shared_ptr<AzureDfsContextState>(ConnectToDfsStorageAccount(opener, path, parsed_url),
+	                                             azure_read_options);
 }
 
 } // namespace duckdb
diff --git a/src/azure_filesystem.cpp b/src/azure_filesystem.cpp
index bbf5275..b2b1692 100644
--- a/src/azure_filesystem.cpp
+++ b/src/azure_filesystem.cpp
@@ -53,8 +53,8 @@ void AzureStorageFileSystem::LoadFileInfo(AzureFileHandle &handle) {
 	}
 }
 
-unique_ptr<FileHandle> AzureStorageFileSystem::OpenFile(const string &path,FileOpenFlags flags,
-														optional_ptr<FileOpener> opener) {
+unique_ptr<FileHandle> AzureStorageFileSystem::OpenFile(const string &path, FileOpenFlags flags,
+                                                        optional_ptr<FileOpener> opener) {
 	D_ASSERT(flags.Compression() == FileCompressionType::UNCOMPRESSED);
 
 	if (flags.OpenForWriting()) {
@@ -153,16 +153,16 @@ int64_t AzureStorageFileSystem::Read(FileHandle &handle, void *buffer, int64_t n
 	return nr_bytes;
 }
 
-std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(optional_ptr<FileOpener> opener,
-                                                                                     const string &path,
-                                                                                     const AzureParsedUrl &parsed_url) {
+duckdb::shared_ptr<AzureContextState>
+AzureStorageFileSystem::GetOrCreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+                                                  const AzureParsedUrl &parsed_url) {
 	Value value;
 	bool azure_context_caching = true;
 	if (FileOpener::TryGetCurrentSetting(opener, "azure_context_caching", value)) {
 		azure_context_caching = value.GetValue<bool>();
 	}
 
-	std::shared_ptr<AzureContextState> result;
+	duckdb::shared_ptr<AzureContextState> result;
 	if (azure_context_caching) {
 		auto client_context = FileOpener::TryGetClientContext(opener);
 
@@ -182,7 +182,7 @@ std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageCon
 				result = CreateStorageContext(opener, path, parsed_url);
 				registered_state[context_key] = result;
 			} else {
-				result = std::shared_ptr<AzureContextState>(storage_account_it->second, azure_context_state);
+				result = duckdb::shared_ptr<AzureContextState>(storage_account_it->second, azure_context_state);
 			}
 		}
 	} else {
diff --git a/src/azure_http_state.cpp b/src/azure_http_state.cpp
new file mode 100644
index 0000000..96fe8ce
--- /dev/null
+++ b/src/azure_http_state.cpp
@@ -0,0 +1,59 @@
+#include "azure_http_state.hpp"
+#include "duckdb/main/client_context.hpp"
+#include "duckdb/main/query_profiler.hpp"
+
+namespace duckdb {
+
+void AzureHTTPState::Reset() {
+	head_count = 0;
+	get_count = 0;
+	put_count = 0;
+	post_count = 0;
+	total_bytes_received = 0;
+	total_bytes_sent = 0;
+}
+
+shared_ptr<AzureHTTPState> AzureHTTPState::TryGetState(ClientContext &context) {
+	auto lookup = context.registered_state.find("azure_http_state");
+
+	if (lookup != context.registered_state.end()) {
+		return shared_ptr_cast<ClientContextState, AzureHTTPState>(lookup->second);
+	}
+
+	auto http_state = make_shared_ptr<AzureHTTPState>();
+	context.registered_state["azure_http_state"] = http_state;
+	return http_state;
+}
+
+shared_ptr<AzureHTTPState> AzureHTTPState::TryGetState(optional_ptr<FileOpener> opener) {
+	auto client_context = FileOpener::TryGetClientContext(opener);
+	if (client_context) {
+		return TryGetState(*client_context);
+	}
+	return nullptr;
+}
+
+void AzureHTTPState::WriteProfilingInformation(std::ostream &ss) {
+	string read = "in: " + StringUtil::BytesToHumanReadableString(total_bytes_received);
+	string written = "out: " + StringUtil::BytesToHumanReadableString(total_bytes_sent);
+	string head = "#HEAD: " + to_string(head_count);
+	string get = "#GET: " + to_string(get_count);
+	string put = "#PUT: " + to_string(put_count);
+	string post = "#POST: " + to_string(post_count);
+
+	constexpr idx_t TOTAL_BOX_WIDTH = 39;
+	ss << "┌─────────────────────────────────────┐\n";
+	ss << "│┌───────────────────────────────────┐│\n";
+	ss << "││" + QueryProfiler::DrawPadded("Azure HTTP Stats", TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││                                   ││\n";
+	ss << "││" + QueryProfiler::DrawPadded(read, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(written, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(head, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(get, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(put, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(post, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "│└───────────────────────────────────┘│\n";
+	ss << "└─────────────────────────────────────┘\n";
+}
+
+} // namespace duckdb
diff --git a/src/azure_storage_account_client.cpp b/src/azure_storage_account_client.cpp
index 5a22e60..205ae8a 100644
--- a/src/azure_storage_account_client.cpp
+++ b/src/azure_storage_account_client.cpp
@@ -75,12 +75,12 @@ static std::string AccountUrl(const AzureParsedUrl &azure_parsed_url) {
 
 template <typename T>
 static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                         std::shared_ptr<HTTPState> http_state) {
+                         duckdb::shared_ptr<AzureHTTPState> http_state) {
 	static_assert(std::is_base_of<Azure::Core::_internal::ClientOptions, T>::value,
 	              "type parameter must be an Azure ClientOptions");
 	T options;
 	options.Transport = transport_options;
-	if (nullptr != http_state) {
+	if (http_state) {
 		// Because we mainly want to have stats on what has been needed and not on
 		// what has been used on the network, we register the policy on `PerOperationPolicies`
 		// part and not the `PerRetryPolicies`. Network issues will result in retry that can
@@ -92,13 +92,13 @@ static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 
 static Azure::Storage::Blobs::BlobClientOptions
 ToBlobClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                    std::shared_ptr<HTTPState> http_state) {
+                    duckdb::shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Blobs::BlobClientOptions>(transport_options, std::move(http_state));
 }
 
 static Azure::Storage::Files::DataLake::DataLakeClientOptions
 ToDfsClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                   std::shared_ptr<HTTPState> http_state) {
+                   duckdb::shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Files::DataLake::DataLakeClientOptions>(transport_options,
 	                                                                               std::move(http_state));
 }
@@ -110,16 +110,16 @@ ToTokenCredentialOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 	return options;
 }
 
-static std::shared_ptr<HTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
+static duckdb::shared_ptr<AzureHTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
 	Value value;
 	bool enable_http_stats = false;
 	if (FileOpener::TryGetCurrentSetting(opener, "azure_http_stats", value)) {
 		enable_http_stats = value.GetValue<bool>();
 	}
 
-	std::shared_ptr<HTTPState> http_state;
+	duckdb::shared_ptr<AzureHTTPState> http_state;
 	if (enable_http_stats) {
-		http_state = HTTPState::TryGetState(opener);
+		http_state = AzureHTTPState::TryGetState(opener);
 	}
 
 	return http_state;
@@ -408,8 +408,9 @@ GetDfsStorageAccountClientFromServicePrincipalProvider(optional_ptr<FileOpener>
 	return Azure::Storage::Files::DataLake::DataLakeServiceClient(account_url, token_credential, dfs_options);
 }
 
-static Azure::Storage::Blobs::BlobServiceClient
-GetBlobStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
+static Azure::Storage::Blobs::BlobServiceClient GetBlobStorageAccountClient(optional_ptr<FileOpener> opener,
+                                                                            const KeyValueSecret &secret,
+                                                                            const AzureParsedUrl &azure_parsed_url) {
 	auto &provider = secret.GetProvider();
 	// default provider
 	if (provider == "config") {
@@ -424,7 +425,8 @@ GetBlobStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecre
 }
 
 static Azure::Storage::Files::DataLake::DataLakeServiceClient
-GetDfsStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
+GetDfsStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
+                           const AzureParsedUrl &azure_parsed_url) {
 	auto &provider = secret.GetProvider();
 	// default provider
 	if (provider == "config") {
@@ -505,7 +507,8 @@ const SecretMatch LookupSecret(optional_ptr<FileOpener> opener, const std::strin
 	return {};
 }
 
-Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
+Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener,
+                                                                     const std::string &path,
                                                                      const AzureParsedUrl &azure_parsed_url) {
 
 	auto secret_match = LookupSecret(opener, path);
@@ -519,7 +522,8 @@ Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_pt
 }
 
 Azure::Storage::Files::DataLake::DataLakeServiceClient
-ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path, const AzureParsedUrl &azure_parsed_url) {
+ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
+                           const AzureParsedUrl &azure_parsed_url) {
 	auto secret_match = LookupSecret(opener, path);
 	if (secret_match.HasMatch()) {
 		const auto &base_secret = secret_match.GetSecret();
diff --git a/src/http_state_policy.cpp b/src/http_state_policy.cpp
index be2d61d..e29da90 100644
--- a/src/http_state_policy.cpp
+++ b/src/http_state_policy.cpp
@@ -8,7 +8,7 @@ const static std::string CONTENT_LENGTH = "content-length";
 
 namespace duckdb {
 
-HttpStatePolicy::HttpStatePolicy(std::shared_ptr<HTTPState> http_state) : http_state(std::move(http_state)) {
+HttpStatePolicy::HttpStatePolicy(duckdb::shared_ptr<AzureHTTPState> http_state) : http_state(std::move(http_state)) {
 }
 
 std::unique_ptr<Azure::Core::Http::RawResponse>
diff --git a/src/include/azure_blob_filesystem.hpp b/src/include/azure_blob_filesystem.hpp
index 4d10ebe..cfc075a 100644
--- a/src/include/azure_blob_filesystem.hpp
+++ b/src/include/azure_blob_filesystem.hpp
@@ -57,10 +57,10 @@ protected:
 	const string &GetContextPrefix() const override {
 		return PATH_PREFIX;
 	}
-	std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
-	                                                        const AzureParsedUrl &parsed_url) override;
+	duckdb::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+	                                                           const AzureParsedUrl &parsed_url) override;
 	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
-													 optional_ptr<FileOpener> opener) override;
+	                                                 optional_ptr<FileOpener> opener) override;
 
 	void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) override;
 };
diff --git a/src/include/azure_dfs_filesystem.hpp b/src/include/azure_dfs_filesystem.hpp
index cdcdb23..3794ffc 100644
--- a/src/include/azure_dfs_filesystem.hpp
+++ b/src/include/azure_dfs_filesystem.hpp
@@ -55,10 +55,10 @@ protected:
 	const string &GetContextPrefix() const override {
 		return PATH_PREFIX;
 	}
-	std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
-	                                                        const AzureParsedUrl &parsed_url) override;
+	duckdb::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+	                                                           const AzureParsedUrl &parsed_url) override;
 	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
-													 optional_ptr<FileOpener> opener) override;
+	                                                 optional_ptr<FileOpener> opener) override;
 
 	void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) override;
 };
diff --git a/src/include/azure_filesystem.hpp b/src/include/azure_filesystem.hpp
index 338c744..199ee4f 100644
--- a/src/include/azure_filesystem.hpp
+++ b/src/include/azure_filesystem.hpp
@@ -99,14 +99,14 @@ public:
 
 protected:
 	virtual duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
-															 optional_ptr<FileOpener> opener) = 0;
+	                                                         optional_ptr<FileOpener> opener) = 0;
 	virtual void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) = 0;
 
 	virtual const string &GetContextPrefix() const = 0;
-	std::shared_ptr<AzureContextState> GetOrCreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
-	                                                             const AzureParsedUrl &parsed_url);
-	virtual std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
-	                                                                const AzureParsedUrl &parsed_url) = 0;
+	duckdb::shared_ptr<AzureContextState> GetOrCreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
+	                                                                const AzureParsedUrl &parsed_url);
+	virtual duckdb::shared_ptr<AzureContextState>
+	CreateStorageContext(optional_ptr<FileOpener> opener, const string &path, const AzureParsedUrl &parsed_url) = 0;
 
 	virtual void LoadRemoteFileInfo(AzureFileHandle &handle) = 0;
 	static AzureReadOptions ParseAzureReadOptions(optional_ptr<FileOpener> opener);
diff --git a/src/include/azure_http_state.hpp b/src/include/azure_http_state.hpp
new file mode 100644
index 0000000..9959628
--- /dev/null
+++ b/src/include/azure_http_state.hpp
@@ -0,0 +1,41 @@
+#pragma once
+
+#include "duckdb/common/atomic.hpp"
+#include "duckdb/common/file_opener.hpp"
+#include "duckdb/common/file_system.hpp"
+#include "duckdb/main/client_context_state.hpp"
+
+namespace duckdb {
+
+class AzureHTTPState : public ClientContextState {
+public:
+	AzureHTTPState() {
+	}
+
+public:
+	//! Reset all counters
+	void Reset();
+	//! Helper functions to get the HTTP state
+	static shared_ptr<AzureHTTPState> TryGetState(ClientContext &context);
+	static shared_ptr<AzureHTTPState> TryGetState(optional_ptr<FileOpener> opener);
+
+	bool IsEmpty() {
+		return head_count == 0 && get_count == 0 && put_count == 0 && post_count == 0 && total_bytes_received == 0 &&
+		       total_bytes_sent == 0;
+	}
+
+	atomic<idx_t> head_count {0};
+	atomic<idx_t> get_count {0};
+	atomic<idx_t> put_count {0};
+	atomic<idx_t> post_count {0};
+	atomic<idx_t> total_bytes_received {0};
+	atomic<idx_t> total_bytes_sent {0};
+
+	//! Called by the ClientContext when the current query ends
+	void QueryEnd(ClientContext &context) override {
+		Reset();
+	}
+	void WriteProfilingInformation(std::ostream &ss) override;
+};
+
+} // namespace duckdb
diff --git a/src/include/azure_storage_account_client.hpp b/src/include/azure_storage_account_client.hpp
index 600fa10..aa9a6e5 100644
--- a/src/include/azure_storage_account_client.hpp
+++ b/src/include/azure_storage_account_client.hpp
@@ -8,10 +8,12 @@
 
 namespace duckdb {
 
-Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
+Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener,
+                                                                     const std::string &path,
                                                                      const AzureParsedUrl &azure_parsed_url);
 
 Azure::Storage::Files::DataLake::DataLakeServiceClient
-ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path, const AzureParsedUrl &azure_parsed_url);
+ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
+                           const AzureParsedUrl &azure_parsed_url);
 
 } // namespace duckdb
diff --git a/src/include/http_state_policy.hpp b/src/include/http_state_policy.hpp
index 310b9c3..84501fc 100644
--- a/src/include/http_state_policy.hpp
+++ b/src/include/http_state_policy.hpp
@@ -1,6 +1,6 @@
 #pragma once
 
-#include "duckdb/common/http_state.hpp"
+#include "azure_http_state.hpp"
 #include <azure/core/context.hpp>
 #include <azure/core/http/http.hpp>
 #include <azure/core/http/policies/policy.hpp>
@@ -11,7 +11,7 @@ namespace duckdb {
 
 class HttpStatePolicy : public Azure::Core::Http::Policies::HttpPolicy {
 public:
-	HttpStatePolicy(std::shared_ptr<HTTPState> http_state);
+	HttpStatePolicy(duckdb::shared_ptr<AzureHTTPState> http_state);
 
 	std::unique_ptr<Azure::Core::Http::RawResponse> Send(Azure::Core::Http::Request &request,
 	                                                     Azure::Core::Http::Policies::NextHttpPolicy next_policy,
@@ -20,7 +20,7 @@ public:
 	std::unique_ptr<Azure::Core::Http::Policies::HttpPolicy> Clone() const override;
 
 private:
-	std::shared_ptr<HTTPState> http_state;
+	duckdb::shared_ptr<AzureHTTPState> http_state;
 };
 
 } // namespace duckdb
