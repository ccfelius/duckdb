diff --git a/spatial/src/spatial/core/functions/table/st_generatepoints.cpp b/spatial/src/spatial/core/functions/table/st_generatepoints.cpp
index 007d386..8754619 100644
--- a/spatial/src/spatial/core/functions/table/st_generatepoints.cpp
+++ b/spatial/src/spatial/core/functions/table/st_generatepoints.cpp
@@ -79,8 +79,8 @@ static void Execute(ClientContext &context, TableFunctionInput &data_p, DataChun
 	const auto chunk_size = MinValue<idx_t>(STANDARD_VECTOR_SIZE, bind_data.count - state.current_idx);
 	for (idx_t i = 0; i < chunk_size; i++) {
 
-		x_data[i] = state.rng.NextRandom(bind_data.bbox.min.x, bind_data.bbox.max.x);
-		y_data[i] = state.rng.NextRandom(bind_data.bbox.min.y, bind_data.bbox.max.y);
+		x_data[i] = state.rng.NextRandom32(bind_data.bbox.min.x, bind_data.bbox.max.x);
+		y_data[i] = state.rng.NextRandom32(bind_data.bbox.min.y, bind_data.bbox.max.y);
 
 		state.current_idx++;
 	}
diff --git a/spatial/src/spatial/core/index/rtree/rtree_index_plan_scan.cpp b/spatial/src/spatial/core/index/rtree/rtree_index_plan_scan.cpp
index b420233..f904fdd 100644
--- a/spatial/src/spatial/core/index/rtree/rtree_index_plan_scan.cpp
+++ b/spatial/src/spatial/core/index/rtree/rtree_index_plan_scan.cpp
@@ -46,7 +46,7 @@ public:
 			column_t referenced_column = column_ids[bound_colref.binding.column_index];
 			// search for the referenced column in the set of column_ids
 			for (idx_t i = 0; i < get_column_ids.size(); i++) {
-				if (get_column_ids[i] == referenced_column) {
+				if (get_column_ids[i].GetPrimaryIndex() == referenced_column) {
 					bound_colref.binding.column_index = i;
 					return;
 				}
@@ -213,7 +213,7 @@ public:
 			auto &type = get.returned_types[column_id];
 			bool found = false;
 			for (idx_t i = 0; i < column_ids.size(); i++) {
-				if (column_ids[i] == column_id) {
+				if (column_ids[i].GetPrimaryIndex() == column_id) {
 					column_id = i;
 					found = true;
 					break;
diff --git a/spatial/src/spatial/core/index/rtree/rtree_index_scan.cpp b/spatial/src/spatial/core/index/rtree/rtree_index_scan.cpp
index 01f2966..0fabe44 100644
--- a/spatial/src/spatial/core/index/rtree/rtree_index_scan.cpp
+++ b/spatial/src/spatial/core/index/rtree/rtree_index_scan.cpp
@@ -31,7 +31,7 @@ BindInfo RTreeIndexScanBindInfo(const optional_ptr<FunctionData> bind_data_p) {
 struct RTreeIndexScanGlobalState : public GlobalTableFunctionState {
 	ColumnFetchState fetch_state;
 	TableScanState local_storage_state;
-	vector<storage_t> column_ids;
+	vector<StorageIndex> column_ids;
 
 	// Index scan state
 	unique_ptr<IndexScanState> index_state;
@@ -54,7 +54,7 @@ static unique_ptr<GlobalTableFunctionState> RTreeIndexScanInitGlobal(ClientConte
 		if (id != DConstants::INVALID_INDEX) {
 			col_id = bind_data.table.GetColumn(LogicalIndex(id)).StorageOid();
 		}
-		result->column_ids.push_back(col_id);
+		result->column_ids.emplace_back(col_id);
 	}
 
 	// Initialize the storage scan state
@@ -205,7 +205,6 @@ TableFunction RTreeIndexScanFunction::GetFunction() {
 	func.pushdown_complex_filter = nullptr;
 	func.to_string = RTreeIndexScanToString;
 	func.table_scan_progress = nullptr;
-	func.get_batch_index = nullptr;
 	func.projection_pushdown = true;
 	func.filter_pushdown = false;
 	func.get_bind_info = RTreeIndexScanBindInfo;
diff --git a/spatial/src/spatial/core/io/osm/st_read_osm.cpp b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
index 465cb87..5aa49dd 100644
--- a/spatial/src/spatial/core/io/osm/st_read_osm.cpp
+++ b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
@@ -836,10 +836,12 @@ static double Progress(ClientContext &context, const FunctionData *bind_data,
 	return state.GetProgress();
 }
 
-static idx_t GetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,
-                           LocalTableFunctionState *local_state, GlobalTableFunctionState *global_state) {
-	auto &state = (LocalState &)*local_state;
-	return state.block->block_idx;
+static OperatorPartitionData GetPartitionData(ClientContext &context, TableFunctionGetPartitionInput &input) {
+	if (input.partition_info.RequiresPartitionColumns()) {
+		throw InternalException("ST_ReadOSM::GetPartitionData: partition columns not supported");
+	}
+	auto &state = input.local_state->Cast<LocalState>();
+	return OperatorPartitionData(state.block->block_idx);
 }
 
 static unique_ptr<TableRef> ReadOsmPBFReplacementScan(ClientContext &context, ReplacementScanInput &input,
@@ -898,7 +900,7 @@ static constexpr const char *DOC_EXAMPLE = R"(
 void CoreTableFunctions::RegisterOsmTableFunction(DatabaseInstance &db) {
 	TableFunction read("ST_ReadOSM", {LogicalType::VARCHAR}, Execute, Bind, InitGlobal, InitLocal);
 
-	read.get_batch_index = GetBatchIndex;
+	read.get_partition_data = GetPartitionData;
 	read.table_scan_progress = Progress;
 
 	ExtensionUtil::RegisterFunction(db, read);
diff --git a/spatial/src/spatial/gdal/functions/st_read.cpp b/spatial/src/spatial/gdal/functions/st_read.cpp
index 9bd92e8..600fad8 100644
--- a/spatial/src/spatial/gdal/functions/st_read.cpp
+++ b/spatial/src/spatial/gdal/functions/st_read.cpp
@@ -675,7 +675,7 @@ void GdalTableFunction::Register(DatabaseInstance &db) {
 	                   GdalTableFunction::InitGlobal, GdalTableFunction::InitLocal);
 
 	scan.cardinality = GdalTableFunction::Cardinality;
-	scan.get_batch_index = ArrowTableFunction::ArrowGetBatchIndex;
+	scan.get_partition_data = ArrowTableFunction::ArrowGetPartitionData;
 
 	scan.projection_pushdown = true;
 	scan.filter_pushdown = true;
diff --git a/spatial/src/spatial/geos/functions/aggregate.cpp b/spatial/src/spatial/geos/functions/aggregate.cpp
index aacc668..c478786 100644
--- a/spatial/src/spatial/geos/functions/aggregate.cpp
+++ b/spatial/src/spatial/geos/functions/aggregate.cpp
@@ -197,7 +197,7 @@ void GeosAggregateFunctions::Register(DatabaseInstance &db) {
 
 	AggregateFunctionSet st_intersection_agg("ST_Intersection_Agg");
 	st_intersection_agg.AddFunction(
-	    AggregateFunction::UnaryAggregateDestructor<GEOSAggState, geometry_t, geometry_t, IntersectionAggFunction>(
+	    AggregateFunction::UnaryAggregateDestructor<GEOSAggState, geometry_t, geometry_t, IntersectionAggFunction, AggregateDestructorType::LEGACY>(
 	        core::GeoTypes::GEOMETRY(), core::GeoTypes::GEOMETRY()));
 
 	ExtensionUtil::RegisterFunction(db, st_intersection_agg);
@@ -206,7 +206,7 @@ void GeosAggregateFunctions::Register(DatabaseInstance &db) {
 
 	AggregateFunctionSet st_union_agg("ST_Union_Agg");
 	st_union_agg.AddFunction(
-	    AggregateFunction::UnaryAggregateDestructor<GEOSAggState, geometry_t, geometry_t, UnionAggFunction>(
+	    AggregateFunction::UnaryAggregateDestructor<GEOSAggState, geometry_t, geometry_t, UnionAggFunction, AggregateDestructorType::LEGACY>(
 	        core::GeoTypes::GEOMETRY(), core::GeoTypes::GEOMETRY()));
 
 	ExtensionUtil::RegisterFunction(db, st_union_agg);
