diff --git a/duckdb b/duckdb
index 0e78476..691a106 160000
--- a/duckdb
+++ b/duckdb
@@ -1 +1 @@
-Subproject commit 0e784765f6f87bd1ce9034afcce1e7f89fcd8777
+Subproject commit 691a106f0e09f5bbe7d8330ebf263d3ddd882c24
diff --git a/src/arrow_scan_ipc.cpp b/src/arrow_scan_ipc.cpp
index 7d5b2ff..eeebc92 100644
--- a/src/arrow_scan_ipc.cpp
+++ b/src/arrow_scan_ipc.cpp
@@ -59,9 +59,11 @@ unique_ptr <FunctionData> ArrowIPCTableFunction::ArrowScanBind(ClientContext &co
         if (!schema.release) {
             throw InvalidInputException("arrow_scan: released schema passed");
         }
-        auto arrow_type = GetArrowLogicalType(schema);
+        auto arrow_type =
+        ArrowType::GetArrowLogicalType(DBConfig::GetConfig(context), schema);
         if (schema.dictionary) {
-            auto dictionary_type = GetArrowLogicalType(*schema.dictionary);
+            auto dictionary_type = ArrowType::GetArrowLogicalType(
+          DBConfig::GetConfig(context), *schema.dictionary);
             return_types.emplace_back(dictionary_type->GetDuckType());
             arrow_type->SetDictionary(std::move(dictionary_type));
         } else {
diff --git a/src/arrow_to_ipc.cpp b/src/arrow_to_ipc.cpp
index e282612..8b0139a 100644
--- a/src/arrow_to_ipc.cpp
+++ b/src/arrow_to_ipc.cpp
@@ -71,8 +71,10 @@ unique_ptr<FunctionData> ToArrowIPCFunction::Bind(ClientContext &context, TableF
     names.emplace_back("header");

     // Create the Arrow schema
+    auto properties = context.GetClientProperties();
     ArrowSchema schema;
-    ArrowConverter::ToArrowSchema(&schema, input.input_table_types, input.input_table_names, context.GetClientProperties());
+    ArrowConverter::ToArrowSchema(&schema, input.input_table_types,
+                                input.input_table_names, properties);
     result->schema = arrow::ImportSchema(&schema).ValueOrDie();

     return std::move(result);
@@ -107,7 +109,10 @@ OperatorResultType ToArrowIPCFunction::Function(ExecutionContext &context, Table
         output.data[1].SetValue(0, Value::BOOLEAN(1));
     } else {
         if (!local_state.appender) {
-            local_state.appender = make_uniq<ArrowAppender>(input.GetTypes(), data.chunk_size, context.client.GetClientProperties());
+            local_state.appender = make_uniq<ArrowAppender>(input.GetTypes(), data.chunk_size,
+                                   context.client.GetClientProperties(),
+                                   ArrowTypeExtensionData::GetExtensionTypes(
+                                       context.client, input.GetTypes()));
         }

         // Append input chunk
