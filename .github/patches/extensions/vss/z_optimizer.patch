diff --git a/src/hnsw/hnsw_plan_index_create.cpp b/src/hnsw/hnsw_plan_index_create.cpp
index 5c0fd0a90d..d83e4f6bbb 100644
--- a/src/hnsw/hnsw_plan_index_create.cpp
+++ b/src/hnsw/hnsw_plan_index_create.cpp
@@ -18,7 +18,7 @@ public:
 		optimize_function = HNSWIndexInsertionRewriter::Optimize;
 	}
 
-	static void TryOptimize(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
+	static void TryOptimize(ClientContext &context, unique_ptr<LogicalOperator> &plan) {
 		auto &op = *plan;
 
 		// Look for a CREATE INDEX operator
@@ -125,13 +125,13 @@ public:
 		plan = std::move(physical_create_index);
 	}
 
-	static void Optimize(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
+	static void Optimize(OptimizerExtensionInput &input, unique_ptr<LogicalOperator> &plan) {
 
-		TryOptimize(context, info, plan);
+		TryOptimize(input.context, plan);
 
 		// Recursively traverse the children
 		for (auto &child : plan->children) {
-			Optimize(context, info, child);
+			Optimize(input, child);
 		}
 	};
 };
diff --git a/src/hnsw/hnsw_plan_index_scan.cpp b/src/hnsw/hnsw_plan_index_scan.cpp
index 3bec53a34b..aeba1a2ed5 100644
--- a/src/hnsw/hnsw_plan_index_scan.cpp
+++ b/src/hnsw/hnsw_plan_index_scan.cpp
@@ -24,7 +24,7 @@ public:
 		optimize_function = HNSWIndexScanOptimizer::Optimize;
 	}
 
-	static bool TryOptimize(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
+	static bool TryOptimize(ClientContext &context, unique_ptr<LogicalOperator> &plan) {
 		// Look for a TopN operator
 		auto &op = *plan;
 
@@ -183,12 +183,12 @@ public:
 		return true;
 	}
 
-	static bool OptimizeChildren(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
+	static bool OptimizeChildren(ClientContext &context, unique_ptr<LogicalOperator> &plan) {
 
-		auto ok = TryOptimize(context, info, plan);
+		auto ok = TryOptimize(context, plan);
 		// Recursively optimize the children
 		for (auto &child : plan->children) {
-			ok |= OptimizeChildren(context, info, child);
+			ok |= OptimizeChildren(context, child);
 		}
 		return ok;
 	}
@@ -232,8 +232,8 @@ public:
 		}
 	}
 
-	static void Optimize(ClientContext &context, OptimizerExtensionInfo *info, unique_ptr<LogicalOperator> &plan) {
-		auto did_use_hnsw_scan = OptimizeChildren(context, info, plan);
+	static void Optimize(OptimizerExtensionInput &input, unique_ptr<LogicalOperator> &plan) {
+		auto did_use_hnsw_scan = OptimizeChildren(input.context, plan);
 		if(did_use_hnsw_scan) {
 			MergeProjections(plan);
 		}
