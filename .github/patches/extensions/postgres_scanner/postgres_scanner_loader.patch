diff --git a/duckdb b/duckdb
index a35d8b6..71c5c07 160000
--- a/duckdb
+++ b/duckdb
@@ -1 +1 @@
-Subproject commit a35d8b6d5ba121f2601b917e1a7732207c944ae5
+Subproject commit 71c5c07cdd295e9409c0505885033ae9eb6b5ddd
diff --git a/extension-ci-tools b/extension-ci-tools
index 5ae521a..71d2002 160000
--- a/extension-ci-tools
+++ b/extension-ci-tools
@@ -1 +1 @@
-Subproject commit 5ae521a4c9709bb3cb35dc6d79e044f67bc58bf0
+Subproject commit 71d20029c5314dfc34f3bbdab808b9bce03b8003
diff --git a/src/include/postgres_scanner_extension.hpp b/src/include/postgres_scanner_extension.hpp
index ccf7b84..ddc655e 100644
--- a/src/include/postgres_scanner_extension.hpp
+++ b/src/include/postgres_scanner_extension.hpp
@@ -13,11 +13,11 @@ public:
 	std::string Name() override {
 		return "postgres_scanner";
 	}
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 };
 
 extern "C" {
-DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db);
+DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::ExtensionLoader &db);
 DUCKDB_EXTENSION_API const char *postgres_scanner_version();
 DUCKDB_EXTENSION_API void postgres_scanner_storage_init(DBConfig &config);
 }
diff --git a/src/postgres_extension.cpp b/src/postgres_extension.cpp
index d8f46e8..b688466 100644
--- a/src/postgres_extension.cpp
+++ b/src/postgres_extension.cpp
@@ -8,7 +8,7 @@
 
 #include "duckdb/catalog/catalog.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/main/database_manager.hpp"
 #include "duckdb/main/attached_database.hpp"
@@ -122,27 +122,27 @@ void SetPostgresNullByteReplacement(ClientContext &context, SetScope scope, Valu
 	}
 }
 
-static void LoadInternal(DatabaseInstance &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	PostgresScanFunction postgres_fun;
-	ExtensionUtil::RegisterFunction(db, postgres_fun);
-
+	loader.RegisterFunction(postgres_fun);
+	
 	PostgresScanFunctionFilterPushdown postgres_fun_filter_pushdown;
-	ExtensionUtil::RegisterFunction(db, postgres_fun_filter_pushdown);
+	loader.RegisterFunction(postgres_fun_filter_pushdown);
 
 	PostgresAttachFunction attach_func;
-	ExtensionUtil::RegisterFunction(db, attach_func);
+	loader.RegisterFunction(attach_func);
 
 	PostgresClearCacheFunction clear_cache_func;
-	ExtensionUtil::RegisterFunction(db, clear_cache_func);
+	loader.RegisterFunction(clear_cache_func);
 
 	PostgresQueryFunction query_func;
-	ExtensionUtil::RegisterFunction(db, query_func);
+	loader.RegisterFunction(query_func);
 
 	PostgresExecuteFunction execute_func;
-	ExtensionUtil::RegisterFunction(db, execute_func);
+	loader.RegisterFunction(execute_func);
 
 	PostgresBinaryCopyFunction binary_copy;
-	ExtensionUtil::RegisterFunction(db, binary_copy);
+	loader.RegisterFunction(binary_copy);
 
 	// Register the new type
 	SecretType secret_type;
@@ -150,13 +150,13 @@ static void LoadInternal(DatabaseInstance &db) {
 	secret_type.deserializer = KeyValueSecret::Deserialize<KeyValueSecret>;
 	secret_type.default_provider = "config";
 
-	ExtensionUtil::RegisterSecretType(db, secret_type);
+	loader.RegisterSecretType(secret_type);
 
 	CreateSecretFunction postgres_secret_function = {"postgres", "config", CreatePostgresSecretFunction};
 	SetPostgresSecretParameters(postgres_secret_function);
-	ExtensionUtil::RegisterFunction(db, postgres_secret_function);
+	loader.RegisterFunction(postgres_secret_function);
 
-	auto &config = DBConfig::GetConfig(db);
+	auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 	config.storage_extensions["postgres_scanner"] = make_uniq<PostgresStorageExtension>();
 
 	config.AddExtensionOption("pg_use_binary_copy", "Whether or not to use BINARY copy to read data",
@@ -187,19 +187,19 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.optimizer_extensions.push_back(std::move(postgres_optimizer));
 
 	config.extension_callbacks.push_back(make_uniq<PostgresExtensionCallback>());
-	for (auto &connection : ConnectionManager::Get(db).GetConnectionList()) {
+	for (auto &connection : ConnectionManager::Get(loader.GetDatabaseInstance()).GetConnectionList()) {
 		connection->registered_state->Insert("postgres_extension", make_shared_ptr<PostgresExtensionState>());
 	}
 }
 
-void PostgresScannerExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void PostgresScannerExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
+DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 DUCKDB_EXTENSION_API const char *postgres_scanner_version() {
diff --git a/src/postgres_scanner.cpp b/src/postgres_scanner.cpp
index 9b2d062..d49d8a3 100644
--- a/src/postgres_scanner.cpp
+++ b/src/postgres_scanner.cpp
@@ -2,7 +2,7 @@
 
 #include <libpq-fe.h>
 
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/shared_ptr.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
