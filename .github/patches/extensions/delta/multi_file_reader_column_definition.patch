diff --git a/src/functions/delta_scan.cpp b/src/functions/delta_scan.cpp
index 7210382..6eaf0b9 100644
--- a/src/functions/delta_scan.cpp
+++ b/src/functions/delta_scan.cpp
@@ -576,12 +576,13 @@ void DeltaMultiFileReader::BindOptions(MultiFileReaderOptions &options, MultiFil
     }
 }
 
-void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_options, const MultiFileReaderBindData &options,
-                  const string &filename, const vector<string> &local_names,
-                  const vector<LogicalType> &global_types, const vector<string> &global_names,
-                  const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
-                  ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) {
-    MultiFileReader::FinalizeBind(file_options, options, filename, local_names, global_types, global_names, global_column_ids, reader_data, context, global_state);
+void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_options,
+	                                     const MultiFileReaderBindData &options, const string &filename,
+	                                     const vector<MultiFileReaderColumnDefinition> &local_columns,
+	                                     const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                                     const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                     ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) {
+    MultiFileReader::FinalizeBind(file_options, options, filename, local_columns, global_columns, global_column_ids, reader_data, context, global_state);
 
     // Handle custom delta option set in MultiFileReaderOptions::custom_options
     auto file_number_opt = file_options.custom_options.find("delta_file_number");
@@ -608,9 +609,9 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_optio
             if (IsRowIdColumnId(col_id)) {
                 continue;
             }
-            auto col_partition_entry = file_metadata->partition_map.find(global_names[col_id]);
+            auto col_partition_entry = file_metadata->partition_map.find(global_columns[col_id].name);
             if (col_partition_entry != file_metadata->partition_map.end()) {
-                auto &current_type = global_types[col_id];
+                auto &current_type = global_columns[col_id].type;
                 if (current_type == LogicalType::BLOB) {
                     reader_data.constant_map.emplace_back(i, Value::BLOB_RAW(col_partition_entry->second));
                 } else {
@@ -668,13 +669,10 @@ void DeltaMultiFileReaderGlobalState::SetColumnIdx(const string &column, idx_t i
     throw IOException("Unknown column '%s' found as required by the DeltaMultiFileReader");
 }
 
-unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalState(duckdb::ClientContext &context,
-                                                                                   const duckdb::MultiFileReaderOptions &file_options,
-                                                                                   const duckdb::MultiFileReaderBindData &bind_data,
-                                                                                   const duckdb::MultiFileList &file_list,
-                                                                                   const vector<duckdb::LogicalType> &global_types,
-                                                                                   const vector<std::string> &global_names,
-                                                                                   const vector<duckdb::ColumnIndex> &global_column_ids) {
+unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalState(ClientContext &context, const MultiFileReaderOptions &file_options,
+	                      const MultiFileReaderBindData &bind_data, const MultiFileList &file_list,
+	                      const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                      const vector<ColumnIndex> &global_column_ids) {
     vector<LogicalType> extra_columns;
     vector<pair<string, idx_t>> mapped_columns;
 
@@ -686,7 +684,7 @@ unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalSta
             continue;
         }
 
-        auto &global_name = global_names[global_id];
+        auto &global_name = global_columns[global_id].name;
         selected_columns.insert({global_name, i});
     }
 
@@ -738,17 +736,16 @@ unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalSta
 
 // This code is duplicated from MultiFileReader::CreateNameMapping the difference is that for columns that are not found
 // in the parquet files, we just add null constant columns
-static void CustomMulfiFileNameMapping(const string &file_name, const vector<LogicalType> &local_types,
-                                        const vector<string> &local_names, const vector<LogicalType> &global_types,
-                                        const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
-                                        MultiFileReaderData &reader_data, const string &initial_file,
-                                        optional_ptr<MultiFileReaderGlobalState> global_state) {
-    D_ASSERT(global_types.size() == global_names.size());
-	D_ASSERT(local_types.size() == local_names.size());
+static void CustomMulfiFileNameMapping(const string &file_name,
+	                                 const vector<MultiFileReaderColumnDefinition> &local_columns,
+	                                 const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) {
 	// we have expected types: create a map of name -> column index
 	case_insensitive_map_t<idx_t> name_map;
-	for (idx_t col_idx = 0; col_idx < local_names.size(); col_idx++) {
-		name_map[local_names[col_idx]] = col_idx;
+	for (idx_t col_idx = 0; col_idx < local_columns.size(); col_idx++) {
+		name_map[local_columns[col_idx].name] = col_idx;
 	}
 	for (idx_t i = 0; i < global_column_ids.size(); i++) {
 		// check if this is a constant column
@@ -765,32 +762,32 @@ static void CustomMulfiFileNameMapping(const string &file_name, const vector<Log
 		}
 		// not constant - look up the column in the name map
 		auto global_id = global_column_ids[i].GetPrimaryIndex();
-		if (global_id >= global_types.size()) {
+		if (global_id >= global_columns.size()) {
 			throw InternalException(
-			    "MultiFileReader::CreatePositionalMapping - global_id is out of range in global_types for this file");
+			    "MultiFileReader::CreatePositionalMapping - global_id is out of range in global_columns for this file");
 		}
-		auto &global_name = global_names[global_id];
+		auto &global_name = global_columns[global_id].name;
 		auto entry = name_map.find(global_name);
 		if (entry == name_map.end()) {
 			string candidate_names;
-			for (auto &local_name : local_names) {
+			for (auto &column : local_columns) {
 				if (!candidate_names.empty()) {
 					candidate_names += ", ";
 				}
-				candidate_names += local_name;
+				candidate_names += column.name;
 			}
 			// FIXME: this override is pretty hacky: for missing columns we just insert NULL constants
-		    auto &global_type = global_types[global_id];
+		    auto &global_type = global_columns[global_id].type;
 		    Value val (global_type);
 		    reader_data.constant_map.push_back({i, val});
 		    continue;
 		}
 		// we found the column in the local file - check if the types are the same
 		auto local_id = entry->second;
-		D_ASSERT(global_id < global_types.size());
-		D_ASSERT(local_id < local_types.size());
-		auto &global_type = global_types[global_id];
-		auto &local_type = local_types[local_id];
+		D_ASSERT(global_id < global_columns.size());
+		D_ASSERT(local_id < local_columns.size());
+		auto &global_type = global_columns[global_id].type;
+		auto &local_type = local_columns[local_id].type;
 		if (global_type != local_type) {
 			reader_data.cast_map[local_id] = global_type;
 		}
@@ -802,13 +799,14 @@ static void CustomMulfiFileNameMapping(const string &file_name, const vector<Log
 	reader_data.empty_columns = reader_data.column_ids.empty();
 }
 
-void DeltaMultiFileReader::CreateNameMapping(const string &file_name, const vector<LogicalType> &local_types,
-                                        const vector<string> &local_names, const vector<LogicalType> &global_types,
-                                        const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
-                                        MultiFileReaderData &reader_data, const string &initial_file,
-                                        optional_ptr<MultiFileReaderGlobalState> global_state) {
+void DeltaMultiFileReader::CreateColumnMapping(const string &file_name,
+	                                 const vector<MultiFileReaderColumnDefinition> &local_columns,
+	                                 const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const MultiFileReaderBindData &bind_data, const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) {
     // First call the base implementation to do most mapping
-    CustomMulfiFileNameMapping(file_name, local_types, local_names, global_types, global_names, global_column_ids, reader_data, initial_file, global_state);
+    CustomMulfiFileNameMapping(file_name, local_columns, global_columns, global_column_ids, reader_data, initial_file, global_state);
 
     // Then we handle delta specific mapping
     D_ASSERT(global_state);
@@ -820,8 +818,8 @@ void DeltaMultiFileReader::CreateNameMapping(const string &file_name, const vect
 
         // Build the name map
         case_insensitive_map_t<idx_t> name_map;
-        for (idx_t col_idx = 0; col_idx < local_names.size(); col_idx++) {
-            name_map[local_names[col_idx]] = col_idx;
+        for (idx_t col_idx = 0; col_idx < local_columns.size(); col_idx++) {
+            name_map[local_columns[col_idx].name] = col_idx;
         }
 
         // Lookup the required column in the local map
diff --git a/src/include/functions/delta_scan.hpp b/src/include/functions/delta_scan.hpp
index d90968b..c3e71f2 100644
--- a/src/include/functions/delta_scan.hpp
+++ b/src/include/functions/delta_scan.hpp
@@ -117,22 +117,24 @@ struct DeltaMultiFileReader : public MultiFileReader {
     void BindOptions(MultiFileReaderOptions &options, MultiFileList &files,
                                         vector<LogicalType> &return_types, vector<string> &names, MultiFileReaderBindData& bind_data) override;
 
-    void CreateNameMapping(const string &file_name, const vector<LogicalType> &local_types,
-                      const vector<string> &local_names, const vector<LogicalType> &global_types,
-                      const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
-                      MultiFileReaderData &reader_data, const string &initial_file,
-                      optional_ptr<MultiFileReaderGlobalState> global_state) override;
+    void CreateColumnMapping(const string &file_name,
+	                                 const vector<MultiFileReaderColumnDefinition> &local_columns,
+	                                 const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const MultiFileReaderBindData &bind_data, const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
     unique_ptr<MultiFileReaderGlobalState> InitializeGlobalState(ClientContext &context, const MultiFileReaderOptions &file_options,
-                          const MultiFileReaderBindData &bind_data, const MultiFileList &file_list,
-                          const vector<LogicalType> &global_types, const vector<string> &global_names,
-                          const vector<ColumnIndex> &global_column_ids) override;
-
-    void FinalizeBind(const MultiFileReaderOptions &file_options, const MultiFileReaderBindData &options,
-                                       const string &filename, const vector<string> &local_names,
-                                       const vector<LogicalType> &global_types, const vector<string> &global_names,
-                                       const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
-                                       ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) override;
+	                      const MultiFileReaderBindData &bind_data, const MultiFileList &file_list,
+	                      const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                      const vector<ColumnIndex> &global_column_ids) override;
+
+    void FinalizeBind(const MultiFileReaderOptions &file_options,
+	                                     const MultiFileReaderBindData &options, const string &filename,
+	                                     const vector<MultiFileReaderColumnDefinition> &local_columns,
+	                                     const vector<MultiFileReaderColumnDefinition> &global_columns,
+	                                     const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                     ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
     //! Override the FinalizeChunk method
     void FinalizeChunk(ClientContext &context, const MultiFileReaderBindData &bind_data,
