name: NightlyTests
on:
  workflow_dispatch:
  repository_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
 release-assert:
    name: Release Assertions
    runs-on: ubuntu-20.04
    env:
      CC: gcc-10
      CXX: g++-10
      GEN: ninja
      BUILD_ICU: 1
      BUILD_INET: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_FTS: 1
      BUILD_EXCEL: 1
      BUILD_VISUALIZER: 1
      BUILD_JSON: 1
      BUILD_JEMALLOC: 1
      DISABLE_SANITIZER: 1
      CRASH_ON_ASSERT: 1

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install
      shell: bash
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      run: make relassert

    - name: Test
      shell: bash
      run: |
          python3 scripts/run_tests_one_by_one.py build/relassert/test/unittest "*"


 linux-clang:
    name: Clang 14
    runs-on: ubuntu-20.04
    env:
      CC: /home/runner/work/llvm/bin/clang
      CPP: /home/runner/work/llvm/bin/clang-cpp
      CXX: /home/runner/work/llvm/bin/clang++
      LD: /home/runner/work/llvm/bin/ld.lld
      EXTENSION_STATIC_BUILD: 1
      BUILD_JSON: 1
      TREAT_WARNINGS_AS_ERRORS: 1

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "14.0"
        directory: '/home/runner/work/llvm'

    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      run: make release

    - name: Test
      shell: bash
      run: make allunit

 old-gcc:
    name: GCC 4.8
    runs-on: ubuntu-20.04
    container: ubuntu:16.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: ./.github/actions/ubuntu_16_setup

    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Install
      shell: bash
      run: apt-get update -y -qq && apt-get install -y -qq g++-4.8 binutils

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}

    - name: Test
      shell: bash
      run: make unit
      env:
        CC: gcc-4.8
        CXX: g++-4.8

   linux-tarball:
      name: Python 3 Tarball
      runs-on: ubuntu-20.04
      needs: linux-python3-9

      steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: Install
        shell: bash
        working-directory: tools/pythonpkg
        run: pip install -r requirements-dev.txt

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}
          save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}

      - name: Build
        shell: bash
        run: |
          python --version
          git archive --format zip --output test-tarball.zip HEAD
          mkdir duckdb-test-tarball
          mv test-tarball.zip duckdb-test-tarball
          cd duckdb-test-tarball
          unzip test-tarball.zip
          cd tools/pythonpkg
          export SETUPTOOLS_SCM_PRETEND_VERSION=0.2.2
          export DISTUTILS_C_COMPILER_LAUNCHER=ccache
          pip install . --user
          (cd tests/ && python -m pytest)

   python-address-sanitizer:
      name: Python Address Sanitizer (Linux)
      runs-on: ubuntu-latest
      container: ubuntu:16.04
      needs: linux-python3-9
      env:
         GEN: ninja
         DUCKDEBUG: 1
         ASAN_OPTIONS: detect_leaks=0

      steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/ubuntu_16_setup
        with:
          openssl: 0
          python: 0

      - name: Install OpenSSL
        shell: bash
        run: |
          apt-get install -y -qq libbz2-dev
          wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz
          tar -xf openssl-1.0.2o.tar.gz
          cd openssl-1.0.2o
          ./config shared --prefix=/usr/local/
          make
          make install
          mkdir lib
          cp ./*.{so,so.1.0.0,a,pc} ./lib

      - name: Install Python 3 With Sanitizers
        shell: bash
        run: |
          wget https://github.com/python/cpython/archive/refs/tags/v3.9.12.zip
          unzip v3.9.12.zip
          rm v3.9.12.zip
          cd cpython-3.9.12
          mkdir debug-build
          export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/openssl-1.0.2o/lib
          ./configure --with-ensurepip=install --with-address-sanitizer --with-undefined-behavior-sanitizer --with-openssl=${GITHUB_WORKSPACE}/openssl-1.0.2o --prefix=${GITHUB_WORKSPACE}/debug-build
          make -j
          make install

      - name: Install Python Test Dependencies
        shell: bash
        run: |
          cd tools/pythonpkg
          ${GITHUB_WORKSPACE}/debug-build/bin/python3 -m pip install -r requirements-dev.txt

      - name: Install DuckDB Python
        shell: bash
        run: |
          cd tools/pythonpkg
          ${GITHUB_WORKSPACE}/debug-build/bin/python3 -m pip install .

      # explicitly skip the TestMemoryLeaks tests, as the address sanitizer will increase the memory usage, causing the test to fail
      - name: Run Python Tests
        shell: bash
        run: |
          cd tools/pythonpkg
          ${GITHUB_WORKSPACE}/debug-build/bin/python3 -m pytest tests/fast --skiplist TestMemoryLeaks

  sqllogic:
     name: Sqllogic tests
     runs-on: ubuntu-20.04
     needs: linux-debug
     env:
       CC: gcc-10
       CXX: g++-10

     steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0

     - name: Setup Ccache
       uses: hendrikmuhs/ccache-action@main
       with:
         key: ${{ github.job }}
         save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}

     # Build is implied by 'make sqlite' that will invoke implicitly 'make release' (we make it explicit)
     - name: Build
       shell: bash
       run: make release

     - name: Test
       shell: bash
       run: make sqlite
