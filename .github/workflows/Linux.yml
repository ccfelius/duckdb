#name: Linux
#on:
#  workflow_run:
#    workflows: ["Main"]
#    types:
#      - completed
#
#defaults:
#  run:
#    shell: bash
#
#jobs:
# linux-release-64:
#    name: Linux (64 Bit)
#    runs-on: ubuntu-latest
#    container: ubuntu:16.04
#    env:
#      GEN: ninja
#      BUILD_VISUALIZER: 1
#      BUILD_BENCHMARK: 1
#      BUILD_ICU: 1
#      BUILD_TPCH: 1
#      BUILD_TPCDS: 1
#      BUILD_FTS: 1
#      BUILD_REST: 1
#      BUILD_JDBC: 1
#      BUILD_HTTPFS: 1
#      TREAT_WARNINGS_AS_ERRORS: 1
#      FORCE_WARN_UNUSED: 1
#
#    steps:
#    - name: Install
#      run: |
#        apt-get update -y -qq
#        apt-get install -y -qq software-properties-common
#        add-apt-repository ppa:deadsnakes/ppa
#        add-apt-repository ppa:git-core/ppa
#        apt-get update -y -qq
#        apt-get install -y -qq git ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk python3.7 zip python3-pip maven
#        python3.7 -m pip install pip
#        python3.7 -m pip install requests
#
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Version Check
#      run: |
#        ldd --version ldd
#        python3.7 --version
#        git --version
#
#    - name: Install CMake
#      run: |
#        wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.sh
#        chmod +x cmake-3.21.3-linux-x86_64.sh
#        ./cmake-3.21.3-linux-x86_64.sh --skip-license --prefix=/usr/local
#
#    - name: Build
#      run: STATIC_LIBCPP=1 make
#
#    - name: Test
#      run: make allunit
#
#    - name: Symbol Leakage Test
#      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so
#
#    - name: Tools Tests
#      run: |
#        python3.7 tools/shell/shell-test.py build/release/duckdb
#        python3.7 tools/rest/test_the_rest.py build/release/tools/rest
#        java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
#
#    - name: Examples
#      run: |
#        (cd examples/embedded-c; make)
#        (cd examples/embedded-c++; make)
#        (cd examples/jdbc; make; make maven)
#        build/release/benchmark/benchmark_runner benchmark/tpch/sf1/q01.benchmark
#
#    - name: Deploy
#      run: |
#        python3.7 scripts/amalgamation.py
#        zip -j duckdb_cli-linux-amd64.zip build/release/duckdb
#        zip -j libduckdb-linux-amd64.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#        zip -j libduckdb-src.zip src/amalgamation/duckdb.hpp src/amalgamation/duckdb.cpp src/include/duckdb.h
#        zip -j duckdb_rest-linux-amd64.zip build/release/tools/rest/duckdb_rest_server
#        python3.7 scripts/asset-upload-gha.py libduckdb-src.zip libduckdb-linux-amd64.zip duckdb_cli-linux-amd64.zip duckdb_rest-linux-amd64.zip duckdb_jdbc-linux-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-binaries-linux
#        path: |
#          libduckdb-linux-amd64.zip
#          duckdb_cli-linux-amd64.zip
#          build/release/tools/jdbc/duckdb_jdbc.jar
#
# linux-release-32:
#    name: Linux (32 Bit)
#    runs-on: ubuntu-latest
#    container: ubuntu:16.04
#
#    env:
#      GEN: ninja
#
#    steps:
#    - name: Install
#      run: |
#        apt-get update -y -qq
#        apt-get install -y -qq software-properties-common
#        add-apt-repository ppa:deadsnakes/ppa
#        add-apt-repository ppa:git-core/ppa
#        apt-get update -y -qq
#        apt-get install -y -qq git make ninja-build libc6-dev-i386 gcc-multilib g++-multilib lib32readline6-dev libssl-dev wget openjdk-8-jdk python3.7 zip
#
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Version Check
#      run: |
#        ldd --version ldd
#        python3.7 --version
#        git --version
#
#    - name: Install CMake
#      run: |
#        wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.sh
#        chmod +x cmake-3.21.3-linux-x86_64.sh
#        ./cmake-3.21.3-linux-x86_64.sh --skip-license --prefix=/usr/local
#
#    - name: Build
#      run: |
#        mkdir -p build/release
#        (cd build/release && cmake -DSTATIC_LIBCPP=1 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
#
#    - name: Test
#      run: build/release/test/unittest "*"
#
#    - name: Deploy
#      run: |
#        python3.7 scripts/amalgamation.py
#        zip -j duckdb_cli-linux-i386.zip build/release/duckdb
#        zip -j libduckdb-linux-i386.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#        python3.7 scripts/asset-upload-gha.py libduckdb-linux-i386.zip duckdb_cli-linux-i386.zip duckdb_jdbc-linux-i386.jar=build/release/tools/jdbc/duckdb_jdbc.jar
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-binaries-linux
#        path: |
#          libduckdb-linux-i386.zip
#          duckdb_cli-linux-i386.zip
#          build/release/tools/jdbc/duckdb_jdbc.jar
#
# linux-rpi:
#    name: Linux (Raspberry Pi)
#    runs-on: ubuntu-20.04
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#        git clone https://github.com/raspberrypi/tools --depth=1 rpi-tools
#
#    - name: Build
#      run: |
#        export TOOLCHAIN=`pwd`/rpi-tools
#        mkdir -p build/release
#        cd build/release
#        cmake -G Ninja -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DDUCKDB_RPI_TOOLCHAIN_PREFIX=$TOOLCHAIN -DBUILD_UNITTESTS=0 -DCMAKE_TOOLCHAIN_FILE=../../scripts/raspberry-pi-cmake-toolchain.cmake ../../
#        cmake --build .
#        file duckdb
#
#    - name: Deploy
#      run: |
#        python scripts/amalgamation.py
#        zip -j duckdb_cli-linux-rpi.zip build/release/duckdb
#        zip -j libduckdb-linux-rpi.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#        python scripts/asset-upload-gha.py libduckdb-linux-rpi.zip duckdb_cli-linux-rpi.zip
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-binaries-rpi
#        path: |
#          libduckdb-linux-rpi.zip
#          duckdb_cli-linux-rpi.zip
#
# linux-arrow:
#      name: Linux Debug (Arrow Tests)
#      runs-on: ubuntu-20.04
#
#      env:
#        CC: gcc-10
#        CXX: g++-10
#        TREAT_WARNINGS_AS_ERRORS: 1
#        GEN: ninja
#
#      steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Install
#        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#      - name: Build
#        run: BUILD_ARROW_ABI_TEST=1 make debug
#
#      - name: Test
#        run: make unittestarrow
#
# old-gcc:
#    name: GCC 4.8
#    runs-on: ubuntu-18.04
#
#    env:
#      CC: gcc-4.8
#      CXX: g++-4.8
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++-4.8 binutils
#
#    - name: Build
#      run: make release
#
#    - name: Test
#      run: make allunit
#
# centos:
#    name: CentOS 7
#    runs-on: ubuntu-latest
#    container: centos:7
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: yum install -y gcc gcc-c++ git cmake make
#
#    - name: Build
#      run: make release
#
#    - name: Test
#      run: ./build/release/test/unittest
#
# release-assert:
#    name: Release Assertions
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      GEN: ninja
#      BUILD_ICU: 1
#      BUILD_TPCH: 1
#      BUILD_TPCDS: 1
#      BUILD_FTS: 1
#      BUILD_VISUALIZER: 1
#      DISABLE_SANITIZER: 1
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Build
#      run: make relassert
#
#    - name: Test
#      run: |
#          python3 scripts/run_tests_one_by_one.py build/relassert/test/unittest "*"
#
# force-storage:
#    name: Force Storage
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      GEN: ninja
#      BUILD_ICU: 1
#      BUILD_PARQUET: 1
#      BUILD_TPCH: 1
#      BUILD_TPCDS: 1
#      BUILD_FTS: 1
#      BUILD_VISUALIZER: 1
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Build
#      run: make reldebug
#
#    - name: Test
#      run: build/reldebug/test/unittest "*" --force-storage
#
# threadsan:
#    name: Thread Sanitizer
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      GEN: ninja
#      BUILD_ICU: 1
#      BUILD_TPCH: 1
#      BUILD_TPCDS: 1
#      BUILD_FTS: 1
#      BUILD_VISUALIZER: 1
#      TSAN_OPTIONS: suppressions=.sanitizer-thread-suppressions.txt
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Build
#      run: THREADSAN=1 make reldebug
#
#    - name: Test
#      run: |
#          python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest
#          python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[intraquery]"
#          python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[interquery]"
#          python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[detailed_profiler]"
#          python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest test/sql/tpch/tpch_sf01.test_slow
#
# valgrind:
#    name: Valgrind
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      DISABLE_SANITIZER: 1
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build valgrind
#
#    - name: Build
#      run: make debug
#
#    - name: Test
#      run: valgrind ./build/debug/test/unittest test/sql/tpch/tpch_sf001.test_slow
#
# codecov:
#    name: CodeCov
#    runs-on: ubuntu-20.04
#    env:
#      GEN: ninja
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Install
#        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build lcov
#
#      - name: Set up Python 3.9
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'
#
#      - name: Before Install
#        run: |
#          pip install --prefer-binary "pandas>=1.2.4" "requests>=2.26" "pyarrow==5.0" pytest
#          sudo apt-get install g++
#
#      - name: Coverage Reset
#        run: |
#          lcov --config-file .github/workflows/lcovrc --zerocounters --directory .
#          lcov --config-file .github/workflows/lcovrc --capture --initial --directory . --base-directory . --no-external --output-file coverage.info
#
#      - name: Run Tests
#        run: |
#          mkdir -p build/coverage
#          (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DBUILD_PYTHON=1 -DBUILD_PARQUET_EXTENSION=1 -DENABLE_SANITIZER=0 -DCMAKE_BUILD_TYPE=Debug ../.. && make)
#          (cd tools/pythonpkg/tests/fast && python3 -m pytest)
#          (cd tools/pythonpkg/tests/coverage && python3 -m pytest)
#          build/coverage/test/unittest
#          build/coverage/test/unittest "[intraquery]"
#          build/coverage/test/unittest "[interquery]"
#          python3 scripts/try_timeout.py --timeout=1200 --retry=3 build/coverage/test/unittest "[coverage]"
#          build/coverage/test/unittest "[detailed_profiler]"
#          build/coverage/test/unittest test/sql/tpch/tpch_sf01.test_slow
#          build/coverage/tools/sqlite3_api_wrapper/test_sqlite3_api_wrapper
#          python tools/shell/shell-test.py build/coverage/duckdb
#
#
#      - name: Generate Coverage
#        run: |
#          lcov --config-file .github/workflows/lcovrc --directory . --base-directory . --no-external --capture --output-file coverage.info
#          lcov --config-file .github/workflows/lcovrc --remove coverage.info $(< .github/workflows/lcov_exclude) -o lcov.info
#
#      - name: CodeCov Upload
#        uses: codecov/codecov-action@v2
#        with:
#          files: lcov.info
#          fail_ci_if_error: true
#
# vector-sizes:
#    name: Vector Sizes
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Test
#      run: python scripts/test_vector_sizes.py
#
# sqllogic:
#    name: Sqllogic tests
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Test
#      run: make sqlite
#
# expanded:
#    name: Expanded
#    runs-on: ubuntu-20.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      TREAT_WARNINGS_AS_ERRORS: 1
#      DISABLE_UNITY: 1
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Build
#      run: make debug
#
# sqlancer:
#    name: SQLancer
#    runs-on: ubuntu-20.04
#
#    env:
#      BUILD_JDBC: 1
#      FORCE_QUERY_LOG: sqlancer_log.tmp
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#        git clone https://github.com/hannesmuehleisen/sqlancer
#        cd sqlancer
#        git checkout persistent
#        mvn package -q -DskipTests
#
#    - name: Build
#      run: make reldebug
#
#    - name: Test
#      run: |
#        cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
#        python3 scripts/run_sqlancer.py
#
#
# sqlancer_persistent:
#    name: SQLancer (Persistent)
#    runs-on: ubuntu-20.04
#
#    env:
#      BUILD_JDBC: 1
#      FORCE_QUERY_LOG: sqlancer_log.tmp
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#        git clone https://github.com/hannesmuehleisen/sqlancer
#        cd sqlancer
#        git checkout persistent
#        mvn package -q -DskipTests
#
#    - name: Build
#      run: make reldebug
#
#    - name: Test
#      run: |
#        cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
#        python3 scripts/run_sqlancer.py --persistent
#
#
# jdbc:
#    name: JDBC Compliance
#    runs-on: ubuntu-18.04
#
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      BUILD_JDBC: 1
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#        git clone https://github.com/cwida/jdbccts.git
#
#    - name: Build
#      run: make release
#
#    - name: Test
#      run: (cd jdbccts && make DUCKDB_JAR=../build/release/tools/jdbc/duckdb_jdbc.jar test)
#
# odbc:
#    name: ODBC
#    runs-on: ubuntu-20.04
#
#    env:
#      BUILD_ODBC: 1
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Dependencies
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build unixodbc-dev python3 python3-pyodbc python3-pip julia
#        pip3 install pyodbc
#
#    - name: Install nanodbc
#      run: |
#        wget https://github.com/nanodbc/nanodbc/archive/refs/tags/v2.13.0.tar.gz -O nanodbc.tgz
#        (mkdir nanodbc && tar xvf nanodbc.tgz -C nanodbc --strip-components=1 && cd nanodbc && sed -i -e "s/set(test_list/set(test_list odbc/" test/CMakeLists.txt && mkdir build && cd build && cmake -DNANODBC_DISABLE_TESTS=OFF .. && cmake --build .)
#
#    - name: Install psqlodbc
#      run: |
#        git clone https://github.com/Mytherin/psqlodbc.git
#        (cd psqlodbc && make debug)
#
#    - name: Build
#      run: DISABLE_SANITIZER=1 make debug
#
#    - name: Test nanodbc
#      run: ./tools/odbc/test/run_nanodbc_tests.sh
#
#    - name: Test psqlodbc
#      run: ./tools/odbc/test/run_psqlodbc_tests.sh
#
#    - name: Test isql
#      run: ./tools/odbc/test/run_isql_tests.sh
#
#    - name: Test R ODBC
#      run: R -f tools/odbc/test/rodbc.R
#
#    - name: Test Python ODBC
#      run: ./tools/odbc/test/run_pyodbc_tests.sh
#
#    - name: Test Julia ODBC
#      run: |
#        export ASAN_OPTIONS=verify_asan_link_order=0
#        julia tools/odbc/test/julia-test.jl
#
#
# linux-wasm-release:
#    name: WebAssembly Release
#    runs-on: ubuntu-20.04
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Build Amalgamation
#      run: python scripts/amalgamation.py
#
#    - name: Setup
#      run: ./scripts/wasm_configure.sh
#
#    - name: Build Library Module
#      run: ./scripts/wasm_build_lib.sh Release
#
#    - name: Build Test Module
#      run: ./scripts/wasm_build_test.sh Release
#
#    - name: Test WASM Module
#      run: node ./test/wasm/hello_wasm_test.js
#
#    - name: Package
#      run: |
#        zip -j duckdb-wasm32-nothreads.zip ./.wasm/build/duckdb.wasm
#        python scripts/asset-upload-gha.py duckdb-wasm32-nothreads.zip
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-wasm32-nothreads
#        path: |
#          duckdb-wasm32-nothreads.zip
#
# docs:
#    name: Website Docs
#    runs-on: ubuntu-20.04
#
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#
#    - name: Clone Website
#      run: git clone https://github.com/duckdb/duckdb-web
#
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v2
#      with:
#        python-version: '3.9'
#
#    - name: Package
#      run: |
#        cd duckdb-web
#        python3 scripts/generate_docs.py ..
