name: LinuxRelease
on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'tools/nodejs/**'
      - 'tools/juliapkg/**'
      - 'tools/pythonpkg/**'
      - 'tools/rpkg/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
 linux-extensions-64:
    name: Linux Extensions (64 Bit)
    runs-on: ubuntu-latest
    container: ubuntu:16.04

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/ubuntu_16_setup
      with:
        openssl: 1

    - uses: ./.github/actions/build_extensions
      with:
        post_install: rm build/release/src/libduckdb*
        deploy_as: linux_amd64
        static_link_build: 1
        out_of_tree_ext: 1
        s3_id: ${{ secrets.S3_ID }}
        s3_key: ${{ secrets.S3_KEY }}
        signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}

    - uses: actions/upload-artifact@v2
      with:
        name: linux-extensions-64
        path: |
          build/release/extension/*/*.duckdb_extension

 check-load-install-extensions:
    name: Checks extension functions
    runs-on: ubuntu-20.04
#    needs: linux-extensions-64

    env:
      CC: gcc-10
      CXX: g++-10
      GEN: ninja

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install
      shell: bash
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}

    - name: Build
      shell: bash
      run: |
        mkdir -p build/release
        cd build/release
        cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ../.. 
        cmake --build . --config Release

    - uses: actions/download-artifact@v3
      with:
        name: linux-extensions-64
        path: /tmp

    - name: Check if extension_functions.hpp is up to date
      shell: bash
      run: |
        python scripts/generate_extensions_function.py --validate

#
# linux-release-32:
#    name: Linux (32 Bit)
#    runs-on: ubuntu-latest
#    container: ubuntu:16.04
#    needs: linux-release-64
#    env:
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v3
#    - uses: ./.github/actions/ubuntu_16_setup
#
#    - name: Build
#      shell: bash
#      run: |
#        mkdir -p build/release
#        (cd build/release && cmake -DSTATIC_LIBCPP=1 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_JSON_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
#
#    - name: Test
#      shell: bash
#      run: build/release/test/unittest "*"
#
#    - name: Deploy
#      shell: bash
#      run: |
#        python3.7 scripts/amalgamation.py
#        zip -j duckdb_cli-linux-i386.zip build/release/duckdb
#        zip -j libduckdb-linux-i386.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#        python3.7 scripts/asset-upload-gha.py libduckdb-linux-i386.zip duckdb_cli-linux-i386.zip duckdb_jdbc-linux-i386.jar=build/release/tools/jdbc/duckdb_jdbc.jar
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-binaries-linux
#        path: |
#          libduckdb-linux-i386.zip
#          duckdb_cli-linux-i386.zip
#          build/release/tools/jdbc/duckdb_jdbc.jar
#
#
# linux-rpi:
#    name: Linux (Raspberry Pi)
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install
#      shell: bash
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#        git clone https://github.com/raspberrypi/tools --depth=1 rpi-tools
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build
#      shell: bash
#      run: |
#        export TOOLCHAIN=`pwd`/rpi-tools
#        mkdir -p build/release
#        cd build/release
#        cmake -G Ninja -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DDUCKDB_RPI_TOOLCHAIN_PREFIX=$TOOLCHAIN -DBUILD_UNITTESTS=0 -DCMAKE_TOOLCHAIN_FILE=../../scripts/raspberry-pi-cmake-toolchain.cmake ../../
#        cmake --build .
#        file duckdb
#
#    - name: Deploy
#      shell: bash
#      run: |
#        python scripts/amalgamation.py
#        zip -j duckdb_cli-linux-rpi.zip build/release/duckdb
#        zip -j libduckdb-linux-rpi.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#        python scripts/asset-upload-gha.py libduckdb-linux-rpi.zip duckdb_cli-linux-rpi.zip
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-binaries-rpi
#        path: |
#          libduckdb-linux-rpi.zip
#          duckdb_cli-linux-rpi.zip
#
#
# old-gcc:
#    name: GCC 4.8
#    runs-on: ubuntu-18.04
#    needs: linux-release-64
#
#    env:
#      CC: gcc-4.8
#      CXX: g++-4.8
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install
#      shell: bash
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++-4.8 binutils
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build
#      shell: bash
#      run: make release
#
#    - name: Test
#      shell: bash
#      run: make allunit
#
# release-assert:
#    name: Release Assertions
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#    env:
#      CC: gcc-10
#      CXX: g++-10
#      GEN: ninja
#      BUILD_ICU: 1
#      BUILD_TPCH: 1
#      BUILD_TPCDS: 1
#      BUILD_FTS: 1
#      BUILD_EXCEL: 1
#      BUILD_VISUALIZER: 1
#      BUILD_JSON: 1
#      DISABLE_SANITIZER: 1
#      CRASH_ON_ASSERT: 1
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - name: Install
#      shell: bash
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build
#      shell: bash
#      run: make relassert
#
#    - name: Test
#      shell: bash
#      run: |
#          python3 scripts/run_tests_one_by_one.py build/relassert/test/unittest "*"
#
#
# vector-sizes:
#    name: Vector Sizes
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#    env:
#      CC: gcc-10
#      CXX: g++-10
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Test
#      shell: bash
#      run: python scripts/test_vector_sizes.py
#
# linux-wasm-release:
#    name: WebAssembly Release
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - name: Build Amalgamation
#      shell: bash
#      run: python scripts/amalgamation.py
#
#    - name: Setup
#      shell: bash
#      run: ./scripts/wasm_configure.sh
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build Library Module
#      shell: bash
#      run: ./scripts/wasm_build_lib.sh Release
#
#    - name: Build Test Module
#      shell: bash
#      run: ./scripts/wasm_build_test.sh Release
#
#    - name: Test WASM Module
#      shell: bash
#      run: node ./test/wasm/hello_wasm_test.js
#
#    - name: Package
#      shell: bash
#      run: |
#        zip -j duckdb-wasm32-nothreads.zip ./.wasm/build/duckdb.wasm
#        python scripts/asset-upload-gha.py duckdb-wasm32-nothreads.zip
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: duckdb-wasm32-nothreads
#        path: |
#          duckdb-wasm32-nothreads.zip
#
# symbol-leakage:
#    name: Symbol Leakage
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build
#      shell: bash
#      run: make
#
#    - name: Symbol Leakage Test
#      shell: bash
#      run: python3.7 scripts/exported_symbols_check.py build/release/src/libduckdb*.so
#
# linux-httpfs:
#    name: Linux HTTPFS
#    runs-on: ubuntu-20.04
#    needs: linux-release-64
#    env:
#      BUILD_VISUALIZER: 1
#      BUILD_HTTPFS: 1
#      S3_TEST_SERVER_AVAILABLE: 1
#      GEN: ninja
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install Ninja
#      shell: bash
#      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#
#    - name: Setup Ccache
#      uses: hendrikmuhs/ccache-action@main
#      with:
#        key: ${{ github.job }}
#
#    - name: Build
#      shell: bash
#      run: make
#
#    - name: Start S3/HTTP test server
#      shell: bash
#      run: |
#        sudo ./scripts/install_s3_test_server.sh
#        ./scripts/run_s3_test_server.sh
#
#    - name: Test
#      shell: bash
#      run: make allunit
#
# amalgamation-tests:
#    name: Amalgamation Tests
#    needs: linux-release-64
#    runs-on: ubuntu-20.04
#    env:
#      CC: clang
#      CXX: clang++
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - name: Install LLVM and Clang
#      uses: KyleMayes/install-llvm-action@v1
#      with:
#        version: "10.0"
#
#    - name: Generate Amalgamation
#      shell: bash
#      run:  |
#          python scripts/amalgamation.py --extended
#          python scripts/parquet_amalgamation.py
#          clang++ -std=c++17 -Isrc/amalgamation src/amalgamation/parquet-amalgamation.cpp src/amalgamation/duckdb.cpp -emit-llvm -S -O0
