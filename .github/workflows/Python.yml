name: Python
on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'examples/**'
      - 'test/**'
      - 'tools/juliapkg/**'
      - 'tools/nodejs/**'
      - 'tools/rpkg/**'
      - '.github/workflows/**'
      - '!.github/workflows/Python.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
#  This is just a sanity check of Python 3.9 running with Arrow
   linux-python3-9:
    name: Python 3.9 Linux
    runs-on: ubuntu-20.04

    env:
      CIBW_BUILD: 'cp39-manylinux_x86_64'
      CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
      CIBW_TEST_REQUIRES: 'pytest'
      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" pytest-timeout mypy && pip install --prefer-binary "requests>=2.26" && (pip install --prefer-binary "pyarrow==7.0" || true)'
      CIBW_TEST_COMMAND: 'DUCKDB_PYTHON_TEST_EXTENSION_REQUIRED=1 python -m pytest {project}/tests'
      SETUPTOOLS_SCM_NO_LOCAL: 'yes'
      TWINE_USERNAME: 'hfmuehleisen'
      PYTEST_TIMEOUT: '600'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install requirements
      run: |
        sudo apt-get update -y -qq
        sudo apt-get install -y git ninja-build make gcc-multilib g++-multilib wget libssl-dev

    - name: Install CMake
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.sh
        chmod +x cmake-3.21.3-linux-x86_64.sh
        sudo ./cmake-3.21.3-linux-x86_64.sh --skip-license --prefix=/usr/local

    - name: Build extensions to test
      run: |
        GEN=ninja DISABLE_MAIN_DUCKDB_LIBRARY=1 BUILD_HTTPFS=1 STATIC_OPENSSL=1 make

    - name: Install
      run: pip install cibuildwheel twine

    - name: Build
      run: |
        cd tools/pythonpkg
        python setup.py sdist
        mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
        cibuildwheel --output-dir wheelhouse duckdb_tarball

   # All extensions uploaded by this job will be tested by the test_extensions.py test during the linux-python3 job.
   test-extensions:
    name: CentOS 7 Extensions
    runs-on: ubuntu-latest
    container: centos:7
#   needs: linux-python3-9
    strategy:
      matrix:
        force_32_bits: [0, 1]
    env:
      DISABLE_MAIN_DUCKDB_LIBRARY: 1
      BUILD_HTTPFS: 1
      STATIC_OPENSSL: 1
      TREAT_WARNINGS_AS_ERRORS: 1
      FORCE_WARN_UNUSED: 1
      OPENSSL_ROOT_DIR: /usr/local
      DISABLE_BUILTIN_EXTENSIONS: 1
      FORCE_32_BIT: ${{ matrix.force_32_bits}}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        yum install -y gcc gcc-c++ git cmake make
        yum install -y epel-release
        yum install -y make gcc perl-core pcre-devel wget zlib-devel glibc-devel.i686

    # the weird openssl findreplace fix with version numbers is from: https://github.com/h2o/h2o/issues/213
    - name: Install OpenSSL 1.1.1k
      run: |
        yum install -y gcc gcc-c++ git cmake make
        yum install -y epel-release
        yum install -y openssl11 openssl11-libs openssl11-devel
        yum install -y make gcc perl-core pcre-devel wget zlib-devel
        wget https://ftp.openssl.org/source/openssl-1.1.1k.tar.gz --no-check-certificate
        tar -xzvf openssl-1.1.1k.tar.gz
        cd openssl-1.1.1k
        find ./ -type f -exec sed -i -e 's/\#\ define\ OPENSSL\_VERSION\_NUMBER/\#define\ OPENSSL\_VERSION\_NUMBER/g' {} \;
        ./config --prefix=/usr --openssldir=/etc/ssl --libdir=lib no-shared zlib-dynamic
        make
        make install

    - name: Version Check
      run: |
        cmake --version
        ldd --version ldd

    - name: Build
      run: make

    - uses: actions/upload-artifact@v2
      with:
        name: python-wheel-test-extensions-centos-${{ matrix.force_32_bits == 0 && 'i686' || 'x86_64' }}
        path: |
          build/release/extension/*/*.duckdb_extension

   # TODO: optimize this: it could be run basically half the times if we know how to pass files to each specific wheel test
   linux-python3:
    name: Python 3 Linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [auto64, auto32]
        python_build: [cp37-*, cp38-*, cp39-*,cp310-*]
        isMaster:
          - ${{ github.ref == 'refs/heads/master' }}
        exclude:
          - isMaster: false
            python_build: 'cp38-*'
          - isMaster: false
            python_build: 'cp39-*'
    needs: test-extensions
    env:
      CIBW_BUILD: ${{ matrix.python_build}}
      CIBW_ARCHS: ${{ matrix.arch}}
      CIBW_BEFORE_BUILD: 'echo {package} && pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
      CIBW_TEST_REQUIRES: 'pytest'
      CIBW_BEFORE_TEST: 'echo {package} && pip install --prefer-binary "pandas>=0.24" pytest-timeout mypy && pip install --prefer-binary "requests>=2.26"'
      CIBW_TEST_COMMAND: 'echo "{wheel}" && ls {project} && pwd && DUCKDB_PYTHON_TEST_EXTENSION_PATH={project} DUCKDB_PYTHON_TEST_EXTENSION_REQUIRED=1 python -m pytest {project}/tests/fast/test_extensions.py'
      SETUPTOOLS_SCM_NO_LOCAL: 'yes'
      TWINE_USERNAME: 'hfmuehleisen'
      PYTEST_TIMEOUT: '600'
      DUCKDB_BUILD_UNITY: 1
      GLIBCXX_USE_CXX11_ABI: 0

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install
      run: pip install cibuildwheel twine

    - name: Prepare extension folder
      run: mkdir /tmp/duckdb_python_test_extensions

    - uses: actions/download-artifact@v3
      with:
        name: python-wheel-test-extensions-centos-${{ matrix.arch == 'auto32' && 'i686' || 'x86_64' }}
        path: /tmp/duckdb_python_test_extensions

    - name: check extensions for testing
      run: |
        ls /tmp
        ls /tmp/duckdb_python_test_extensions
        ls /tmp/duckdb_python_test_extensions/httpfs

    - name: Build
      run: |
        cd tools/pythonpkg
        python setup.py sdist
        mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
        cp /tmp/duckdb_python_test_extensions/*/*.duckdb_extension duckdb_tarball
        cp /tmp/duckdb_python_test_extensions/*/*.duckdb_extension .
        ls duckdb_tarball
        cibuildwheel --output-dir wheelhouse duckdb_tarball
        ls wheelhouse

    - name: Deploy
      run: |
        python scripts/asset-upload-gha.py duckdb_python_src.tar.gz=tools/pythonpkg/dist/duckdb-*.tar.gz
        if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ && "$GITHUB_REPOSITORY" = "duckdb/duckdb" ]] ; then
          twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl tools/pythonpkg/dist/duckdb-*.tar.gz
        fi

    # For testing, remove
    - uses: actions/upload-artifact@v2
      with:
        name: test-upload
        path: |
          tools/pythonpkg/wheelhouse/*.whl

   osx-python3:
      if: github.ref == 'refs/heads/master'
      name: Python 3 OSX
      runs-on: macos-latest
      strategy:
       matrix:
        python_build: [cp36-*, cp37-*, cp38-*, cp39-*, cp310-*]
        isMaster:
          - ${{ github.ref == 'refs/heads/master' }}
        exclude:
          - isMaster: false
            python_build: 'cp37-*'
          - isMaster: false
            python_build: 'cp38-*'
          - isMaster: false
            python_build: 'cp39-*'
      needs: linux-python3-9
      env:
        CIBW_BUILD: ${{ matrix.python_build}}
        CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" "requests>=2.26" mypy && (pip install --prefer-binary "pyarrow==7.0" || true)'
        CIBW_TEST_COMMAND: 'python -m pytest {project}/tests/fast'
        CIBW_ARCHS_MACOS: 'x86_64 universal2 arm64'
        SETUPTOOLS_SCM_NO_LOCAL: 'yes'
        TWINE_USERNAME: 'hfmuehleisen'
        DUCKDB_BUILD_UNITY: 1

      steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install
        run: pip install cibuildwheel twine

      - name: Build
        run: |
          cd tools/pythonpkg
          python setup.py sdist
          mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
          cibuildwheel --output-dir wheelhouse duckdb_tarball

      - name: Deploy
        run: |
          if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ && "$GITHUB_REPOSITORY" = "duckdb/duckdb" ]] ; then
            twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
          fi

   win-python3:
      name: Python 3 Windows
      runs-on: windows-latest
      strategy:
       matrix:
        python_build: [cp36-*, cp37-*, cp38-*, cp39-*, cp310-*]
        isMaster:
          - ${{ github.ref == 'refs/heads/master' }}
        exclude:
          - isMaster: false
            python_build: 'cp37-*'
          - isMaster: false
            python_build: 'cp38-*'
          - isMaster: false
            python_build: 'cp39-*'
      needs: linux-python3-9

      env:
        CIBW_BUILD: ${{ matrix.python_build}}
        CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3" mypy'
        CIBW_TEST_COMMAND: 'python -m pytest {project}/tests/fast'
        SETUPTOOLS_SCM_NO_LOCAL: 'yes'
        TWINE_USERNAME: 'hfmuehleisen'
        DUCKDB_BUILD_UNITY: 1

      steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install
        run: pip install cibuildwheel twine

      - name: Build
        run: |
          cd tools/pythonpkg
          python setup.py sdist
          mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
          cibuildwheel --output-dir wheelhouse duckdb_tarball

      - name: Deploy
        run: |
          if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ && "$GITHUB_REPOSITORY" = "duckdb/duckdb" ]] ; then
            twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
          fi

   linux-tarball:
      name: Python 3 Tarball
      runs-on: ubuntu-20.04
      needs: linux-python3-9

      steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install
        run: pip install numpy pytest pandas mypy

      - name: Build
        run: |
          python --version
          git archive --format zip --output test-tarball.zip HEAD
          mkdir duckdb-test-tarball
          mv test-tarball.zip duckdb-test-tarball
          cd duckdb-test-tarball
          unzip test-tarball.zip
          cd tools/pythonpkg
          export SETUPTOOLS_SCM_PRETEND_VERSION=0.2.2
          python setup.py install --user
          (cd tests/ && python -m pytest)
