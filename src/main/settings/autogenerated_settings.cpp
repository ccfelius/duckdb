//===----------------------------------------------------------------------===//
//                         DuckDB
// This code is autogenerated from 'update_settings_definitions.py'.
// Please do not make any changes directly here, as they will be overwritten.
// If you need to implement a custom function for a new setting, enable the
// 'custom_conversion_and_validation' in 'settings.json' for this setting.
//
//===----------------------------------------------------------------------===//

#include "duckdb/main/settings.hpp"

#include "duckdb/common/enums/access_mode.hpp"
#include "duckdb/catalog/catalog_search_path.hpp"
#include "duckdb/common/string_util.hpp"
#include "duckdb/main/attached_database.hpp"
#include "duckdb/main/client_context.hpp"
#include "duckdb/main/client_data.hpp"
#include "duckdb/main/config.hpp"
#include "duckdb/main/database.hpp"
#include "duckdb/main/database_manager.hpp"
#include "duckdb/main/query_profiler.hpp"
#include "duckdb/main/secret/secret_manager.hpp"
#include "duckdb/parallel/task_scheduler.hpp"
#include "duckdb/parser/parser.hpp"
#include "duckdb/planner/expression_binder.hpp"
#include "duckdb/storage/buffer_manager.hpp"
#include "duckdb/storage/storage_manager.hpp"

namespace duckdb {

//===----------------------------------------------------------------------===//
// Allocator Background Threads
//===----------------------------------------------------------------------===//
void AllocatorBackgroundThreadsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!AllocatorBackgroundThreadsSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.allocator_background_threads = input.GetValue<bool>();
}

void AllocatorBackgroundThreadsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!AllocatorBackgroundThreadsSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.allocator_background_threads = DBConfig().options.allocator_background_threads;
}

Value AllocatorBackgroundThreadsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.allocator_background_threads);
}

//===----------------------------------------------------------------------===//
// Allow Community Extensions
//===----------------------------------------------------------------------===//
void AllowCommunityExtensionsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!AllowCommunityExtensionsSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.allow_community_extensions = input.GetValue<bool>();
}

void AllowCommunityExtensionsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!AllowCommunityExtensionsSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.allow_community_extensions = DBConfig().options.allow_community_extensions;
}

Value AllowCommunityExtensionsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.allow_community_extensions);
}

//===----------------------------------------------------------------------===//
// Allow Extensions Metadata Mismatch
//===----------------------------------------------------------------------===//
void AllowExtensionsMetadataMismatchSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.allow_extensions_metadata_mismatch = input.GetValue<bool>();
}

void AllowExtensionsMetadataMismatchSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.allow_extensions_metadata_mismatch = DBConfig().options.allow_extensions_metadata_mismatch;
}

Value AllowExtensionsMetadataMismatchSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.allow_extensions_metadata_mismatch);
}

//===----------------------------------------------------------------------===//
// Allow Unredacted Secrets
//===----------------------------------------------------------------------===//
void AllowUnredactedSecretsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!AllowUnredactedSecretsSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.allow_unredacted_secrets = input.GetValue<bool>();
}

void AllowUnredactedSecretsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!AllowUnredactedSecretsSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.allow_unredacted_secrets = DBConfig().options.allow_unredacted_secrets;
}

Value AllowUnredactedSecretsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.allow_unredacted_secrets);
}

//===----------------------------------------------------------------------===//
// Allow Unsigned Extensions
//===----------------------------------------------------------------------===//
void AllowUnsignedExtensionsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!AllowUnsignedExtensionsSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.allow_unsigned_extensions = input.GetValue<bool>();
}

void AllowUnsignedExtensionsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!AllowUnsignedExtensionsSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.allow_unsigned_extensions = DBConfig().options.allow_unsigned_extensions;
}

Value AllowUnsignedExtensionsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.allow_unsigned_extensions);
}

//===----------------------------------------------------------------------===//
// Arrow Use List View
//===----------------------------------------------------------------------===//
void ArrowUseListViewSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.arrow_use_list_view = input.GetValue<bool>();
}

void ArrowUseListViewSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.arrow_use_list_view = DBConfig().options.arrow_use_list_view;
}

Value ArrowUseListViewSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.arrow_use_list_view);
}

//===----------------------------------------------------------------------===//
// Autoinstall Extension Repo
//===----------------------------------------------------------------------===//
void AutoinstallExtensionRepoSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.autoinstall_extension_repo = input.GetValue<string>();
}

void AutoinstallExtensionRepoSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.autoinstall_extension_repo = DBConfig().options.autoinstall_extension_repo;
}

Value AutoinstallExtensionRepoSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.autoinstall_extension_repo);
}

//===----------------------------------------------------------------------===//
// Autoinstall Known Extensions
//===----------------------------------------------------------------------===//
void AutoinstallKnownExtensionsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.autoinstall_known_extensions = input.GetValue<bool>();
}

void AutoinstallKnownExtensionsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.autoinstall_known_extensions = DBConfig().options.autoinstall_known_extensions;
}

Value AutoinstallKnownExtensionsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.autoinstall_known_extensions);
}

//===----------------------------------------------------------------------===//
// Autoload Known Extensions
//===----------------------------------------------------------------------===//
void AutoloadKnownExtensionsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.autoload_known_extensions = input.GetValue<bool>();
}

void AutoloadKnownExtensionsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.autoload_known_extensions = DBConfig().options.autoload_known_extensions;
}

Value AutoloadKnownExtensionsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.autoload_known_extensions);
}

//===----------------------------------------------------------------------===//
// Catalog Error Max Schemas
//===----------------------------------------------------------------------===//
void CatalogErrorMaxSchemasSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.catalog_error_max_schemas = input.GetValue<idx_t>();
}

void CatalogErrorMaxSchemasSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.catalog_error_max_schemas = DBConfig().options.catalog_error_max_schemas;
}

Value CatalogErrorMaxSchemasSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.catalog_error_max_schemas);
}

//===----------------------------------------------------------------------===//
// Custom Extension Repo
//===----------------------------------------------------------------------===//
void CustomExtensionRepoSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.custom_extension_repo = input.GetValue<string>();
}

void CustomExtensionRepoSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.custom_extension_repo = DBConfig().options.custom_extension_repo;
}

Value CustomExtensionRepoSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.custom_extension_repo);
}

//===----------------------------------------------------------------------===//
// Default Block Alloc Size
//===----------------------------------------------------------------------===//
void DefaultBlockAllocSizeSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!DefaultBlockAllocSizeSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.default_block_alloc_size = input.GetValue<idx_t>();
}

void DefaultBlockAllocSizeSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.default_block_alloc_size = DBConfig().options.default_block_alloc_size;
}

Value DefaultBlockAllocSizeSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.default_block_alloc_size);
}

//===----------------------------------------------------------------------===//
// Enable External Access
//===----------------------------------------------------------------------===//
void EnableExternalAccessSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!EnableExternalAccessSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.enable_external_access = input.GetValue<bool>();
}

void EnableExternalAccessSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!EnableExternalAccessSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.enable_external_access = DBConfig().options.enable_external_access;
}

Value EnableExternalAccessSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.enable_external_access);
}

//===----------------------------------------------------------------------===//
// Enable Fsst Vectors
//===----------------------------------------------------------------------===//
void EnableFsstVectorsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.enable_fsst_vectors = input.GetValue<bool>();
}

void EnableFsstVectorsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.enable_fsst_vectors = DBConfig().options.enable_fsst_vectors;
}

Value EnableFsstVectorsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.enable_fsst_vectors);
}

//===----------------------------------------------------------------------===//
// Enable Macro Dependencies
//===----------------------------------------------------------------------===//
void EnableMacroDependenciesSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.enable_macro_dependencies = input.GetValue<bool>();
}

void EnableMacroDependenciesSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.enable_macro_dependencies = DBConfig().options.enable_macro_dependencies;
}

Value EnableMacroDependenciesSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.enable_macro_dependencies);
}

//===----------------------------------------------------------------------===//
// Enable Progress Bar
//===----------------------------------------------------------------------===//
void EnableProgressBarSetting::SetLocal(ClientContext &context, const Value &input) {
	EnableProgressBarSetting::VerifyDBInstanceSET(context, input);
	auto &config = ClientConfig::GetConfig(context);
	config.enable_progress_bar = input.GetValue<bool>();
}

void EnableProgressBarSetting::ResetLocal(ClientContext &context) {
	if (!EnableProgressBarSetting::VerifyDBInstanceRESET(context)) {
		return;
	}
	ClientConfig::GetConfig(context).enable_progress_bar = ClientConfig().enable_progress_bar;
}

Value EnableProgressBarSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).enable_progress_bar);
}

//===----------------------------------------------------------------------===//
// Enable View Dependencies
//===----------------------------------------------------------------------===//
void EnableViewDependenciesSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.enable_view_dependencies = input.GetValue<bool>();
}

void EnableViewDependenciesSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.enable_view_dependencies = DBConfig().options.enable_view_dependencies;
}

Value EnableViewDependenciesSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.enable_view_dependencies);
}

//===----------------------------------------------------------------------===//
// Errors As Json
//===----------------------------------------------------------------------===//
void ErrorsAsJsonSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.errors_as_json = input.GetValue<bool>();
}

void ErrorsAsJsonSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).errors_as_json = ClientConfig().errors_as_json;
}

Value ErrorsAsJsonSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).errors_as_json);
}

//===----------------------------------------------------------------------===//
// External Threads
//===----------------------------------------------------------------------===//
void ExternalThreadsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!ExternalThreadsSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.external_threads = input.GetValue<idx_t>();
}

void ExternalThreadsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	if (!ExternalThreadsSetting::VerifyDBInstanceRESET(db, config)) {
		return;
	}
	config.options.external_threads = DBConfig().options.external_threads;
}

Value ExternalThreadsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.external_threads);
}

//===----------------------------------------------------------------------===//
// Force Asof Iejoin
//===----------------------------------------------------------------------===//
void ForceAsofIejoinSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.force_asof_iejoin = input.GetValue<bool>();
}

void ForceAsofIejoinSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).force_asof_iejoin = ClientConfig().force_asof_iejoin;
}

Value ForceAsofIejoinSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).force_asof_iejoin);
}

//===----------------------------------------------------------------------===//
// Force External
//===----------------------------------------------------------------------===//
void ForceExternalSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.force_external = input.GetValue<bool>();
}

void ForceExternalSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).force_external = ClientConfig().force_external;
}

Value ForceExternalSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).force_external);
}

//===----------------------------------------------------------------------===//
// Force No Cross Product
//===----------------------------------------------------------------------===//
void ForceNoCrossProductSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.force_no_cross_product = input.GetValue<bool>();
}

void ForceNoCrossProductSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).force_no_cross_product = ClientConfig().force_no_cross_product;
}

Value ForceNoCrossProductSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).force_no_cross_product);
}

//===----------------------------------------------------------------------===//
// Http Logging Output
//===----------------------------------------------------------------------===//
void HttpLoggingOutputSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.http_logging_output = input.GetValue<bool>();
}

void HttpLoggingOutputSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).http_logging_output = ClientConfig().http_logging_output;
}

Value HttpLoggingOutputSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).http_logging_output);
}

//===----------------------------------------------------------------------===//
// Http Metadata Cache Enable
//===----------------------------------------------------------------------===//
void HttpMetadataCacheEnableSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.http_metadata_cache_enable = input.GetValue<bool>();
}

void HttpMetadataCacheEnableSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.http_metadata_cache_enable = DBConfig().options.http_metadata_cache_enable;
}

Value HttpMetadataCacheEnableSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.http_metadata_cache_enable);
}

//===----------------------------------------------------------------------===//
// Immediate Transaction Mode
//===----------------------------------------------------------------------===//
void ImmediateTransactionModeSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.immediate_transaction_mode = input.GetValue<bool>();
}

void ImmediateTransactionModeSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.immediate_transaction_mode = DBConfig().options.immediate_transaction_mode;
}

Value ImmediateTransactionModeSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.immediate_transaction_mode);
}

//===----------------------------------------------------------------------===//
// Index Scan Max Count
//===----------------------------------------------------------------------===//
void IndexScanMaxCountSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.index_scan_max_count = input.GetValue<idx_t>();
}

void IndexScanMaxCountSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.index_scan_max_count = DBConfig().options.index_scan_max_count;
}

Value IndexScanMaxCountSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.index_scan_max_count);
}

//===----------------------------------------------------------------------===//
// Index Scan Percentage
//===----------------------------------------------------------------------===//
void IndexScanPercentageSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	if (!IndexScanPercentageSetting::VerifyDBInstanceSET(db, config, input)) {
		return;
	}
	config.options.index_scan_percentage = input.GetValue<double>();
}

void IndexScanPercentageSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.index_scan_percentage = DBConfig().options.index_scan_percentage;
}

Value IndexScanPercentageSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.index_scan_percentage);
}

//===----------------------------------------------------------------------===//
// Integer Division
//===----------------------------------------------------------------------===//
void IntegerDivisionSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.integer_division = input.GetValue<bool>();
}

void IntegerDivisionSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).integer_division = ClientConfig().integer_division;
}

Value IntegerDivisionSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).integer_division);
}

//===----------------------------------------------------------------------===//
// Lock Configuration
//===----------------------------------------------------------------------===//
void LockConfigurationSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.lock_configuration = input.GetValue<bool>();
}

void LockConfigurationSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.lock_configuration = DBConfig().options.lock_configuration;
}

Value LockConfigurationSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.lock_configuration);
}

//===----------------------------------------------------------------------===//
// Max Expression Depth
//===----------------------------------------------------------------------===//
void MaxExpressionDepthSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.max_expression_depth = input.GetValue<bool>();
}

void MaxExpressionDepthSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).max_expression_depth = ClientConfig().max_expression_depth;
}

Value MaxExpressionDepthSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).max_expression_depth);
}

//===----------------------------------------------------------------------===//
// Merge Join Threshold
//===----------------------------------------------------------------------===//
void MergeJoinThresholdSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.merge_join_threshold = input.GetValue<bool>();
}

void MergeJoinThresholdSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).merge_join_threshold = ClientConfig().merge_join_threshold;
}

Value MergeJoinThresholdSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).merge_join_threshold);
}

//===----------------------------------------------------------------------===//
// Nested Loop Join Threshold
//===----------------------------------------------------------------------===//
void NestedLoopJoinThresholdSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.nested_loop_join_threshold = input.GetValue<bool>();
}

void NestedLoopJoinThresholdSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).nested_loop_join_threshold = ClientConfig().nested_loop_join_threshold;
}

Value NestedLoopJoinThresholdSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).nested_loop_join_threshold);
}

//===----------------------------------------------------------------------===//
// Object Cache Enable
//===----------------------------------------------------------------------===//
void ObjectCacheEnableSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.object_cache_enable = input.GetValue<bool>();
}

void ObjectCacheEnableSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.object_cache_enable = DBConfig().options.object_cache_enable;
}

Value ObjectCacheEnableSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.object_cache_enable);
}

//===----------------------------------------------------------------------===//
// Old Implicit Casting
//===----------------------------------------------------------------------===//
void OldImplicitCastingSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.old_implicit_casting = input.GetValue<bool>();
}

void OldImplicitCastingSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.old_implicit_casting = DBConfig().options.old_implicit_casting;
}

Value OldImplicitCastingSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.old_implicit_casting);
}

//===----------------------------------------------------------------------===//
// Ordered Aggregate Threshold
//===----------------------------------------------------------------------===//
void OrderedAggregateThresholdSetting::SetLocal(ClientContext &context, const Value &input) {
	OrderedAggregateThresholdSetting::VerifyDBInstanceSET(context, input);
	auto &config = ClientConfig::GetConfig(context);
	config.ordered_aggregate_threshold = input.GetValue<bool>();
}

void OrderedAggregateThresholdSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).ordered_aggregate_threshold = ClientConfig().ordered_aggregate_threshold;
}

Value OrderedAggregateThresholdSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).ordered_aggregate_threshold);
}

//===----------------------------------------------------------------------===//
// Partitioned Write Flush Threshold
//===----------------------------------------------------------------------===//
void PartitionedWriteFlushThresholdSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.partitioned_write_flush_threshold = input.GetValue<bool>();
}

void PartitionedWriteFlushThresholdSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).partitioned_write_flush_threshold = ClientConfig().partitioned_write_flush_threshold;
}

Value PartitionedWriteFlushThresholdSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).partitioned_write_flush_threshold);
}

//===----------------------------------------------------------------------===//
// Partitioned Write Max Open Files
//===----------------------------------------------------------------------===//
void PartitionedWriteMaxOpenFilesSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.partitioned_write_max_open_files = input.GetValue<bool>();
}

void PartitionedWriteMaxOpenFilesSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).partitioned_write_max_open_files = ClientConfig().partitioned_write_max_open_files;
}

Value PartitionedWriteMaxOpenFilesSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).partitioned_write_max_open_files);
}

//===----------------------------------------------------------------------===//
// Perfect Ht Threshold
//===----------------------------------------------------------------------===//
void PerfectHtThresholdSetting::SetLocal(ClientContext &context, const Value &input) {
	PerfectHtThresholdSetting::VerifyDBInstanceSET(context, input);
	auto &config = ClientConfig::GetConfig(context);
	config.perfect_ht_threshold = input.GetValue<bool>();
}

void PerfectHtThresholdSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).perfect_ht_threshold = ClientConfig().perfect_ht_threshold;
}

Value PerfectHtThresholdSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).perfect_ht_threshold);
}

//===----------------------------------------------------------------------===//
// Pivot Limit
//===----------------------------------------------------------------------===//
void PivotLimitSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.pivot_limit = input.GetValue<bool>();
}

void PivotLimitSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).pivot_limit = ClientConfig().pivot_limit;
}

Value PivotLimitSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).pivot_limit);
}

//===----------------------------------------------------------------------===//
// Prefer Range Joins
//===----------------------------------------------------------------------===//
void PreferRangeJoinsSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.prefer_range_joins = input.GetValue<bool>();
}

void PreferRangeJoinsSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).prefer_range_joins = ClientConfig().prefer_range_joins;
}

Value PreferRangeJoinsSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).prefer_range_joins);
}

//===----------------------------------------------------------------------===//
// Preserve Identifier Case
//===----------------------------------------------------------------------===//
void PreserveIdentifierCaseSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.preserve_identifier_case = input.GetValue<bool>();
}

void PreserveIdentifierCaseSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).preserve_identifier_case = ClientConfig().preserve_identifier_case;
}

Value PreserveIdentifierCaseSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).preserve_identifier_case);
}

//===----------------------------------------------------------------------===//
// Preserve Insertion Order
//===----------------------------------------------------------------------===//
void PreserveInsertionOrderSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.preserve_insertion_order = input.GetValue<bool>();
}

void PreserveInsertionOrderSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.preserve_insertion_order = DBConfig().options.preserve_insertion_order;
}

Value PreserveInsertionOrderSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.preserve_insertion_order);
}

//===----------------------------------------------------------------------===//
// Print Progress Bar
//===----------------------------------------------------------------------===//
void PrintProgressBarSetting::SetLocal(ClientContext &context, const Value &input) {
	PrintProgressBarSetting::VerifyDBInstanceSET(context, input);
	auto &config = ClientConfig::GetConfig(context);
	config.print_progress_bar = input.GetValue<bool>();
}

void PrintProgressBarSetting::ResetLocal(ClientContext &context) {
	if (!PrintProgressBarSetting::VerifyDBInstanceRESET(context)) {
		return;
	}
	ClientConfig::GetConfig(context).print_progress_bar = ClientConfig().print_progress_bar;
}

Value PrintProgressBarSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).print_progress_bar);
}

//===----------------------------------------------------------------------===//
// Produce Arrow String Views
//===----------------------------------------------------------------------===//
void ProduceArrowStringViewsSetting::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {
	config.options.produce_arrow_string_views = input.GetValue<bool>();
}

void ProduceArrowStringViewsSetting::ResetGlobal(DatabaseInstance *db, DBConfig &config) {
	config.options.produce_arrow_string_views = DBConfig().options.produce_arrow_string_views;
}

Value ProduceArrowStringViewsSetting::GetSetting(const ClientContext &context) {
	auto &config = DBConfig::GetConfig(context);
	return Value::CreateValue(config.options.produce_arrow_string_views);
}

//===----------------------------------------------------------------------===//
// Profiler Save Location
//===----------------------------------------------------------------------===//
void ProfilerSaveLocationSetting::SetLocal(ClientContext &context, const Value &input) {
	auto &config = ClientConfig::GetConfig(context);
	config.profiler_save_location = input.GetValue<bool>();
}

void ProfilerSaveLocationSetting::ResetLocal(ClientContext &context) {
	ClientConfig::GetConfig(context).profiler_save_location = ClientConfig().profiler_save_location;
}

Value ProfilerSaveLocationSetting::GetSetting(const ClientContext &context) {
	return Value::CreateValue(ClientConfig::GetConfig(context).profiler_save_location);
}

} // namespace duckdb
