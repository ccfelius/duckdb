//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/serializer.hpp"
#include "duckdb/common/serializer/deserializer.hpp"
#include "duckdb/parser/query_node/list.hpp"

namespace duckdb {

void QueryNode::Serialize(Serializer &serializer) const {
	serializer.WriteProperty(100, "type", type);
	serializer.WritePropertyWithDefault(101, "modifiers", modifiers);
	serializer.WriteProperty(102, "cte_map", cte_map);
}

unique_ptr<QueryNode> QueryNode::Deserialize(Deserializer &deserializer) {
	auto type = deserializer.ReadProperty<QueryNodeType>(100, "type");
	auto modifiers = deserializer.ReadPropertyWithDefault<vector<unique_ptr<ResultModifier>>>(101, "modifiers");
	auto cte_map = deserializer.ReadProperty<CommonTableExpressionMap>(102, "cte_map");
	unique_ptr<QueryNode> result;
	switch (type) {
	case QueryNodeType::CTE_NODE:
		result = CTENode::Deserialize(deserializer);
		break;
	case QueryNodeType::RECURSIVE_CTE_NODE:
		result = RecursiveCTENode::Deserialize(deserializer);
		break;
	case QueryNodeType::SELECT_NODE:
		result = SelectNode::Deserialize(deserializer);
		break;
	case QueryNodeType::SET_OPERATION_NODE:
		result = SetOperationNode::Deserialize(deserializer);
		break;
	default:
		throw SerializationException("Unsupported type for deserialization of QueryNode!");
	}
	result->modifiers = std::move(modifiers);
	result->cte_map = std::move(cte_map);
	return result;
}

void CTENode::Serialize(Serializer &serializer) const {
	QueryNode::Serialize(serializer);
	serializer.WritePropertyWithDefault(200, "cte_name", ctename);
	serializer.WritePropertyWithDefault(201, "query", query);
	serializer.WritePropertyWithDefault(202, "child", child);
	serializer.WritePropertyWithDefault(203, "aliases", aliases);
}

unique_ptr<QueryNode> CTENode::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<CTENode>(new CTENode());
	deserializer.ReadPropertyWithDefault(200, "cte_name", result->ctename);
	deserializer.ReadPropertyWithDefault(201, "query", result->query);
	deserializer.ReadPropertyWithDefault(202, "child", result->child);
	deserializer.ReadPropertyWithDefault(203, "aliases", result->aliases);
	return std::move(result);
}

void RecursiveCTENode::Serialize(Serializer &serializer) const {
	QueryNode::Serialize(serializer);
	serializer.WritePropertyWithDefault(200, "cte_name", ctename);
	serializer.WritePropertyWithDefault(201, "union_all", union_all, false);
	serializer.WritePropertyWithDefault(202, "left", left);
	serializer.WritePropertyWithDefault(203, "right", right);
	serializer.WritePropertyWithDefault(204, "aliases", aliases);
}

unique_ptr<QueryNode> RecursiveCTENode::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<RecursiveCTENode>(new RecursiveCTENode());
	deserializer.ReadPropertyWithDefault(200, "cte_name", result->ctename);
	deserializer.ReadPropertyWithDefault(201, "union_all", result->union_all, false);
	deserializer.ReadPropertyWithDefault(202, "left", result->left);
	deserializer.ReadPropertyWithDefault(203, "right", result->right);
	deserializer.ReadPropertyWithDefault(204, "aliases", result->aliases);
	return std::move(result);
}

void SelectNode::Serialize(Serializer &serializer) const {
	QueryNode::Serialize(serializer);
	serializer.WritePropertyWithDefault(200, "select_list", select_list);
	serializer.WritePropertyWithDefault(201, "from_table", from_table);
	serializer.WritePropertyWithDefault(202, "where_clause", where_clause);
	serializer.WritePropertyWithDefault(203, "group_expressions", groups.group_expressions);
	serializer.WritePropertyWithDefault(204, "group_sets", groups.grouping_sets);
	serializer.WriteProperty(205, "aggregate_handling", aggregate_handling);
	serializer.WritePropertyWithDefault(206, "having", having);
	serializer.WritePropertyWithDefault(207, "sample", sample);
	serializer.WritePropertyWithDefault(208, "qualify", qualify);
}

unique_ptr<QueryNode> SelectNode::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<SelectNode>(new SelectNode());
	deserializer.ReadPropertyWithDefault(200, "select_list", result->select_list);
	deserializer.ReadPropertyWithDefault(201, "from_table", result->from_table);
	deserializer.ReadPropertyWithDefault(202, "where_clause", result->where_clause);
	deserializer.ReadPropertyWithDefault(203, "group_expressions", result->groups.group_expressions);
	deserializer.ReadPropertyWithDefault(204, "group_sets", result->groups.grouping_sets);
	deserializer.ReadProperty(205, "aggregate_handling", result->aggregate_handling);
	deserializer.ReadPropertyWithDefault(206, "having", result->having);
	deserializer.ReadPropertyWithDefault(207, "sample", result->sample);
	deserializer.ReadPropertyWithDefault(208, "qualify", result->qualify);
	return std::move(result);
}

void SetOperationNode::Serialize(Serializer &serializer) const {
	QueryNode::Serialize(serializer);
	serializer.WriteProperty(200, "setop_type", setop_type);
	serializer.WritePropertyWithDefault(201, "left", left);
	serializer.WritePropertyWithDefault(202, "right", right);
}

unique_ptr<QueryNode> SetOperationNode::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<SetOperationNode>(new SetOperationNode());
	deserializer.ReadProperty(200, "setop_type", result->setop_type);
	deserializer.ReadPropertyWithDefault(201, "left", result->left);
	deserializer.ReadPropertyWithDefault(202, "right", result->right);
	return std::move(result);
}

} // namespace duckdb
