//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/format_serializer.hpp"
#include "duckdb/common/serializer/format_deserializer.hpp"
#include "duckdb/common/types.hpp"
#include "duckdb/parser/common_table_expression_info.hpp"
#include "duckdb/parser/query_node.hpp"
#include "duckdb/parser/result_modifier.hpp"
#include "duckdb/parser/expression/case_expression.hpp"
#include "duckdb/planner/expression/bound_case_expression.hpp"
#include "duckdb/parser/parsed_data/sample_options.hpp"
#include "duckdb/parser/tableref/pivotref.hpp"
#include "duckdb/parser/column_definition.hpp"
#include "duckdb/parser/column_list.hpp"

namespace duckdb {

void BoundCaseCheck::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("when_expr", *when_expr);
	serializer.WriteProperty("then_expr", *then_expr);
}

BoundCaseCheck BoundCaseCheck::FormatDeserialize(FormatDeserializer &deserializer) {
	BoundCaseCheck result;
	deserializer.ReadProperty("when_expr", result.when_expr);
	deserializer.ReadProperty("then_expr", result.then_expr);
	return result;
}

void CaseCheck::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("when_expr", *when_expr);
	serializer.WriteProperty("then_expr", *then_expr);
}

CaseCheck CaseCheck::FormatDeserialize(FormatDeserializer &deserializer) {
	CaseCheck result;
	deserializer.ReadProperty("when_expr", result.when_expr);
	deserializer.ReadProperty("then_expr", result.then_expr);
	return result;
}

void ColumnDefinition::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("name", name);
	serializer.WriteProperty("type", type);
	serializer.WriteOptionalProperty("expression", expression);
	serializer.WriteProperty("category", category);
	serializer.WriteProperty("compression_type", compression_type);
}

ColumnDefinition ColumnDefinition::FormatDeserialize(FormatDeserializer &deserializer) {
	auto name = deserializer.ReadProperty<string>("name");
	auto type = deserializer.ReadProperty<LogicalType>("type");
	auto expression = deserializer.ReadOptionalProperty<unique_ptr<ParsedExpression>>("expression");
	auto category = deserializer.ReadProperty<TableColumnType>("category");
	ColumnDefinition result(std::move(name), std::move(type), std::move(expression), category);
	deserializer.ReadProperty("compression_type", result.compression_type);
	return result;
}

void ColumnList::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("columns", columns);
}

ColumnList ColumnList::FormatDeserialize(FormatDeserializer &deserializer) {
	auto columns = deserializer.ReadProperty<vector<ColumnDefinition>>("columns");
	ColumnList result(std::move(columns));
	return result;
}

void CommonTableExpressionInfo::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("aliases", aliases);
	serializer.WriteProperty("query", *query);
	serializer.WriteProperty("materialized", materialized);
}

unique_ptr<CommonTableExpressionInfo> CommonTableExpressionInfo::FormatDeserialize(FormatDeserializer &deserializer) {
	auto result = duckdb::unique_ptr<CommonTableExpressionInfo>(new CommonTableExpressionInfo());
	deserializer.ReadProperty("aliases", result->aliases);
	deserializer.ReadProperty("query", result->query);
	deserializer.ReadProperty("materialized", result->materialized);
	return result;
}

void CommonTableExpressionMap::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("map", map);
}

CommonTableExpressionMap CommonTableExpressionMap::FormatDeserialize(FormatDeserializer &deserializer) {
	CommonTableExpressionMap result;
	deserializer.ReadProperty("map", result.map);
	return result;
}

void LogicalType::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("id", id_);
	serializer.WriteOptionalProperty("type_info", type_info_);
}

LogicalType LogicalType::FormatDeserialize(FormatDeserializer &deserializer) {
	auto id = deserializer.ReadProperty<LogicalTypeId>("id");
	auto type_info = deserializer.ReadOptionalProperty<shared_ptr<ExtraTypeInfo>>("type_info");
	LogicalType result(id, std::move(type_info));
	return result;
}

void OrderByNode::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("type", type);
	serializer.WriteProperty("null_order", null_order);
	serializer.WriteProperty("expression", *expression);
}

OrderByNode OrderByNode::FormatDeserialize(FormatDeserializer &deserializer) {
	auto type = deserializer.ReadProperty<OrderType>("type");
	auto null_order = deserializer.ReadProperty<OrderByNullType>("null_order");
	auto expression = deserializer.ReadProperty<unique_ptr<ParsedExpression>>("expression");
	OrderByNode result(type, null_order, std::move(expression));
	return result;
}

void PivotColumn::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("pivot_expressions", pivot_expressions);
	serializer.WriteProperty("unpivot_names", unpivot_names);
	serializer.WriteProperty("entries", entries);
	serializer.WriteProperty("pivot_enum", pivot_enum);
}

PivotColumn PivotColumn::FormatDeserialize(FormatDeserializer &deserializer) {
	PivotColumn result;
	deserializer.ReadProperty("pivot_expressions", result.pivot_expressions);
	deserializer.ReadProperty("unpivot_names", result.unpivot_names);
	deserializer.ReadProperty("entries", result.entries);
	deserializer.ReadProperty("pivot_enum", result.pivot_enum);
	return result;
}

void SampleOptions::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("sample_size", sample_size);
	serializer.WriteProperty("is_percentage", is_percentage);
	serializer.WriteProperty("method", method);
	serializer.WriteProperty("seed", seed);
}

unique_ptr<SampleOptions> SampleOptions::FormatDeserialize(FormatDeserializer &deserializer) {
	auto result = duckdb::unique_ptr<SampleOptions>(new SampleOptions());
	deserializer.ReadProperty("sample_size", result->sample_size);
	deserializer.ReadProperty("is_percentage", result->is_percentage);
	deserializer.ReadProperty("method", result->method);
	deserializer.ReadProperty("seed", result->seed);
	return result;
}

} // namespace duckdb
